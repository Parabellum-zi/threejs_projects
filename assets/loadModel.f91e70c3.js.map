{"version":3,"file":"loadModel.f91e70c3.js","sources":["../../src/components/loadModel.vue"],"sourcesContent":["<!--\n@name:\n@version:1.0\n@description: threeJs scene load model with animation\n@author: parabellum\n@time: 2022-02-17 11:05:57\n-->\n<template>\n  <div id=\"sceneContainer\" ref=\"sceneContainer\"></div>\n</template>\n\n<script setup>\nimport { onMounted, reactive, ref } from \"vue\";\nimport * as THREE from \"three\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader.js\";\nimport threeUniversal from \"../utils/threeUniversal.js\";\nimport Base3D from \"../utils/base3D\";\n\nconst sceneContainer = ref(null);\nlet loadedGltf = [];\nlet animationAction;\nlet mixer;\nconst clock = new THREE.Clock();\nlet data = reactive({\n  base3D: {},\n});\nonMounted(() => {\n  initScene();\n  animate();\n  loadModel();\n});\n\nfunction initScene() {\n  data.base3D = new Base3D(sceneContainer.value);\n}\n\nfunction render() {\n  let time = clock.getDelta();\n  if (mixer) {\n    mixer.update(time);\n  }\n}\n\nfunction animate(time) {\n  time *= 0.001;\n  modelChange(time);\n  render();\n  // const elapsedTime = clock.getElapsedTime();\n  requestAnimationFrame(animate);\n}\n\nfunction modelChange(time) {\n  if (loadedGltf.length === 0) return;\n  loadedGltf.map((item) => {\n    switch (item.name) {\n      case \"rotation001\":\n        rotationY(item, time * 0.1);\n        break;\n      case \"rotation002\":\n        rotationY(item, time);\n        break;\n      case \"rotation003\":\n        rotationY(item, -time * 0.2);\n        break;\n      case \"rotation004\":\n        rotationY(item, time * 0.4);\n        break;\n    }\n  });\n}\n\n/**\n * 部件绕x轴方向旋转\n */\nfunction rotationX(parts, time) {\n  for (const part of parts) {\n    part.rotation.x = time;\n  }\n}\n\n/**\n * 部件绕y轴方向旋转\n */\nfunction rotationY(parts, time) {\n  parts.rotation.y = time;\n}\n/**\n * 部件改变位置\n */\nfunction changePosition(parts, time) {\n  // console.log(parts);\n  // parts.position.y += 0.001;\n  // if (parts.position.z >= 13) {\n  //   parts.position.z -= 0.2;\n  // }\n  // if (parts.position.z <= -13) {\n  //   parts.position.z += 0.2;\n  // }\n  // console.log(time);\n}\n\nfunction loadModel() {\n  const loader = new GLTFLoader();\n  // const loader = new ColladaLoader();\n  loader.load(\n    // \"static/model/CVT.gltf\",\n    // \"static/model/plant.gltf\",\n    // \"static/model/stormtrooper.dae\",\n    // \"static/model/animation.gltf\",\n    // \"static/model/dz.gltf\",\n    // \"static/model/pool.gltf\",\n    // \"static/model/liede.gltf\",\n    \"static/model/jiadu/jiadu2.gltf\",\n    (gltf) => {\n      // console.log(gltf);\n      // gltf.scene.scale.x = 0.2;\n      // gltf.scene.scale.y = 0.2;\n      // gltf.scene.scale.z = 0.2;\n      gltf.scene.scale.x = 50;\n      gltf.scene.scale.y = 50;\n      gltf.scene.scale.z = 50;\n      // gltf.scene.scale.x = 0.01;\n      // gltf.scene.scale.y = 0.01;\n      // gltf.scene.scale.z = 0.01;\n      data.base3D.scene.add(gltf.scene); //gltf.scene 添加了所有场景\n\n      //添加骨骼辅助\n      let meshHelper = new THREE.SkeletonHelper(gltf.scene);\n      data.base3D.scene.add(meshHelper);\n\n      // console.log(threeUniversal.dumpObject(gltf.scene).join(\"\\n\")); // print node tree\n      // loadedGltf.push(gltf.scene.getObjectByName(\"Mesh206\"));\n      // loadedGltf.push(gltf.scene.getObjectByName(\"Mesh207\"));\n      // loadedGltf.push(gltf.scene.getObjectByName(\"Mesh208\"));\n      // loadedGltf.push(gltf.scene.getObjectByName(\"Mesh120\"));\n\n      loadedGltf.push(gltf.scene.getObjectByName(\"rotation001\"));\n      loadedGltf.push(gltf.scene.getObjectByName(\"rotation002\"));\n      loadedGltf.push(gltf.scene.getObjectByName(\"rotation003\"));\n      loadedGltf.push(gltf.scene.getObjectByName(\"rotation004\"));\n\n      // 调用动画\n      //AnimationMixer是场景中特定对象的动画播放器。当场景中的多个对象独立动画时，可以为每个对象使用一个AnimationMixer\n      // let mixer = new THREE.AnimationMixer(camera); // 相当于设置好关键帧播放器\n      // mixer = new THREE.AnimationMixer(gltf.scene); // 相当于设置好关键帧播放器\n\n      // animationAction = mixer.clipAction(gltf.animations[0]);\n      // 设置动画播放时长(秒，重复次数)\n      // animationAction.setDuration(1).setLoop(THREE.LoopRepeat);\n      // animationAction.play();\n\n      // gltf.scene.rotation.z += Math.PI;\n    },\n    (xhr) => {\n      console.log((xhr.loaded / xhr.total) * 100 + \"% loaded\");\n    },\n    (error) => {\n      console.error(error);\n    }\n  );\n}\n</script>\n\n<style scoped>\n#sceneContainer {\n  width: 100%;\n  height: 100%;\n}\n\n#sceneContainer,\ncanvas {\n  position: fixed;\n  top: 0;\n  left: 0;\n  outline: none;\n}\n</style>\n"],"names":["THREE.Clock","THREE.SkeletonHelper"],"mappings":"yYAkBA,KAAM,GAAiB,EAAI,MAC3B,GAAI,GAAa,GAGjB,KAAM,GAAQ,GAAIA,GAClB,GAAI,GAAO,EAAS,CAClB,OAAQ,KAEV,EAAU,IAAM,CACd,IACA,IACA,MAGF,YAAqB,CACnB,EAAK,OAAS,GAAI,GAAO,EAAe,OAG1C,YAAkB,CACL,EAAM,WAMnB,WAAiB,EAAM,CACrB,GAAQ,KACR,EAAY,GACZ,IAEA,sBAAsB,GAGxB,WAAqB,EAAM,CACzB,AAAI,EAAW,SAAW,GAC1B,EAAW,IAAI,AAAC,GAAS,CACvB,OAAQ,EAAK,UACN,cACH,EAAU,EAAM,EAAO,IACvB,UACG,cACH,EAAU,EAAM,GAChB,UACG,cACH,EAAU,EAAM,CAAC,EAAO,IACxB,UACG,cACH,EAAU,EAAM,EAAO,IACvB,SAiBR,WAAmB,EAAO,EAAM,CAC9B,EAAM,SAAS,EAAI,EAiBrB,YAAqB,CAGnB,AAFe,GAAI,KAEZ,KAQL,iCACA,AAAC,GAAS,CAKR,EAAK,MAAM,MAAM,EAAI,GACrB,EAAK,MAAM,MAAM,EAAI,GACrB,EAAK,MAAM,MAAM,EAAI,GAIrB,EAAK,OAAO,MAAM,IAAI,EAAK,OAG3B,GAAI,GAAa,GAAIC,GAAqB,EAAK,OAC/C,EAAK,OAAO,MAAM,IAAI,GAQtB,EAAW,KAAK,EAAK,MAAM,gBAAgB,gBAC3C,EAAW,KAAK,EAAK,MAAM,gBAAgB,gBAC3C,EAAW,KAAK,EAAK,MAAM,gBAAgB,gBAC3C,EAAW,KAAK,EAAK,MAAM,gBAAgB,iBAc7C,AAAC,GAAQ,CACP,QAAQ,IAAK,EAAI,OAAS,EAAI,MAAS,IAAM,aAE/C,AAAC,GAAU,CACT,QAAQ,MAAM"}