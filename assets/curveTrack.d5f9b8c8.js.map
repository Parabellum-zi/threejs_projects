{"version":3,"file":"curveTrack.d5f9b8c8.js","sources":["../../node_modules/three/examples/jsm/modifiers/CurveModifier.js","../../node_modules/three/examples/jsm/controls/TransformControls.js","../../src/components/curveTrack.vue"],"sourcesContent":["// Original src: https://github.com/zz85/threejs-path-flow\nconst CHANNELS = 4;\nconst TEXTURE_WIDTH = 1024;\nconst TEXTURE_HEIGHT = 4;\n\nimport {\n\tDataTexture,\n\tRGBAFormat,\n\tFloatType,\n\tRepeatWrapping,\n\tMesh,\n\tInstancedMesh,\n\tNearestFilter,\n\tDynamicDrawUsage,\n\tMatrix4\n} from 'three';\n\n/**\n * Make a new DataTexture to store the descriptions of the curves.\n *\n * @param { number } numberOfCurves the number of curves needed to be described by this texture.\n */\nexport function initSplineTexture( numberOfCurves = 1 ) {\n\n\tconst dataArray = new Float32Array( TEXTURE_WIDTH * TEXTURE_HEIGHT * numberOfCurves * CHANNELS );\n\tconst dataTexture = new DataTexture(\n\t\tdataArray,\n\t\tTEXTURE_WIDTH,\n\t\tTEXTURE_HEIGHT * numberOfCurves,\n\t\tRGBAFormat,\n\t\tFloatType\n\t);\n\n\tdataTexture.wrapS = RepeatWrapping;\n\tdataTexture.wrapY = RepeatWrapping;\n\tdataTexture.magFilter = NearestFilter;\n\tdataTexture.needsUpdate = true;\n\n\treturn dataTexture;\n\n}\n\n/**\n * Write the curve description to the data texture\n *\n * @param { DataTexture } texture The DataTexture to write to\n * @param { Curve } splineCurve The curve to describe\n * @param { number } offset Which curve slot to write to\n */\nexport function updateSplineTexture( texture, splineCurve, offset = 0 ) {\n\n\tconst numberOfPoints = Math.floor( TEXTURE_WIDTH * ( TEXTURE_HEIGHT / 4 ) );\n\tsplineCurve.arcLengthDivisions = numberOfPoints / 2;\n\tsplineCurve.updateArcLengths();\n\tconst points = splineCurve.getSpacedPoints( numberOfPoints );\n\tconst frenetFrames = splineCurve.computeFrenetFrames( numberOfPoints, true );\n\n\tfor ( let i = 0; i < numberOfPoints; i ++ ) {\n\n\t\tconst rowOffset = Math.floor( i / TEXTURE_WIDTH );\n\t\tconst rowIndex = i % TEXTURE_WIDTH;\n\n\t\tlet pt = points[ i ];\n\t\tsetTextureValue( texture, rowIndex, pt.x, pt.y, pt.z, 0 + rowOffset + ( TEXTURE_HEIGHT * offset ) );\n\t\tpt = frenetFrames.tangents[ i ];\n\t\tsetTextureValue( texture, rowIndex, pt.x, pt.y, pt.z, 1 + rowOffset + ( TEXTURE_HEIGHT * offset ) );\n\t\tpt = frenetFrames.normals[ i ];\n\t\tsetTextureValue( texture, rowIndex, pt.x, pt.y, pt.z, 2 + rowOffset + ( TEXTURE_HEIGHT * offset ) );\n\t\tpt = frenetFrames.binormals[ i ];\n\t\tsetTextureValue( texture, rowIndex, pt.x, pt.y, pt.z, 3 + rowOffset + ( TEXTURE_HEIGHT * offset ) );\n\n\t}\n\n\ttexture.needsUpdate = true;\n\n}\n\n\nfunction setTextureValue( texture, index, x, y, z, o ) {\n\n\tconst image = texture.image;\n\tconst { data } = image;\n\tconst i = CHANNELS * TEXTURE_WIDTH * o; // Row Offset\n\tdata[ index * CHANNELS + i + 0 ] = x;\n\tdata[ index * CHANNELS + i + 1 ] = y;\n\tdata[ index * CHANNELS + i + 2 ] = z;\n\tdata[ index * CHANNELS + i + 3 ] = 1;\n\n}\n\n/**\n * Create a new set of uniforms for describing the curve modifier\n *\n * @param { DataTexture } Texture which holds the curve description\n */\nexport function getUniforms( splineTexture ) {\n\n\tconst uniforms = {\n\t\tspineTexture: { value: splineTexture },\n\t\tpathOffset: { type: 'f', value: 0 }, // time of path curve\n\t\tpathSegment: { type: 'f', value: 1 }, // fractional length of path\n\t\tspineOffset: { type: 'f', value: 161 },\n\t\tspineLength: { type: 'f', value: 400 },\n\t\tflow: { type: 'i', value: 1 },\n\t};\n\treturn uniforms;\n\n}\n\nexport function modifyShader( material, uniforms, numberOfCurves = 1 ) {\n\n\tif ( material.__ok ) return;\n\tmaterial.__ok = true;\n\n\tmaterial.onBeforeCompile = ( shader ) => {\n\n\t\tif ( shader.__modified ) return;\n\t\tshader.__modified = true;\n\n\t\tObject.assign( shader.uniforms, uniforms );\n\n\t\tconst vertexShader = `\n\t\tuniform sampler2D spineTexture;\n\t\tuniform float pathOffset;\n\t\tuniform float pathSegment;\n\t\tuniform float spineOffset;\n\t\tuniform float spineLength;\n\t\tuniform int flow;\n\n\t\tfloat textureLayers = ${TEXTURE_HEIGHT * numberOfCurves}.;\n\t\tfloat textureStacks = ${TEXTURE_HEIGHT / 4}.;\n\n\t\t${shader.vertexShader}\n\t\t`\n\t\t// chunk import moved in front of modified shader below\n\t\t\t.replace( '#include <beginnormal_vertex>', '' )\n\n\t\t\t// vec3 transformedNormal declaration overriden below\n\t\t\t.replace( '#include <defaultnormal_vertex>', '' )\n\n\t\t\t// vec3 transformed declaration overriden below\n\t\t\t.replace( '#include <begin_vertex>', '' )\n\n\t\t\t// shader override\n\t\t\t.replace(\n\t\t\t\t/void\\s*main\\s*\\(\\)\\s*\\{/,\n\t\t\t\t`\nvoid main() {\n#include <beginnormal_vertex>\n\nvec4 worldPos = modelMatrix * vec4(position, 1.);\n\nbool bend = flow > 0;\nfloat xWeight = bend ? 0. : 1.;\n\n#ifdef USE_INSTANCING\nfloat pathOffsetFromInstanceMatrix = instanceMatrix[3][2];\nfloat spineLengthFromInstanceMatrix = instanceMatrix[3][0];\nfloat spinePortion = bend ? (worldPos.x + spineOffset) / spineLengthFromInstanceMatrix : 0.;\nfloat mt = (spinePortion * pathSegment + pathOffset + pathOffsetFromInstanceMatrix)*textureStacks;\n#else\nfloat spinePortion = bend ? (worldPos.x + spineOffset) / spineLength : 0.;\nfloat mt = (spinePortion * pathSegment + pathOffset)*textureStacks;\n#endif\n\nmt = mod(mt, textureStacks);\nfloat rowOffset = floor(mt);\n\n#ifdef USE_INSTANCING\nrowOffset += instanceMatrix[3][1] * ${TEXTURE_HEIGHT}.;\n#endif\n\nvec3 spinePos = texture2D(spineTexture, vec2(mt, (0. + rowOffset + 0.5) / textureLayers)).xyz;\nvec3 a =        texture2D(spineTexture, vec2(mt, (1. + rowOffset + 0.5) / textureLayers)).xyz;\nvec3 b =        texture2D(spineTexture, vec2(mt, (2. + rowOffset + 0.5) / textureLayers)).xyz;\nvec3 c =        texture2D(spineTexture, vec2(mt, (3. + rowOffset + 0.5) / textureLayers)).xyz;\nmat3 basis = mat3(a, b, c);\n\nvec3 transformed = basis\n\t* vec3(worldPos.x * xWeight, worldPos.y * 1., worldPos.z * 1.)\n\t+ spinePos;\n\nvec3 transformedNormal = normalMatrix * (basis * objectNormal);\n\t\t\t` ).replace(\n\t\t\t\t'#include <project_vertex>',\n\t\t\t\t`vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n\t\t\t\tgl_Position = projectionMatrix * mvPosition;`\n\t\t\t);\n\n\t\tshader.vertexShader = vertexShader;\n\n\t};\n\n}\n\n/**\n * A helper class for making meshes bend aroudn curves\n */\nexport class Flow {\n\n\t/**\n\t * @param {Mesh} mesh The mesh to clone and modify to bend around the curve\n\t * @param {number} numberOfCurves The amount of space that should preallocated for additional curves\n\t */\n\tconstructor( mesh, numberOfCurves = 1 ) {\n\n\t\tconst obj3D = mesh.clone();\n\t\tconst splineTexure = initSplineTexture( numberOfCurves );\n\t\tconst uniforms = getUniforms( splineTexure );\n\t\tobj3D.traverse( function ( child ) {\n\n\t\t\tif (\n\t\t\t\tchild instanceof Mesh ||\n\t\t\t\tchild instanceof InstancedMesh\n\t\t\t) {\n\n\t\t\t\tchild.material = child.material.clone();\n\t\t\t\tmodifyShader( child.material, uniforms, numberOfCurves );\n\n\t\t\t}\n\n\t\t} );\n\n\t\tthis.curveArray = new Array( numberOfCurves );\n\t\tthis.curveLengthArray = new Array( numberOfCurves );\n\n\t\tthis.object3D = obj3D;\n\t\tthis.splineTexure = splineTexure;\n\t\tthis.uniforms = uniforms;\n\n\t}\n\n\tupdateCurve( index, curve ) {\n\n\t\tif ( index >= this.curveArray.length ) throw Error( 'Index out of range for Flow' );\n\t\tconst curveLength = curve.getLength();\n\t\tthis.uniforms.spineLength.value = curveLength;\n\t\tthis.curveLengthArray[ index ] = curveLength;\n\t\tthis.curveArray[ index ] = curve;\n\t\tupdateSplineTexture( this.splineTexure, curve, index );\n\n\t}\n\n\tmoveAlongCurve( amount ) {\n\n\t\tthis.uniforms.pathOffset.value += amount;\n\n\t}\n\n}\nconst matrix = new Matrix4();\n\n/**\n * A helper class for creating instanced versions of flow, where the instances are placed on the curve.\n */\nexport class InstancedFlow extends Flow {\n\n\t/**\n\t *\n\t * @param {number} count The number of instanced elements\n\t * @param {number} curveCount The number of curves to preallocate for\n\t * @param {Geometry} geometry The geometry to use for the instanced mesh\n\t * @param {Material} material The material to use for the instanced mesh\n\t */\n\tconstructor( count, curveCount, geometry, material ) {\n\n\t\tconst mesh = new InstancedMesh(\n\t\t\tgeometry,\n\t\t\tmaterial,\n\t\t\tcount\n\t\t);\n\t\tmesh.instanceMatrix.setUsage( DynamicDrawUsage );\n\t\tsuper( mesh, curveCount );\n\n\t\tthis.offsets = new Array( count ).fill( 0 );\n\t\tthis.whichCurve = new Array( count ).fill( 0 );\n\n\t}\n\n\t/**\n\t * The extra information about which curve and curve position is stored in the translation components of the matrix for the instanced objects\n\t * This writes that information to the matrix and marks it as needing update.\n\t *\n\t * @param {number} index of the instanced element to update\n\t */\n\twriteChanges( index ) {\n\n\t\tmatrix.makeTranslation(\n\t\t\tthis.curveLengthArray[ this.whichCurve[ index ] ],\n\t\t\tthis.whichCurve[ index ],\n\t\t\tthis.offsets[ index ]\n\t\t);\n\t\tthis.object3D.setMatrixAt( index, matrix );\n\t\tthis.object3D.instanceMatrix.needsUpdate = true;\n\n\t}\n\n\t/**\n\t * Move an individual element along the curve by a specific amount\n\t *\n\t * @param {number} index Which element to update\n\t * @param {number} offset Move by how much\n\t */\n\tmoveIndividualAlongCurve( index, offset ) {\n\n\t\tthis.offsets[ index ] += offset;\n\t\tthis.writeChanges( index );\n\n\t}\n\n\t/**\n\t * Select which curve to use for an element\n\t *\n\t * @param {number} index the index of the instanced element to update\n\t * @param {number} curveNo the index of the curve it should use\n\t */\n\tsetCurve( index, curveNo ) {\n\n\t\tif ( isNaN( curveNo ) ) throw Error( 'curve index being set is Not a Number (NaN)' );\n\t\tthis.whichCurve[ index ] = curveNo;\n\t\tthis.writeChanges( index );\n\n\t}\n\n}\n","import {\n\tBoxGeometry,\n\tBufferGeometry,\n\tCylinderGeometry,\n\tDoubleSide,\n\tEuler,\n\tFloat32BufferAttribute,\n\tLine,\n\tLineBasicMaterial,\n\tMatrix4,\n\tMesh,\n\tMeshBasicMaterial,\n\tObject3D,\n\tOctahedronGeometry,\n\tPlaneGeometry,\n\tQuaternion,\n\tRaycaster,\n\tSphereGeometry,\n\tTorusGeometry,\n\tVector3\n} from 'three';\n\nconst _raycaster = new Raycaster();\n\nconst _tempVector = new Vector3();\nconst _tempVector2 = new Vector3();\nconst _tempQuaternion = new Quaternion();\nconst _unit = {\n\tX: new Vector3( 1, 0, 0 ),\n\tY: new Vector3( 0, 1, 0 ),\n\tZ: new Vector3( 0, 0, 1 )\n};\n\nconst _changeEvent = { type: 'change' };\nconst _mouseDownEvent = { type: 'mouseDown' };\nconst _mouseUpEvent = { type: 'mouseUp', mode: null };\nconst _objectChangeEvent = { type: 'objectChange' };\n\nclass TransformControls extends Object3D {\n\n\tconstructor( camera, domElement ) {\n\n\t\tsuper();\n\n\t\tif ( domElement === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.TransformControls: The second parameter \"domElement\" is now mandatory.' );\n\t\t\tdomElement = document;\n\n\t\t}\n\n\t\tthis.visible = false;\n\t\tthis.domElement = domElement;\n\t\tthis.domElement.style.touchAction = 'none'; // disable touch scroll\n\n\t\tconst _gizmo = new TransformControlsGizmo();\n\t\tthis._gizmo = _gizmo;\n\t\tthis.add( _gizmo );\n\n\t\tconst _plane = new TransformControlsPlane();\n\t\tthis._plane = _plane;\n\t\tthis.add( _plane );\n\n\t\tconst scope = this;\n\n\t\t// Defined getter, setter and store for a property\n\t\tfunction defineProperty( propName, defaultValue ) {\n\n\t\t\tlet propValue = defaultValue;\n\n\t\t\tObject.defineProperty( scope, propName, {\n\n\t\t\t\tget: function () {\n\n\t\t\t\t\treturn propValue !== undefined ? propValue : defaultValue;\n\n\t\t\t\t},\n\n\t\t\t\tset: function ( value ) {\n\n\t\t\t\t\tif ( propValue !== value ) {\n\n\t\t\t\t\t\tpropValue = value;\n\t\t\t\t\t\t_plane[ propName ] = value;\n\t\t\t\t\t\t_gizmo[ propName ] = value;\n\n\t\t\t\t\t\tscope.dispatchEvent( { type: propName + '-changed', value: value } );\n\t\t\t\t\t\tscope.dispatchEvent( _changeEvent );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tscope[ propName ] = defaultValue;\n\t\t\t_plane[ propName ] = defaultValue;\n\t\t\t_gizmo[ propName ] = defaultValue;\n\n\t\t}\n\n\t\t// Define properties with getters/setter\n\t\t// Setting the defined property will automatically trigger change event\n\t\t// Defined properties are passed down to gizmo and plane\n\n\t\tdefineProperty( 'camera', camera );\n\t\tdefineProperty( 'object', undefined );\n\t\tdefineProperty( 'enabled', true );\n\t\tdefineProperty( 'axis', null );\n\t\tdefineProperty( 'mode', 'translate' );\n\t\tdefineProperty( 'translationSnap', null );\n\t\tdefineProperty( 'rotationSnap', null );\n\t\tdefineProperty( 'scaleSnap', null );\n\t\tdefineProperty( 'space', 'world' );\n\t\tdefineProperty( 'size', 1 );\n\t\tdefineProperty( 'dragging', false );\n\t\tdefineProperty( 'showX', true );\n\t\tdefineProperty( 'showY', true );\n\t\tdefineProperty( 'showZ', true );\n\n\t\t// Reusable utility variables\n\n\t\tconst worldPosition = new Vector3();\n\t\tconst worldPositionStart = new Vector3();\n\t\tconst worldQuaternion = new Quaternion();\n\t\tconst worldQuaternionStart = new Quaternion();\n\t\tconst cameraPosition = new Vector3();\n\t\tconst cameraQuaternion = new Quaternion();\n\t\tconst pointStart = new Vector3();\n\t\tconst pointEnd = new Vector3();\n\t\tconst rotationAxis = new Vector3();\n\t\tconst rotationAngle = 0;\n\t\tconst eye = new Vector3();\n\n\t\t// TODO: remove properties unused in plane and gizmo\n\n\t\tdefineProperty( 'worldPosition', worldPosition );\n\t\tdefineProperty( 'worldPositionStart', worldPositionStart );\n\t\tdefineProperty( 'worldQuaternion', worldQuaternion );\n\t\tdefineProperty( 'worldQuaternionStart', worldQuaternionStart );\n\t\tdefineProperty( 'cameraPosition', cameraPosition );\n\t\tdefineProperty( 'cameraQuaternion', cameraQuaternion );\n\t\tdefineProperty( 'pointStart', pointStart );\n\t\tdefineProperty( 'pointEnd', pointEnd );\n\t\tdefineProperty( 'rotationAxis', rotationAxis );\n\t\tdefineProperty( 'rotationAngle', rotationAngle );\n\t\tdefineProperty( 'eye', eye );\n\n\t\tthis._offset = new Vector3();\n\t\tthis._startNorm = new Vector3();\n\t\tthis._endNorm = new Vector3();\n\t\tthis._cameraScale = new Vector3();\n\n\t\tthis._parentPosition = new Vector3();\n\t\tthis._parentQuaternion = new Quaternion();\n\t\tthis._parentQuaternionInv = new Quaternion();\n\t\tthis._parentScale = new Vector3();\n\n\t\tthis._worldScaleStart = new Vector3();\n\t\tthis._worldQuaternionInv = new Quaternion();\n\t\tthis._worldScale = new Vector3();\n\n\t\tthis._positionStart = new Vector3();\n\t\tthis._quaternionStart = new Quaternion();\n\t\tthis._scaleStart = new Vector3();\n\n\t\tthis._getPointer = getPointer.bind( this );\n\t\tthis._onPointerDown = onPointerDown.bind( this );\n\t\tthis._onPointerHover = onPointerHover.bind( this );\n\t\tthis._onPointerMove = onPointerMove.bind( this );\n\t\tthis._onPointerUp = onPointerUp.bind( this );\n\n\t\tthis.domElement.addEventListener( 'pointerdown', this._onPointerDown );\n\t\tthis.domElement.addEventListener( 'pointermove', this._onPointerHover );\n\t\tthis.domElement.addEventListener( 'pointerup', this._onPointerUp );\n\n\t}\n\n\t// updateMatrixWorld  updates key transformation variables\n\tupdateMatrixWorld() {\n\n\t\tif ( this.object !== undefined ) {\n\n\t\t\tthis.object.updateMatrixWorld();\n\n\t\t\tif ( this.object.parent === null ) {\n\n\t\t\t\tconsole.error( 'TransformControls: The attached 3D object must be a part of the scene graph.' );\n\n\t\t\t} else {\n\n\t\t\t\tthis.object.parent.matrixWorld.decompose( this._parentPosition, this._parentQuaternion, this._parentScale );\n\n\t\t\t}\n\n\t\t\tthis.object.matrixWorld.decompose( this.worldPosition, this.worldQuaternion, this._worldScale );\n\n\t\t\tthis._parentQuaternionInv.copy( this._parentQuaternion ).invert();\n\t\t\tthis._worldQuaternionInv.copy( this.worldQuaternion ).invert();\n\n\t\t}\n\n\t\tthis.camera.updateMatrixWorld();\n\t\tthis.camera.matrixWorld.decompose( this.cameraPosition, this.cameraQuaternion, this._cameraScale );\n\n\t\tthis.eye.copy( this.cameraPosition ).sub( this.worldPosition ).normalize();\n\n\t\tsuper.updateMatrixWorld( this );\n\n\t}\n\n\tpointerHover( pointer ) {\n\n\t\tif ( this.object === undefined || this.dragging === true ) return;\n\n\t\t_raycaster.setFromCamera( pointer, this.camera );\n\n\t\tconst intersect = intersectObjectWithRay( this._gizmo.picker[ this.mode ], _raycaster );\n\n\t\tif ( intersect ) {\n\n\t\t\tthis.axis = intersect.object.name;\n\n\t\t} else {\n\n\t\t\tthis.axis = null;\n\n\t\t}\n\n\t}\n\n\tpointerDown( pointer ) {\n\n\t\tif ( this.object === undefined || this.dragging === true || pointer.button !== 0 ) return;\n\n\t\tif ( this.axis !== null ) {\n\n\t\t\t_raycaster.setFromCamera( pointer, this.camera );\n\n\t\t\tconst planeIntersect = intersectObjectWithRay( this._plane, _raycaster, true );\n\n\t\t\tif ( planeIntersect ) {\n\n\t\t\t\tthis.object.updateMatrixWorld();\n\t\t\t\tthis.object.parent.updateMatrixWorld();\n\n\t\t\t\tthis._positionStart.copy( this.object.position );\n\t\t\t\tthis._quaternionStart.copy( this.object.quaternion );\n\t\t\t\tthis._scaleStart.copy( this.object.scale );\n\n\t\t\t\tthis.object.matrixWorld.decompose( this.worldPositionStart, this.worldQuaternionStart, this._worldScaleStart );\n\n\t\t\t\tthis.pointStart.copy( planeIntersect.point ).sub( this.worldPositionStart );\n\n\t\t\t}\n\n\t\t\tthis.dragging = true;\n\t\t\t_mouseDownEvent.mode = this.mode;\n\t\t\tthis.dispatchEvent( _mouseDownEvent );\n\n\t\t}\n\n\t}\n\n\tpointerMove( pointer ) {\n\n\t\tconst axis = this.axis;\n\t\tconst mode = this.mode;\n\t\tconst object = this.object;\n\t\tlet space = this.space;\n\n\t\tif ( mode === 'scale' ) {\n\n\t\t\tspace = 'local';\n\n\t\t} else if ( axis === 'E' || axis === 'XYZE' || axis === 'XYZ' ) {\n\n\t\t\tspace = 'world';\n\n\t\t}\n\n\t\tif ( object === undefined || axis === null || this.dragging === false || pointer.button !== - 1 ) return;\n\n\t\t_raycaster.setFromCamera( pointer, this.camera );\n\n\t\tconst planeIntersect = intersectObjectWithRay( this._plane, _raycaster, true );\n\n\t\tif ( ! planeIntersect ) return;\n\n\t\tthis.pointEnd.copy( planeIntersect.point ).sub( this.worldPositionStart );\n\n\t\tif ( mode === 'translate' ) {\n\n\t\t\t// Apply translate\n\n\t\t\tthis._offset.copy( this.pointEnd ).sub( this.pointStart );\n\n\t\t\tif ( space === 'local' && axis !== 'XYZ' ) {\n\n\t\t\t\tthis._offset.applyQuaternion( this._worldQuaternionInv );\n\n\t\t\t}\n\n\t\t\tif ( axis.indexOf( 'X' ) === - 1 ) this._offset.x = 0;\n\t\t\tif ( axis.indexOf( 'Y' ) === - 1 ) this._offset.y = 0;\n\t\t\tif ( axis.indexOf( 'Z' ) === - 1 ) this._offset.z = 0;\n\n\t\t\tif ( space === 'local' && axis !== 'XYZ' ) {\n\n\t\t\t\tthis._offset.applyQuaternion( this._quaternionStart ).divide( this._parentScale );\n\n\t\t\t} else {\n\n\t\t\t\tthis._offset.applyQuaternion( this._parentQuaternionInv ).divide( this._parentScale );\n\n\t\t\t}\n\n\t\t\tobject.position.copy( this._offset ).add( this._positionStart );\n\n\t\t\t// Apply translation snap\n\n\t\t\tif ( this.translationSnap ) {\n\n\t\t\t\tif ( space === 'local' ) {\n\n\t\t\t\t\tobject.position.applyQuaternion( _tempQuaternion.copy( this._quaternionStart ).invert() );\n\n\t\t\t\t\tif ( axis.search( 'X' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.x = Math.round( object.position.x / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( axis.search( 'Y' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.y = Math.round( object.position.y / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( axis.search( 'Z' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.z = Math.round( object.position.z / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.position.applyQuaternion( this._quaternionStart );\n\n\t\t\t\t}\n\n\t\t\t\tif ( space === 'world' ) {\n\n\t\t\t\t\tif ( object.parent ) {\n\n\t\t\t\t\t\tobject.position.add( _tempVector.setFromMatrixPosition( object.parent.matrixWorld ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( axis.search( 'X' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.x = Math.round( object.position.x / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( axis.search( 'Y' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.y = Math.round( object.position.y / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( axis.search( 'Z' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.z = Math.round( object.position.z / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( object.parent ) {\n\n\t\t\t\t\t\tobject.position.sub( _tempVector.setFromMatrixPosition( object.parent.matrixWorld ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( mode === 'scale' ) {\n\n\t\t\tif ( axis.search( 'XYZ' ) !== - 1 ) {\n\n\t\t\t\tlet d = this.pointEnd.length() / this.pointStart.length();\n\n\t\t\t\tif ( this.pointEnd.dot( this.pointStart ) < 0 ) d *= - 1;\n\n\t\t\t\t_tempVector2.set( d, d, d );\n\n\t\t\t} else {\n\n\t\t\t\t_tempVector.copy( this.pointStart );\n\t\t\t\t_tempVector2.copy( this.pointEnd );\n\n\t\t\t\t_tempVector.applyQuaternion( this._worldQuaternionInv );\n\t\t\t\t_tempVector2.applyQuaternion( this._worldQuaternionInv );\n\n\t\t\t\t_tempVector2.divide( _tempVector );\n\n\t\t\t\tif ( axis.search( 'X' ) === - 1 ) {\n\n\t\t\t\t\t_tempVector2.x = 1;\n\n\t\t\t\t}\n\n\t\t\t\tif ( axis.search( 'Y' ) === - 1 ) {\n\n\t\t\t\t\t_tempVector2.y = 1;\n\n\t\t\t\t}\n\n\t\t\t\tif ( axis.search( 'Z' ) === - 1 ) {\n\n\t\t\t\t\t_tempVector2.z = 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Apply scale\n\n\t\t\tobject.scale.copy( this._scaleStart ).multiply( _tempVector2 );\n\n\t\t\tif ( this.scaleSnap ) {\n\n\t\t\t\tif ( axis.search( 'X' ) !== - 1 ) {\n\n\t\t\t\t\tobject.scale.x = Math.round( object.scale.x / this.scaleSnap ) * this.scaleSnap || this.scaleSnap;\n\n\t\t\t\t}\n\n\t\t\t\tif ( axis.search( 'Y' ) !== - 1 ) {\n\n\t\t\t\t\tobject.scale.y = Math.round( object.scale.y / this.scaleSnap ) * this.scaleSnap || this.scaleSnap;\n\n\t\t\t\t}\n\n\t\t\t\tif ( axis.search( 'Z' ) !== - 1 ) {\n\n\t\t\t\t\tobject.scale.z = Math.round( object.scale.z / this.scaleSnap ) * this.scaleSnap || this.scaleSnap;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( mode === 'rotate' ) {\n\n\t\t\tthis._offset.copy( this.pointEnd ).sub( this.pointStart );\n\n\t\t\tconst ROTATION_SPEED = 20 / this.worldPosition.distanceTo( _tempVector.setFromMatrixPosition( this.camera.matrixWorld ) );\n\n\t\t\tif ( axis === 'E' ) {\n\n\t\t\t\tthis.rotationAxis.copy( this.eye );\n\t\t\t\tthis.rotationAngle = this.pointEnd.angleTo( this.pointStart );\n\n\t\t\t\tthis._startNorm.copy( this.pointStart ).normalize();\n\t\t\t\tthis._endNorm.copy( this.pointEnd ).normalize();\n\n\t\t\t\tthis.rotationAngle *= ( this._endNorm.cross( this._startNorm ).dot( this.eye ) < 0 ? 1 : - 1 );\n\n\t\t\t} else if ( axis === 'XYZE' ) {\n\n\t\t\t\tthis.rotationAxis.copy( this._offset ).cross( this.eye ).normalize();\n\t\t\t\tthis.rotationAngle = this._offset.dot( _tempVector.copy( this.rotationAxis ).cross( this.eye ) ) * ROTATION_SPEED;\n\n\t\t\t} else if ( axis === 'X' || axis === 'Y' || axis === 'Z' ) {\n\n\t\t\t\tthis.rotationAxis.copy( _unit[ axis ] );\n\n\t\t\t\t_tempVector.copy( _unit[ axis ] );\n\n\t\t\t\tif ( space === 'local' ) {\n\n\t\t\t\t\t_tempVector.applyQuaternion( this.worldQuaternion );\n\n\t\t\t\t}\n\n\t\t\t\tthis.rotationAngle = this._offset.dot( _tempVector.cross( this.eye ).normalize() ) * ROTATION_SPEED;\n\n\t\t\t}\n\n\t\t\t// Apply rotation snap\n\n\t\t\tif ( this.rotationSnap ) this.rotationAngle = Math.round( this.rotationAngle / this.rotationSnap ) * this.rotationSnap;\n\n\t\t\t// Apply rotate\n\t\t\tif ( space === 'local' && axis !== 'E' && axis !== 'XYZE' ) {\n\n\t\t\t\tobject.quaternion.copy( this._quaternionStart );\n\t\t\t\tobject.quaternion.multiply( _tempQuaternion.setFromAxisAngle( this.rotationAxis, this.rotationAngle ) ).normalize();\n\n\t\t\t} else {\n\n\t\t\t\tthis.rotationAxis.applyQuaternion( this._parentQuaternionInv );\n\t\t\t\tobject.quaternion.copy( _tempQuaternion.setFromAxisAngle( this.rotationAxis, this.rotationAngle ) );\n\t\t\t\tobject.quaternion.multiply( this._quaternionStart ).normalize();\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.dispatchEvent( _changeEvent );\n\t\tthis.dispatchEvent( _objectChangeEvent );\n\n\t}\n\n\tpointerUp( pointer ) {\n\n\t\tif ( pointer.button !== 0 ) return;\n\n\t\tif ( this.dragging && ( this.axis !== null ) ) {\n\n\t\t\t_mouseUpEvent.mode = this.mode;\n\t\t\tthis.dispatchEvent( _mouseUpEvent );\n\n\t\t}\n\n\t\tthis.dragging = false;\n\t\tthis.axis = null;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.domElement.removeEventListener( 'pointerdown', this._onPointerDown );\n\t\tthis.domElement.removeEventListener( 'pointermove', this._onPointerHover );\n\t\tthis.domElement.removeEventListener( 'pointermove', this._onPointerMove );\n\t\tthis.domElement.removeEventListener( 'pointerup', this._onPointerUp );\n\n\t\tthis.traverse( function ( child ) {\n\n\t\t\tif ( child.geometry ) child.geometry.dispose();\n\t\t\tif ( child.material ) child.material.dispose();\n\n\t\t} );\n\n\t}\n\n\t// Set current object\n\tattach( object ) {\n\n\t\tthis.object = object;\n\t\tthis.visible = true;\n\n\t\treturn this;\n\n\t}\n\n\t// Detatch from object\n\tdetach() {\n\n\t\tthis.object = undefined;\n\t\tthis.visible = false;\n\t\tthis.axis = null;\n\n\t\treturn this;\n\n\t}\n\n\treset() {\n\n\t\tif ( ! this.enabled ) return;\n\n\t\tif ( this.dragging ) {\n\n\t\t\tthis.object.position.copy( this._positionStart );\n\t\t\tthis.object.quaternion.copy( this._quaternionStart );\n\t\t\tthis.object.scale.copy( this._scaleStart );\n\n\t\t\tthis.dispatchEvent( _changeEvent );\n\t\t\tthis.dispatchEvent( _objectChangeEvent );\n\n\t\t\tthis.pointStart.copy( this.pointEnd );\n\n\t\t}\n\n\t}\n\n\tgetRaycaster() {\n\n\t\treturn _raycaster;\n\n\t}\n\n\t// TODO: deprecate\n\n\tgetMode() {\n\n\t\treturn this.mode;\n\n\t}\n\n\tsetMode( mode ) {\n\n\t\tthis.mode = mode;\n\n\t}\n\n\tsetTranslationSnap( translationSnap ) {\n\n\t\tthis.translationSnap = translationSnap;\n\n\t}\n\n\tsetRotationSnap( rotationSnap ) {\n\n\t\tthis.rotationSnap = rotationSnap;\n\n\t}\n\n\tsetScaleSnap( scaleSnap ) {\n\n\t\tthis.scaleSnap = scaleSnap;\n\n\t}\n\n\tsetSize( size ) {\n\n\t\tthis.size = size;\n\n\t}\n\n\tsetSpace( space ) {\n\n\t\tthis.space = space;\n\n\t}\n\n\tupdate() {\n\n\t\tconsole.warn( 'THREE.TransformControls: update function has no more functionality and therefore has been deprecated.' );\n\n\t}\n\n}\n\nTransformControls.prototype.isTransformControls = true;\n\n// mouse / touch event handlers\n\nfunction getPointer( event ) {\n\n\tif ( this.domElement.ownerDocument.pointerLockElement ) {\n\n\t\treturn {\n\t\t\tx: 0,\n\t\t\ty: 0,\n\t\t\tbutton: event.button\n\t\t};\n\n\t} else {\n\n\t\tconst rect = this.domElement.getBoundingClientRect();\n\n\t\treturn {\n\t\t\tx: ( event.clientX - rect.left ) / rect.width * 2 - 1,\n\t\t\ty: - ( event.clientY - rect.top ) / rect.height * 2 + 1,\n\t\t\tbutton: event.button\n\t\t};\n\n\t}\n\n}\n\nfunction onPointerHover( event ) {\n\n\tif ( ! this.enabled ) return;\n\n\tswitch ( event.pointerType ) {\n\n\t\tcase 'mouse':\n\t\tcase 'pen':\n\t\t\tthis.pointerHover( this._getPointer( event ) );\n\t\t\tbreak;\n\n\t}\n\n}\n\nfunction onPointerDown( event ) {\n\n\tif ( ! this.enabled ) return;\n\n\tif ( ! document.pointerLockElement ) {\n\n\t\tthis.domElement.setPointerCapture( event.pointerId );\n\n\t}\n\n\tthis.domElement.addEventListener( 'pointermove', this._onPointerMove );\n\n\tthis.pointerHover( this._getPointer( event ) );\n\tthis.pointerDown( this._getPointer( event ) );\n\n}\n\nfunction onPointerMove( event ) {\n\n\tif ( ! this.enabled ) return;\n\n\tthis.pointerMove( this._getPointer( event ) );\n\n}\n\nfunction onPointerUp( event ) {\n\n\tif ( ! this.enabled ) return;\n\n\tthis.domElement.releasePointerCapture( event.pointerId );\n\n\tthis.domElement.removeEventListener( 'pointermove', this._onPointerMove );\n\n\tthis.pointerUp( this._getPointer( event ) );\n\n}\n\nfunction intersectObjectWithRay( object, raycaster, includeInvisible ) {\n\n\tconst allIntersections = raycaster.intersectObject( object, true );\n\n\tfor ( let i = 0; i < allIntersections.length; i ++ ) {\n\n\t\tif ( allIntersections[ i ].object.visible || includeInvisible ) {\n\n\t\t\treturn allIntersections[ i ];\n\n\t\t}\n\n\t}\n\n\treturn false;\n\n}\n\n//\n\n// Reusable utility variables\n\nconst _tempEuler = new Euler();\nconst _alignVector = new Vector3( 0, 1, 0 );\nconst _zeroVector = new Vector3( 0, 0, 0 );\nconst _lookAtMatrix = new Matrix4();\nconst _tempQuaternion2 = new Quaternion();\nconst _identityQuaternion = new Quaternion();\nconst _dirVector = new Vector3();\nconst _tempMatrix = new Matrix4();\n\nconst _unitX = new Vector3( 1, 0, 0 );\nconst _unitY = new Vector3( 0, 1, 0 );\nconst _unitZ = new Vector3( 0, 0, 1 );\n\nconst _v1 = new Vector3();\nconst _v2 = new Vector3();\nconst _v3 = new Vector3();\n\nclass TransformControlsGizmo extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'TransformControlsGizmo';\n\n\t\t// shared materials\n\n\t\tconst gizmoMaterial = new MeshBasicMaterial( {\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\tfog: false,\n\t\t\ttoneMapped: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t\tconst gizmoLineMaterial = new LineBasicMaterial( {\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\tfog: false,\n\t\t\ttoneMapped: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t\t// Make unique material for each axis/color\n\n\t\tconst matInvisible = gizmoMaterial.clone();\n\t\tmatInvisible.opacity = 0.15;\n\n\t\tconst matHelper = gizmoLineMaterial.clone();\n\t\tmatHelper.opacity = 0.5;\n\n\t\tconst matRed = gizmoMaterial.clone();\n\t\tmatRed.color.setHex( 0xff0000 );\n\n\t\tconst matGreen = gizmoMaterial.clone();\n\t\tmatGreen.color.setHex( 0x00ff00 );\n\n\t\tconst matBlue = gizmoMaterial.clone();\n\t\tmatBlue.color.setHex( 0x0000ff );\n\n\t\tconst matRedTransparent = gizmoMaterial.clone();\n\t\tmatRedTransparent.color.setHex( 0xff0000 );\n\t\tmatRedTransparent.opacity = 0.5;\n\n\t\tconst matGreenTransparent = gizmoMaterial.clone();\n\t\tmatGreenTransparent.color.setHex( 0x00ff00 );\n\t\tmatGreenTransparent.opacity = 0.5;\n\n\t\tconst matBlueTransparent = gizmoMaterial.clone();\n\t\tmatBlueTransparent.color.setHex( 0x0000ff );\n\t\tmatBlueTransparent.opacity = 0.5;\n\n\t\tconst matWhiteTransparent = gizmoMaterial.clone();\n\t\tmatWhiteTransparent.opacity = 0.25;\n\n\t\tconst matYellowTransparent = gizmoMaterial.clone();\n\t\tmatYellowTransparent.color.setHex( 0xffff00 );\n\t\tmatYellowTransparent.opacity = 0.25;\n\n\t\tconst matYellow = gizmoMaterial.clone();\n\t\tmatYellow.color.setHex( 0xffff00 );\n\n\t\tconst matGray = gizmoMaterial.clone();\n\t\tmatGray.color.setHex( 0x787878 );\n\n\t\t// reusable geometry\n\n\t\tconst arrowGeometry = new CylinderGeometry( 0, 0.04, 0.1, 12 );\n\t\tarrowGeometry.translate( 0, 0.05, 0 );\n\n\t\tconst scaleHandleGeometry = new BoxGeometry( 0.08, 0.08, 0.08 );\n\t\tscaleHandleGeometry.translate( 0, 0.04, 0 );\n\n\t\tconst lineGeometry = new BufferGeometry();\n\t\tlineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0,\t1, 0, 0 ], 3 ) );\n\n\t\tconst lineGeometry2 = new CylinderGeometry( 0.0075, 0.0075, 0.5, 3 );\n\t\tlineGeometry2.translate( 0, 0.25, 0 );\n\n\t\tfunction CircleGeometry( radius, arc ) {\n\n\t\t\tconst geometry = new TorusGeometry( radius, 0.0075, 3, 64, arc * Math.PI * 2 );\n\t\t\tgeometry.rotateY( Math.PI / 2 );\n\t\t\tgeometry.rotateX( Math.PI / 2 );\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\t// Special geometry for transform helper. If scaled with position vector it spans from [0,0,0] to position\n\n\t\tfunction TranslateHelperGeometry() {\n\n\t\t\tconst geometry = new BufferGeometry();\n\n\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 1, 1, 1 ], 3 ) );\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\t// Gizmo definitions - custom hierarchy definitions for setupGizmo() function\n\n\t\tconst gizmoTranslate = {\n\t\t\tX: [\n\t\t\t\t[ new Mesh( arrowGeometry, matRed ), [ 0.5, 0, 0 ], [ 0, 0, - Math.PI / 2 ]],\n\t\t\t\t[ new Mesh( arrowGeometry, matRed ), [ - 0.5, 0, 0 ], [ 0, 0, Math.PI / 2 ]],\n\t\t\t\t[ new Mesh( lineGeometry2, matRed ), [ 0, 0, 0 ], [ 0, 0, - Math.PI / 2 ]]\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Mesh( arrowGeometry, matGreen ), [ 0, 0.5, 0 ]],\n\t\t\t\t[ new Mesh( arrowGeometry, matGreen ), [ 0, - 0.5, 0 ], [ Math.PI, 0, 0 ]],\n\t\t\t\t[ new Mesh( lineGeometry2, matGreen ) ]\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Mesh( arrowGeometry, matBlue ), [ 0, 0, 0.5 ], [ Math.PI / 2, 0, 0 ]],\n\t\t\t\t[ new Mesh( arrowGeometry, matBlue ), [ 0, 0, - 0.5 ], [ - Math.PI / 2, 0, 0 ]],\n\t\t\t\t[ new Mesh( lineGeometry2, matBlue ), null, [ Math.PI / 2, 0, 0 ]]\n\t\t\t],\n\t\t\tXYZ: [\n\t\t\t\t[ new Mesh( new OctahedronGeometry( 0.1, 0 ), matWhiteTransparent.clone() ), [ 0, 0, 0 ]]\n\t\t\t],\n\t\t\tXY: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.15, 0.15, 0.01 ), matBlueTransparent.clone() ), [ 0.15, 0.15, 0 ]]\n\t\t\t],\n\t\t\tYZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.15, 0.15, 0.01 ), matRedTransparent.clone() ), [ 0, 0.15, 0.15 ], [ 0, Math.PI / 2, 0 ]]\n\t\t\t],\n\t\t\tXZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.15, 0.15, 0.01 ), matGreenTransparent.clone() ), [ 0.15, 0, 0.15 ], [ - Math.PI / 2, 0, 0 ]]\n\t\t\t]\n\t\t};\n\n\t\tconst pickerTranslate = {\n\t\t\tX: [\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0.3, 0, 0 ], [ 0, 0, - Math.PI / 2 ]],\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ - 0.3, 0, 0 ], [ 0, 0, Math.PI / 2 ]]\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, 0.3, 0 ]],\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, - 0.3, 0 ], [ 0, 0, Math.PI ]]\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, 0, 0.3 ], [ Math.PI / 2, 0, 0 ]],\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, 0, - 0.3 ], [ - Math.PI / 2, 0, 0 ]]\n\t\t\t],\n\t\t\tXYZ: [\n\t\t\t\t[ new Mesh( new OctahedronGeometry( 0.2, 0 ), matInvisible ) ]\n\t\t\t],\n\t\t\tXY: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.2, 0.2, 0.01 ), matInvisible ), [ 0.15, 0.15, 0 ]]\n\t\t\t],\n\t\t\tYZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.2, 0.2, 0.01 ), matInvisible ), [ 0, 0.15, 0.15 ], [ 0, Math.PI / 2, 0 ]]\n\t\t\t],\n\t\t\tXZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.2, 0.2, 0.01 ), matInvisible ), [ 0.15, 0, 0.15 ], [ - Math.PI / 2, 0, 0 ]]\n\t\t\t]\n\t\t};\n\n\t\tconst helperTranslate = {\n\t\t\tSTART: [\n\t\t\t\t[ new Mesh( new OctahedronGeometry( 0.01, 2 ), matHelper ), null, null, null, 'helper' ]\n\t\t\t],\n\t\t\tEND: [\n\t\t\t\t[ new Mesh( new OctahedronGeometry( 0.01, 2 ), matHelper ), null, null, null, 'helper' ]\n\t\t\t],\n\t\t\tDELTA: [\n\t\t\t\t[ new Line( TranslateHelperGeometry(), matHelper ), null, null, null, 'helper' ]\n\t\t\t],\n\t\t\tX: [\n\t\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ - 1e3, 0, 0 ], null, [ 1e6, 1, 1 ], 'helper' ]\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ 0, - 1e3, 0 ], [ 0, 0, Math.PI / 2 ], [ 1e6, 1, 1 ], 'helper' ]\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ 0, 0, - 1e3 ], [ 0, - Math.PI / 2, 0 ], [ 1e6, 1, 1 ], 'helper' ]\n\t\t\t]\n\t\t};\n\n\t\tconst gizmoRotate = {\n\t\t\tXYZE: [\n\t\t\t\t[ new Mesh( CircleGeometry( 0.5, 1 ), matGray ), null, [ 0, Math.PI / 2, 0 ]]\n\t\t\t],\n\t\t\tX: [\n\t\t\t\t[ new Mesh( CircleGeometry( 0.5, 0.5 ), matRed ) ]\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Mesh( CircleGeometry( 0.5, 0.5 ), matGreen ), null, [ 0, 0, - Math.PI / 2 ]]\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Mesh( CircleGeometry( 0.5, 0.5 ), matBlue ), null, [ 0, Math.PI / 2, 0 ]]\n\t\t\t],\n\t\t\tE: [\n\t\t\t\t[ new Mesh( CircleGeometry( 0.75, 1 ), matYellowTransparent ), null, [ 0, Math.PI / 2, 0 ]]\n\t\t\t]\n\t\t};\n\n\t\tconst helperRotate = {\n\t\t\tAXIS: [\n\t\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ - 1e3, 0, 0 ], null, [ 1e6, 1, 1 ], 'helper' ]\n\t\t\t]\n\t\t};\n\n\t\tconst pickerRotate = {\n\t\t\tXYZE: [\n\t\t\t\t[ new Mesh( new SphereGeometry( 0.25, 10, 8 ), matInvisible ) ]\n\t\t\t],\n\t\t\tX: [\n\t\t\t\t[ new Mesh( new TorusGeometry( 0.5, 0.1, 4, 24 ), matInvisible ), [ 0, 0, 0 ], [ 0, - Math.PI / 2, - Math.PI / 2 ]],\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Mesh( new TorusGeometry( 0.5, 0.1, 4, 24 ), matInvisible ), [ 0, 0, 0 ], [ Math.PI / 2, 0, 0 ]],\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Mesh( new TorusGeometry( 0.5, 0.1, 4, 24 ), matInvisible ), [ 0, 0, 0 ], [ 0, 0, - Math.PI / 2 ]],\n\t\t\t],\n\t\t\tE: [\n\t\t\t\t[ new Mesh( new TorusGeometry( 0.75, 0.1, 2, 24 ), matInvisible ) ]\n\t\t\t]\n\t\t};\n\n\t\tconst gizmoScale = {\n\t\t\tX: [\n\t\t\t\t[ new Mesh( scaleHandleGeometry, matRed ), [ 0.5, 0, 0 ], [ 0, 0, - Math.PI / 2 ]],\n\t\t\t\t[ new Mesh( lineGeometry2, matRed ), [ 0, 0, 0 ], [ 0, 0, - Math.PI / 2 ]],\n\t\t\t\t[ new Mesh( scaleHandleGeometry, matRed ), [ - 0.5, 0, 0 ], [ 0, 0, Math.PI / 2 ]],\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Mesh( scaleHandleGeometry, matGreen ), [ 0, 0.5, 0 ]],\n\t\t\t\t[ new Mesh( lineGeometry2, matGreen ) ],\n\t\t\t\t[ new Mesh( scaleHandleGeometry, matGreen ), [ 0, - 0.5, 0 ], [ 0, 0, Math.PI ]],\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Mesh( scaleHandleGeometry, matBlue ), [ 0, 0, 0.5 ], [ Math.PI / 2, 0, 0 ]],\n\t\t\t\t[ new Mesh( lineGeometry2, matBlue ), [ 0, 0, 0 ], [ Math.PI / 2, 0, 0 ]],\n\t\t\t\t[ new Mesh( scaleHandleGeometry, matBlue ), [ 0, 0, - 0.5 ], [ - Math.PI / 2, 0, 0 ]]\n\t\t\t],\n\t\t\tXY: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.15, 0.15, 0.01 ), matBlueTransparent ), [ 0.15, 0.15, 0 ]]\n\t\t\t],\n\t\t\tYZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.15, 0.15, 0.01 ), matRedTransparent ), [ 0, 0.15, 0.15 ], [ 0, Math.PI / 2, 0 ]]\n\t\t\t],\n\t\t\tXZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.15, 0.15, 0.01 ), matGreenTransparent ), [ 0.15, 0, 0.15 ], [ - Math.PI / 2, 0, 0 ]]\n\t\t\t],\n\t\t\tXYZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.1, 0.1, 0.1 ), matWhiteTransparent.clone() ) ],\n\t\t\t]\n\t\t};\n\n\t\tconst pickerScale = {\n\t\t\tX: [\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0.3, 0, 0 ], [ 0, 0, - Math.PI / 2 ]],\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ - 0.3, 0, 0 ], [ 0, 0, Math.PI / 2 ]]\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, 0.3, 0 ]],\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, - 0.3, 0 ], [ 0, 0, Math.PI ]]\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, 0, 0.3 ], [ Math.PI / 2, 0, 0 ]],\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, 0, - 0.3 ], [ - Math.PI / 2, 0, 0 ]]\n\t\t\t],\n\t\t\tXY: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.2, 0.2, 0.01 ), matInvisible ), [ 0.15, 0.15, 0 ]],\n\t\t\t],\n\t\t\tYZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.2, 0.2, 0.01 ), matInvisible ), [ 0, 0.15, 0.15 ], [ 0, Math.PI / 2, 0 ]],\n\t\t\t],\n\t\t\tXZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.2, 0.2, 0.01 ), matInvisible ), [ 0.15, 0, 0.15 ], [ - Math.PI / 2, 0, 0 ]],\n\t\t\t],\n\t\t\tXYZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.2, 0.2, 0.2 ), matInvisible ), [ 0, 0, 0 ]],\n\t\t\t]\n\t\t};\n\n\t\tconst helperScale = {\n\t\t\tX: [\n\t\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ - 1e3, 0, 0 ], null, [ 1e6, 1, 1 ], 'helper' ]\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ 0, - 1e3, 0 ], [ 0, 0, Math.PI / 2 ], [ 1e6, 1, 1 ], 'helper' ]\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ 0, 0, - 1e3 ], [ 0, - Math.PI / 2, 0 ], [ 1e6, 1, 1 ], 'helper' ]\n\t\t\t]\n\t\t};\n\n\t\t// Creates an Object3D with gizmos described in custom hierarchy definition.\n\n\t\tfunction setupGizmo( gizmoMap ) {\n\n\t\t\tconst gizmo = new Object3D();\n\n\t\t\tfor ( const name in gizmoMap ) {\n\n\t\t\t\tfor ( let i = gizmoMap[ name ].length; i --; ) {\n\n\t\t\t\t\tconst object = gizmoMap[ name ][ i ][ 0 ].clone();\n\t\t\t\t\tconst position = gizmoMap[ name ][ i ][ 1 ];\n\t\t\t\t\tconst rotation = gizmoMap[ name ][ i ][ 2 ];\n\t\t\t\t\tconst scale = gizmoMap[ name ][ i ][ 3 ];\n\t\t\t\t\tconst tag = gizmoMap[ name ][ i ][ 4 ];\n\n\t\t\t\t\t// name and tag properties are essential for picking and updating logic.\n\t\t\t\t\tobject.name = name;\n\t\t\t\t\tobject.tag = tag;\n\n\t\t\t\t\tif ( position ) {\n\n\t\t\t\t\t\tobject.position.set( position[ 0 ], position[ 1 ], position[ 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( rotation ) {\n\n\t\t\t\t\t\tobject.rotation.set( rotation[ 0 ], rotation[ 1 ], rotation[ 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( scale ) {\n\n\t\t\t\t\t\tobject.scale.set( scale[ 0 ], scale[ 1 ], scale[ 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.updateMatrix();\n\n\t\t\t\t\tconst tempGeometry = object.geometry.clone();\n\t\t\t\t\ttempGeometry.applyMatrix4( object.matrix );\n\t\t\t\t\tobject.geometry = tempGeometry;\n\t\t\t\t\tobject.renderOrder = Infinity;\n\n\t\t\t\t\tobject.position.set( 0, 0, 0 );\n\t\t\t\t\tobject.rotation.set( 0, 0, 0 );\n\t\t\t\t\tobject.scale.set( 1, 1, 1 );\n\n\t\t\t\t\tgizmo.add( object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn gizmo;\n\n\t\t}\n\n\t\t// Gizmo creation\n\n\t\tthis.gizmo = {};\n\t\tthis.picker = {};\n\t\tthis.helper = {};\n\n\t\tthis.add( this.gizmo[ 'translate' ] = setupGizmo( gizmoTranslate ) );\n\t\tthis.add( this.gizmo[ 'rotate' ] = setupGizmo( gizmoRotate ) );\n\t\tthis.add( this.gizmo[ 'scale' ] = setupGizmo( gizmoScale ) );\n\t\tthis.add( this.picker[ 'translate' ] = setupGizmo( pickerTranslate ) );\n\t\tthis.add( this.picker[ 'rotate' ] = setupGizmo( pickerRotate ) );\n\t\tthis.add( this.picker[ 'scale' ] = setupGizmo( pickerScale ) );\n\t\tthis.add( this.helper[ 'translate' ] = setupGizmo( helperTranslate ) );\n\t\tthis.add( this.helper[ 'rotate' ] = setupGizmo( helperRotate ) );\n\t\tthis.add( this.helper[ 'scale' ] = setupGizmo( helperScale ) );\n\n\t\t// Pickers should be hidden always\n\n\t\tthis.picker[ 'translate' ].visible = false;\n\t\tthis.picker[ 'rotate' ].visible = false;\n\t\tthis.picker[ 'scale' ].visible = false;\n\n\t}\n\n\t// updateMatrixWorld will update transformations and appearance of individual handles\n\n\tupdateMatrixWorld( force ) {\n\n\t\tconst space = ( this.mode === 'scale' ) ? 'local' : this.space; // scale always oriented to local rotation\n\n\t\tconst quaternion = ( space === 'local' ) ? this.worldQuaternion : _identityQuaternion;\n\n\t\t// Show only gizmos for current transform mode\n\n\t\tthis.gizmo[ 'translate' ].visible = this.mode === 'translate';\n\t\tthis.gizmo[ 'rotate' ].visible = this.mode === 'rotate';\n\t\tthis.gizmo[ 'scale' ].visible = this.mode === 'scale';\n\n\t\tthis.helper[ 'translate' ].visible = this.mode === 'translate';\n\t\tthis.helper[ 'rotate' ].visible = this.mode === 'rotate';\n\t\tthis.helper[ 'scale' ].visible = this.mode === 'scale';\n\n\n\t\tlet handles = [];\n\t\thandles = handles.concat( this.picker[ this.mode ].children );\n\t\thandles = handles.concat( this.gizmo[ this.mode ].children );\n\t\thandles = handles.concat( this.helper[ this.mode ].children );\n\n\t\tfor ( let i = 0; i < handles.length; i ++ ) {\n\n\t\t\tconst handle = handles[ i ];\n\n\t\t\t// hide aligned to camera\n\n\t\t\thandle.visible = true;\n\t\t\thandle.rotation.set( 0, 0, 0 );\n\t\t\thandle.position.copy( this.worldPosition );\n\n\t\t\tlet factor;\n\n\t\t\tif ( this.camera.isOrthographicCamera ) {\n\n\t\t\t\tfactor = ( this.camera.top - this.camera.bottom ) / this.camera.zoom;\n\n\t\t\t} else {\n\n\t\t\t\tfactor = this.worldPosition.distanceTo( this.cameraPosition ) * Math.min( 1.9 * Math.tan( Math.PI * this.camera.fov / 360 ) / this.camera.zoom, 7 );\n\n\t\t\t}\n\n\t\t\thandle.scale.set( 1, 1, 1 ).multiplyScalar( factor * this.size / 4 );\n\n\t\t\t// TODO: simplify helpers and consider decoupling from gizmo\n\n\t\t\tif ( handle.tag === 'helper' ) {\n\n\t\t\t\thandle.visible = false;\n\n\t\t\t\tif ( handle.name === 'AXIS' ) {\n\n\t\t\t\t\thandle.position.copy( this.worldPositionStart );\n\t\t\t\t\thandle.visible = !! this.axis;\n\n\t\t\t\t\tif ( this.axis === 'X' ) {\n\n\t\t\t\t\t\t_tempQuaternion.setFromEuler( _tempEuler.set( 0, 0, 0 ) );\n\t\t\t\t\t\thandle.quaternion.copy( quaternion ).multiply( _tempQuaternion );\n\n\t\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitX ).applyQuaternion( quaternion ).dot( this.eye ) ) > 0.9 ) {\n\n\t\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.axis === 'Y' ) {\n\n\t\t\t\t\t\t_tempQuaternion.setFromEuler( _tempEuler.set( 0, 0, Math.PI / 2 ) );\n\t\t\t\t\t\thandle.quaternion.copy( quaternion ).multiply( _tempQuaternion );\n\n\t\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitY ).applyQuaternion( quaternion ).dot( this.eye ) ) > 0.9 ) {\n\n\t\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.axis === 'Z' ) {\n\n\t\t\t\t\t\t_tempQuaternion.setFromEuler( _tempEuler.set( 0, Math.PI / 2, 0 ) );\n\t\t\t\t\t\thandle.quaternion.copy( quaternion ).multiply( _tempQuaternion );\n\n\t\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitZ ).applyQuaternion( quaternion ).dot( this.eye ) ) > 0.9 ) {\n\n\t\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.axis === 'XYZE' ) {\n\n\t\t\t\t\t\t_tempQuaternion.setFromEuler( _tempEuler.set( 0, Math.PI / 2, 0 ) );\n\t\t\t\t\t\t_alignVector.copy( this.rotationAxis );\n\t\t\t\t\t\thandle.quaternion.setFromRotationMatrix( _lookAtMatrix.lookAt( _zeroVector, _alignVector, _unitY ) );\n\t\t\t\t\t\thandle.quaternion.multiply( _tempQuaternion );\n\t\t\t\t\t\thandle.visible = this.dragging;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.axis === 'E' ) {\n\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\n\t\t\t\t} else if ( handle.name === 'START' ) {\n\n\t\t\t\t\thandle.position.copy( this.worldPositionStart );\n\t\t\t\t\thandle.visible = this.dragging;\n\n\t\t\t\t} else if ( handle.name === 'END' ) {\n\n\t\t\t\t\thandle.position.copy( this.worldPosition );\n\t\t\t\t\thandle.visible = this.dragging;\n\n\t\t\t\t} else if ( handle.name === 'DELTA' ) {\n\n\t\t\t\t\thandle.position.copy( this.worldPositionStart );\n\t\t\t\t\thandle.quaternion.copy( this.worldQuaternionStart );\n\t\t\t\t\t_tempVector.set( 1e-10, 1e-10, 1e-10 ).add( this.worldPositionStart ).sub( this.worldPosition ).multiplyScalar( - 1 );\n\t\t\t\t\t_tempVector.applyQuaternion( this.worldQuaternionStart.clone().invert() );\n\t\t\t\t\thandle.scale.copy( _tempVector );\n\t\t\t\t\thandle.visible = this.dragging;\n\n\t\t\t\t} else {\n\n\t\t\t\t\thandle.quaternion.copy( quaternion );\n\n\t\t\t\t\tif ( this.dragging ) {\n\n\t\t\t\t\t\thandle.position.copy( this.worldPositionStart );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\thandle.position.copy( this.worldPosition );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.axis ) {\n\n\t\t\t\t\t\thandle.visible = this.axis.search( handle.name ) !== - 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// If updating helper, skip rest of the loop\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\t// Align handles to current local or world rotation\n\n\t\t\thandle.quaternion.copy( quaternion );\n\n\t\t\tif ( this.mode === 'translate' || this.mode === 'scale' ) {\n\n\t\t\t\t// Hide translate and scale axis facing the camera\n\n\t\t\t\tconst AXIS_HIDE_TRESHOLD = 0.99;\n\t\t\t\tconst PLANE_HIDE_TRESHOLD = 0.2;\n\n\t\t\t\tif ( handle.name === 'X' ) {\n\n\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitX ).applyQuaternion( quaternion ).dot( this.eye ) ) > AXIS_HIDE_TRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'Y' ) {\n\n\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitY ).applyQuaternion( quaternion ).dot( this.eye ) ) > AXIS_HIDE_TRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'Z' ) {\n\n\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitZ ).applyQuaternion( quaternion ).dot( this.eye ) ) > AXIS_HIDE_TRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'XY' ) {\n\n\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitZ ).applyQuaternion( quaternion ).dot( this.eye ) ) < PLANE_HIDE_TRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'YZ' ) {\n\n\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitX ).applyQuaternion( quaternion ).dot( this.eye ) ) < PLANE_HIDE_TRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'XZ' ) {\n\n\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitY ).applyQuaternion( quaternion ).dot( this.eye ) ) < PLANE_HIDE_TRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( this.mode === 'rotate' ) {\n\n\t\t\t\t// Align handles to current local or world rotation\n\n\t\t\t\t_tempQuaternion2.copy( quaternion );\n\t\t\t\t_alignVector.copy( this.eye ).applyQuaternion( _tempQuaternion.copy( quaternion ).invert() );\n\n\t\t\t\tif ( handle.name.search( 'E' ) !== - 1 ) {\n\n\t\t\t\t\thandle.quaternion.setFromRotationMatrix( _lookAtMatrix.lookAt( this.eye, _zeroVector, _unitY ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'X' ) {\n\n\t\t\t\t\t_tempQuaternion.setFromAxisAngle( _unitX, Math.atan2( - _alignVector.y, _alignVector.z ) );\n\t\t\t\t\t_tempQuaternion.multiplyQuaternions( _tempQuaternion2, _tempQuaternion );\n\t\t\t\t\thandle.quaternion.copy( _tempQuaternion );\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'Y' ) {\n\n\t\t\t\t\t_tempQuaternion.setFromAxisAngle( _unitY, Math.atan2( _alignVector.x, _alignVector.z ) );\n\t\t\t\t\t_tempQuaternion.multiplyQuaternions( _tempQuaternion2, _tempQuaternion );\n\t\t\t\t\thandle.quaternion.copy( _tempQuaternion );\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'Z' ) {\n\n\t\t\t\t\t_tempQuaternion.setFromAxisAngle( _unitZ, Math.atan2( _alignVector.y, _alignVector.x ) );\n\t\t\t\t\t_tempQuaternion.multiplyQuaternions( _tempQuaternion2, _tempQuaternion );\n\t\t\t\t\thandle.quaternion.copy( _tempQuaternion );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Hide disabled axes\n\t\t\thandle.visible = handle.visible && ( handle.name.indexOf( 'X' ) === - 1 || this.showX );\n\t\t\thandle.visible = handle.visible && ( handle.name.indexOf( 'Y' ) === - 1 || this.showY );\n\t\t\thandle.visible = handle.visible && ( handle.name.indexOf( 'Z' ) === - 1 || this.showZ );\n\t\t\thandle.visible = handle.visible && ( handle.name.indexOf( 'E' ) === - 1 || ( this.showX && this.showY && this.showZ ) );\n\n\t\t\t// highlight selected axis\n\n\t\t\thandle.material._color = handle.material._color || handle.material.color.clone();\n\t\t\thandle.material._opacity = handle.material._opacity || handle.material.opacity;\n\n\t\t\thandle.material.color.copy( handle.material._color );\n\t\t\thandle.material.opacity = handle.material._opacity;\n\n\t\t\tif ( this.enabled && this.axis ) {\n\n\t\t\t\tif ( handle.name === this.axis ) {\n\n\t\t\t\t\thandle.material.color.setHex( 0xffff00 );\n\t\t\t\t\thandle.material.opacity = 1.0;\n\n\t\t\t\t} else if ( this.axis.split( '' ).some( function ( a ) {\n\n\t\t\t\t\treturn handle.name === a;\n\n\t\t\t\t} ) ) {\n\n\t\t\t\t\thandle.material.color.setHex( 0xffff00 );\n\t\t\t\t\thandle.material.opacity = 1.0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n}\n\nTransformControlsGizmo.prototype.isTransformControlsGizmo = true;\n\n//\n\nclass TransformControlsPlane extends Mesh {\n\n\tconstructor() {\n\n\t\tsuper(\n\t\t\tnew PlaneGeometry( 100000, 100000, 2, 2 ),\n\t\t\tnew MeshBasicMaterial( { visible: false, wireframe: true, side: DoubleSide, transparent: true, opacity: 0.1, toneMapped: false } )\n\t\t);\n\n\t\tthis.type = 'TransformControlsPlane';\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tlet space = this.space;\n\n\t\tthis.position.copy( this.worldPosition );\n\n\t\tif ( this.mode === 'scale' ) space = 'local'; // scale always oriented to local rotation\n\n\t\t_v1.copy( _unitX ).applyQuaternion( space === 'local' ? this.worldQuaternion : _identityQuaternion );\n\t\t_v2.copy( _unitY ).applyQuaternion( space === 'local' ? this.worldQuaternion : _identityQuaternion );\n\t\t_v3.copy( _unitZ ).applyQuaternion( space === 'local' ? this.worldQuaternion : _identityQuaternion );\n\n\t\t// Align the plane for current transform mode, axis and space.\n\n\t\t_alignVector.copy( _v2 );\n\n\t\tswitch ( this.mode ) {\n\n\t\t\tcase 'translate':\n\t\t\tcase 'scale':\n\t\t\t\tswitch ( this.axis ) {\n\n\t\t\t\t\tcase 'X':\n\t\t\t\t\t\t_alignVector.copy( this.eye ).cross( _v1 );\n\t\t\t\t\t\t_dirVector.copy( _v1 ).cross( _alignVector );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Y':\n\t\t\t\t\t\t_alignVector.copy( this.eye ).cross( _v2 );\n\t\t\t\t\t\t_dirVector.copy( _v2 ).cross( _alignVector );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Z':\n\t\t\t\t\t\t_alignVector.copy( this.eye ).cross( _v3 );\n\t\t\t\t\t\t_dirVector.copy( _v3 ).cross( _alignVector );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'XY':\n\t\t\t\t\t\t_dirVector.copy( _v3 );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'YZ':\n\t\t\t\t\t\t_dirVector.copy( _v1 );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'XZ':\n\t\t\t\t\t\t_alignVector.copy( _v3 );\n\t\t\t\t\t\t_dirVector.copy( _v2 );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'XYZ':\n\t\t\t\t\tcase 'E':\n\t\t\t\t\t\t_dirVector.set( 0, 0, 0 );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\tcase 'rotate':\n\t\t\tdefault:\n\t\t\t\t// special case for rotate\n\t\t\t\t_dirVector.set( 0, 0, 0 );\n\n\t\t}\n\n\t\tif ( _dirVector.length() === 0 ) {\n\n\t\t\t// If in rotate mode, make the plane parallel to camera\n\t\t\tthis.quaternion.copy( this.cameraQuaternion );\n\n\t\t} else {\n\n\t\t\t_tempMatrix.lookAt( _tempVector.set( 0, 0, 0 ), _dirVector, _alignVector );\n\n\t\t\tthis.quaternion.setFromRotationMatrix( _tempMatrix );\n\n\t\t}\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n}\n\nTransformControlsPlane.prototype.isTransformControlsPlane = true;\n\nexport { TransformControls, TransformControlsGizmo, TransformControlsPlane };\n","<template>\n  <div id=\"sceneContainer\" ref=\"sceneContainer\"></div>\n</template>\n\n<script setup>\nimport { ref, reactive, onMounted } from \"vue\";\nimport Base3D from \"../utils/base3D\";\nimport threeUniversal from \"../utils/threeUniversal.js\";\nimport * as THREE from \"three\";\nimport { FontLoader } from \"three/examples/jsm/loaders/FontLoader.js\";\nimport { TextGeometry } from \"three/examples/jsm/geometries/TextGeometry.js\";\nimport { Flow } from \"three/examples/jsm/modifiers/CurveModifier.js\";\nimport { TransformControls } from \"three/examples/jsm/controls/TransformControls.js\";\n\nlet data = reactive({\n  base3D: {},\n});\n\nlet rayCaster = new THREE.Raycaster();\n\nlet sceneContainer = ref(null);\n\nconst ACTION_SELECT = 1,\n  ACTION_NONE = 0;\nlet curveHandles = [];\nlet curve;\nlet flow;\nlet line;\nlet control;\n\nlet orbit; //orbit / trans 控制开关\n\nconst mouse = new THREE.Vector2();\nlet action = ACTION_NONE;\n\nonMounted(() => {\n  data.base3D = new Base3D(sceneContainer.value);\n  orbit = data.base3D.orbitControls;\n  orbit.update();\n  orbit.addEventListener(\"change\", render);\n  threeUniversal.addFloor(data.base3D.scene);\n  initGeometry();\n  addText();\n  animate();\n});\n\nfunction initGeometry() {\n  const initialPoints = [\n    { x: 100, y: 0, z: -100 },\n    { x: 100, y: 0, z: 100 },\n    { x: -100, y: 0, z: 100 },\n    { x: -100, y: 0, z: -100 },\n  ];\n\n  const boxGeometry = new THREE.BoxGeometry(5, 5, 5);\n  const boxMaterial = new THREE.MeshBasicMaterial();\n\n  for (const handlePos of initialPoints) {\n    const handle = new THREE.Mesh(boxGeometry, boxMaterial);\n    handle.position.copy(handlePos);\n    curveHandles.push(handle);\n    data.base3D.scene.add(handle);\n  }\n\n  curve = new THREE.CatmullRomCurve3(\n    curveHandles.map((handle) => handle.position)\n  );\n  curve.curveType = \"centripetal\";\n  curve.closed = true;\n\n  const points = curve.getPoints(50);\n  line = new THREE.LineLoop(\n    new THREE.BufferGeometry().setFromPoints(points),\n    new THREE.LineBasicMaterial({ color: 0xff0000 })\n  );\n\n  data.base3D.scene.add(line);\n}\n\nfunction addText() {\n  const loader = new FontLoader();\n  loader.load(\"/fonts/STSong_Regular.json\", (font) => {\n    const geometry = new TextGeometry(\"H\", {\n      font: font,\n      size: 20,\n      height: 5,\n      curveSegments: 12,\n      bevelEnabled: true,\n      bevelThickness: 2,\n      bevelSize: 1,\n      bevelOffset: 0,\n      bevelSegments: 5,\n    });\n    geometry.rotateX(Math.PI);\n    const material = new THREE.MeshStandardMaterial({\n      color: 0x00ffff,\n    });\n    const objectToCurve = new THREE.Mesh(geometry, material);\n    flow = new Flow(objectToCurve);\n    flow.updateCurve(0, curve);\n    data.base3D.scene.add(flow.object3D);\n  });\n\n  control = new TransformControls(\n    data.base3D.camera,\n    data.base3D.renderer.domElement\n  );\n  control.addEventListener(\"change\", render);\n  control.addEventListener(\"dragging-changed\", (event) => {\n    if (!event.value) {\n      const points = curve.getPoints(50);\n      line.geometry.setFromPoints(points);\n      flow.updateCurve(0, curve);\n    }\n    orbit.enabled = !event.value; // control 开关\n  });\n}\n\nfunction animate() {\n  requestAnimationFrame(animate);\n\n  // 获取需要移动的点\n  if (action === ACTION_SELECT) {\n    rayCaster.setFromCamera(mouse, data.base3D.camera);\n    action = ACTION_NONE;\n    const intersects = rayCaster.intersectObjects(curveHandles, false);\n    if (intersects.length) {\n      const target = intersects[0].object;\n      control.attach(target);\n      data.base3D.scene.add(control);\n    }\n  }\n\n  if (flow) {\n    flow.moveAlongCurve(-0.001); // 控制沿曲线运动的方向及时间\n  }\n  render();\n}\n\nfunction render() {\n  data.base3D.renderer.domElement.addEventListener(\n    \"pointerdown\",\n    onPointerDown\n  );\n}\nfunction onPointerDown(event) {\n  action = ACTION_SELECT;\n  mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n  mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n}\n</script>\n\n<style scoped></style>\n"],"names":["THREE.Raycaster","THREE.Vector2","THREE.BoxGeometry","THREE.MeshBasicMaterial","THREE.Mesh","THREE.CatmullRomCurve3","THREE.LineLoop","THREE.BufferGeometry","THREE.LineBasicMaterial","THREE.MeshStandardMaterial"],"mappings":"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"}