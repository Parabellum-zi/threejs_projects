{"version":3,"file":"water.64477cf7.js","sources":["../../src/components/water.vue"],"sourcesContent":["<template>\n  <div id=\"sceneContainer\" ref=\"sceneContainer\">\n    <div id=\"label\" ref=\"label\"></div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, reactive, onMounted } from \"vue\";\nimport Base3D from \"../utils/base3D\";\nimport * as THREE from \"three\";\n\nimport { FontLoader } from \"three/examples/jsm/loaders/FontLoader.js\";\n\nlet data = reactive({\n  base3D: {},\n});\nlet labelGroup = new THREE.Group();\nlabelGroup.name = \"labels\";\n\nlet sceneContainer = ref(null);\nonMounted(() => {\n  data.base3D = new Base3D(sceneContainer.value);\n  data.base3D.scene.add(labelGroup);\n  initContent();\n  animate();\n  addEventListener(\"click\", onMouseDblclick, false);\n  // addEventListener(\"resize\", onWindowResize, false);\n});\nlet label = ref(null); // 预留\nlet selectObject;\n\n// 初始化模型\nfunction initContent() {\n  let cubeGeometry = new THREE.BoxGeometry(100, 100, 100);\n  let cubeMaterial = new THREE.MeshLambertMaterial({ color: 0x9370db });\n  let cube = new THREE.Mesh(cubeGeometry, cubeMaterial);\n  cube.position.y = 50;\n  cube.name = \"cube\";\n  data.base3D.scene.add(cube);\n\n  let sphereGeometry = new THREE.SphereGeometry(50, 50, 50, 50);\n  let sphereMaterial = new THREE.MeshLambertMaterial({ color: 0x3cb371 });\n  let sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\n  sphere.position.x = 200;\n  sphere.position.y = 50;\n  sphere.name = \"sphere\";\n  // sphere.position.z = 200;\n  data.base3D.scene.add(sphere);\n\n  let cylinderGeometry = new THREE.CylinderGeometry(50, 50, 100, 100);\n  let cylinderMaterial = new THREE.MeshLambertMaterial({ color: 0xcd7054 });\n  let cylinder = new THREE.Mesh(cylinderGeometry, cylinderMaterial);\n  cylinder.position.x = -200;\n  cylinder.position.y = 50;\n  cylinder.name = \"cylinder\";\n  // cylinder.position.z = -200;\n  data.base3D.scene.add(cylinder);\n}\n\n// 鼠标双击触发的方法\nfunction onMouseDblclick(event) {\n  // 获取 raycaster 和所有模型相交的数组，其中的元素按照距离排序，越近的越靠前\n  let intersects = getIntersects(event);\n  // 获取选中最近的 Mesh 对象\n  if (intersects.length !== 0 && intersects[0].object instanceof THREE.Mesh) {\n    selectObject = intersects[0].object;\n    if (selectObject.name == \"sky\") return;\n    changeMaterial(selectObject);\n    popupContent(\"three.js\", selectObject);\n    let allChildren = labelGroup.children;\n    for (let i = allChildren.length - 1; i >= 0; i--) {\n      console.log(allChildren[i].type);\n      if (allChildren[i].type === \"Mesh\") {\n        // console.log(allChildren[i]);\n        labelGroup.remove(allChildren[i]);\n      }\n    }\n  } else {\n    console.log(\"未选中 Mesh!\");\n    /*  data.base3D.scene.traverse((obj) => {\n      if (obj.type === \"Group\" && obj.name === \"labels\") {\n        console.log(obj);\n        // data.base3D.scene.remove(labelGroup);\n      }\n    });*/\n\n    /*   let allChildren = data.base3D.scene.children;\n    for (let i = allChildren.length - 1; i >= 0; i--) {\n      if (allChildren[i] instanceof THREE.Group) {\n        data.base3D.scene.remove(allChildren[i]);\n      }\n    }*/\n    /*let allChildren = labelGroup.children;\n    for (let i = allChildren.length - 1; i >= 0; i--) {\n      console.log(allChildren[i].type);\n      if (allChildren[i].type === \"Mesh\") {\n        // console.log(allChildren[i]);\n        labelGroup.remove(allChildren[i]);\n      }\n    }*/\n  }\n}\n\n// 获取与射线相交的对象数组\nfunction getIntersects(event) {\n  event.preventDefault();\n  // console.log(\"event.clientX:\" + event.clientX);\n  // console.log(\"event.clientY:\" + event.clientY);\n  // 声明 raycaster 和 mouse 变量\n  let raycaster = new THREE.Raycaster();\n  let mouse = new THREE.Vector2();\n\n  // 通过鼠标点击位置,计算出 raycaster 所需点的位置,以屏幕为中心点,范围 -1 到 1\n  mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n  mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n  //通过鼠标点击的位置(二维坐标)和当前相机的矩阵计算出射线位置\n  raycaster.setFromCamera(mouse, data.base3D.camera);\n  // 获取与射线相交的对象数组，其中的元素按照距离排序，越近的越靠前\n  return raycaster.intersectObjects(data.base3D.scene.children);\n}\n\n// 改变对象材质属性\nfunction changeMaterial(object) {\n  object.material = new THREE.MeshLambertMaterial({\n    color: 0xffffff * Math.random(),\n    transparent: !object.material.transparent,\n    opacity: 0.5,\n  });\n}\n// 更新div的位置\nfunction renderDiv(object) {\n  // 获取窗口的一半高度和宽度\n  let halfWidth = window.innerWidth / 2;\n  let halfHeight = window.innerHeight / 2;\n\n  // 逆转相机求出二维坐标\n  let vector = object.position.clone().project(data.base3D.camera);\n  // console.log(vector);\n  /*  // 修改 div 的位置\n  label.value.css({\n    left: vector.x * halfWidth + halfWidth,\n    top: -vector.y * halfHeight + halfHeight - object.position.y,\n  });\n  // 显示模型信息\n  label.value.text(\"name:\" + object.name);*/\n}\nfunction animate() {\n  if (selectObject !== undefined && selectObject !== null) {\n    renderDiv(selectObject);\n  }\n  requestAnimationFrame(animate);\n}\n\nfunction popupContent(text, selectObject) {\n  let { x, y, z } = selectObject.position.clone();\n  let loader = new FontLoader();\n  loader.load(\"/fonts/STSong_Regular.json\", (font) => {\n    // 材质\n    let fontMaterial = new THREE.MeshLambertMaterial({\n      color: 0x912cee,\n      side: THREE.DoubleSide,\n    });\n    /*\n  let planeMaterial = new THREE.MeshLambertMaterial({\n    color: 0x545454,\n    transparent: true,\n    opacity: 0.6,\n    side: THREE.DoubleSide,\n  });\n\n  let planeGeometry = new THREE.PlaneGeometry(60, 30);\n  let plane = new THREE.Mesh(planeGeometry, planeMaterial);\n  plane.position.y += 40;\n  data.base3D.scene.add(plane);*/\n    // 生成二维字体模型\n    let shapes = font.generateShapes(text, 10, 1);\n    let fontGeometry = new THREE.ShapeGeometry(shapes);\n    // 绑定盒子模型\n    fontGeometry.computeBoundingBox();\n    let fonts = new THREE.Mesh(fontGeometry, fontMaterial);\n    fonts.position.set(x, y + 60, z);\n    labelGroup.add(fonts);\n    // console.log(labelGroup);\n  });\n}\n</script>\n\n<style scoped>\n#label {\n  position: absolute;\n  padding: 10px;\n  background: rgba(255, 255, 255, 0.6);\n  line-height: 1;\n  border-radius: 5px;\n}\n</style>\n"],"names":["THREE.Group","THREE.BoxGeometry","THREE.MeshLambertMaterial","THREE.Mesh","THREE.SphereGeometry","THREE.CylinderGeometry","THREE.Raycaster","THREE.Vector2","THREE.DoubleSide","THREE.ShapeGeometry"],"mappings":"ueAaA,GAAI,GAAO,EAAS,CAClB,OAAQ,KAEN,EAAa,GAAIA,GACrB,EAAW,KAAO,SAElB,GAAI,GAAiB,EAAI,MACzB,EAAU,IAAM,CACd,EAAK,OAAS,GAAI,GAAO,EAAe,OACxC,EAAK,OAAO,MAAM,IAAI,GACtB,IACA,IACA,iBAAiB,QAAS,EAAiB,MAG7C,GAAI,GAAQ,EAAI,MACZ,EAGJ,YAAuB,CACrB,GAAI,GAAe,GAAIC,GAAkB,IAAK,IAAK,KAC/C,EAAe,GAAIC,GAA0B,CAAE,MAAO,UACtD,EAAO,GAAIC,GAAW,EAAc,GACxC,EAAK,SAAS,EAAI,GAClB,EAAK,KAAO,OACZ,EAAK,OAAO,MAAM,IAAI,GAEtB,GAAI,GAAiB,GAAIC,GAAqB,GAAI,GAAI,GAAI,IACtD,EAAiB,GAAIF,GAA0B,CAAE,MAAO,UACxD,EAAS,GAAIC,GAAW,EAAgB,GAC5C,EAAO,SAAS,EAAI,IACpB,EAAO,SAAS,EAAI,GACpB,EAAO,KAAO,SAEd,EAAK,OAAO,MAAM,IAAI,GAEtB,GAAI,GAAmB,GAAIE,GAAuB,GAAI,GAAI,IAAK,KAC3D,EAAmB,GAAIH,GAA0B,CAAE,MAAO,WAC1D,EAAW,GAAIC,GAAW,EAAkB,GAChD,EAAS,SAAS,EAAI,KACtB,EAAS,SAAS,EAAI,GACtB,EAAS,KAAO,WAEhB,EAAK,OAAO,MAAM,IAAI,GAIxB,WAAyB,EAAO,CAE9B,GAAI,GAAa,EAAc,GAE/B,GAAI,EAAW,SAAW,GAAK,EAAW,GAAG,iBAAkBA,GAAY,CAEzE,GADA,EAAe,EAAW,GAAG,OACzB,EAAa,MAAQ,MAAO,OAChC,EAAe,GACf,EAAa,WAAY,GACzB,GAAI,GAAc,EAAW,SAC7B,OAAS,GAAI,EAAY,OAAS,EAAG,GAAK,EAAG,IAC3C,QAAQ,IAAI,EAAY,GAAG,MACvB,EAAY,GAAG,OAAS,QAE1B,EAAW,OAAO,EAAY,QAIlC,SAAQ,IAAI,4BA0BhB,WAAuB,EAAO,CAC5B,EAAM,iBAIN,GAAI,GAAY,GAAIG,GAChB,EAAQ,GAAIC,GAGhB,SAAM,EAAK,EAAM,QAAU,OAAO,WAAc,EAAI,EACpD,EAAM,EAAI,CAAE,GAAM,QAAU,OAAO,aAAe,EAAI,EAGtD,EAAU,cAAc,EAAO,EAAK,OAAO,QAEpC,EAAU,iBAAiB,EAAK,OAAO,MAAM,UAItD,WAAwB,EAAQ,CAC9B,EAAO,SAAW,GAAIL,GAA0B,CAC9C,MAAO,SAAW,KAAK,SACvB,YAAa,CAAC,EAAO,SAAS,YAC9B,QAAS,KAIb,WAAmB,EAAQ,CAMZ,EAAO,SAAS,QAAQ,QAAQ,EAAK,OAAO,QAU3D,YAAmB,CACjB,AAAI,AAA8B,GAAiB,MACjD,EAAU,GAEZ,sBAAsB,GAGxB,WAAsB,EAAM,EAAc,CACxC,GAAI,CAAE,IAAG,IAAG,KAAM,EAAa,SAAS,QAExC,AADa,GAAI,KACV,KAAK,6BAA8B,AAAC,GAAS,CAElD,GAAI,GAAe,GAAIA,GAA0B,CAC/C,MAAO,QACP,KAAMM,IAeJ,EAAS,EAAK,eAAe,EAAM,GAAI,GACvC,EAAe,GAAIC,GAAoB,GAE3C,EAAa,qBACb,GAAI,GAAQ,GAAIN,GAAW,EAAc,GACzC,EAAM,SAAS,IAAI,EAAG,EAAI,GAAI,GAC9B,EAAW,IAAI"}