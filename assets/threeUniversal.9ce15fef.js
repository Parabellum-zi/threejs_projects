import{c as Hl,d as Cd,o as Po,G as Ld,p as Pd,h as Id,n as Dd,T as Gl,R as Vl,V as kl,m as Fd,q as Ud,r as Bd,s as Nd,t as Od,u as zd,v as Wl}from"./three.module.3b505d30.js";import{S as Hd}from"./base3D.6463c8aa.js";var Gd=typeof globalThis!="undefined"?globalThis:typeof window!="undefined"?window:typeof global!="undefined"?global:typeof self!="undefined"?self:{},Xl={exports:{}},v={};/**
 * @license
 * Copyright 2010-2022 Three.js Authors
 * SPDX-License-Identifier: MIT
 */Object.defineProperty(v,"__esModule",{value:!0});const rs="138",Vd={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},kd={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},ql=0,Io=1,Yl=2,Wd=3,Xd=0,Do=1,Zl=2,wi=3,zn=0,rt=1,Hn=2,Fo=1,qd=2,tn=0,Gn=1,Uo=2,Bo=3,No=4,Jl=5,Vn=100,$l=101,Kl=102,Oo=103,zo=104,jl=200,Ql=201,ec=202,tc=203,Ho=204,Go=205,nc=206,ic=207,rc=208,sc=209,oc=210,ac=0,lc=1,cc=2,ss=3,hc=4,uc=5,dc=6,fc=7,pr=0,pc=1,mc=2,nn=0,gc=1,yc=2,xc=3,_c=4,vc=5,os=300,yn=301,xn=302,mr=303,gr=304,bi=306,yr=307,xr=1e3,Tt=1001,_r=1002,ht=1003,as=1004,Yd=1004,ls=1005,Zd=1005,et=1006,Vo=1007,Jd=1007,kn=1008,$d=1008,_n=1009,Mc=1010,wc=1011,Ei=1012,bc=1013,vr=1014,rn=1015,Wn=1016,Ec=1017,Sc=1018,Xn=1020,Tc=1021,Ac=1022,wt=1023,Rc=1024,Cc=1025,vn=1026,qn=1027,Lc=1028,Pc=1029,Ic=1030,Dc=1031,Fc=1033,cs=33776,hs=33777,us=33778,ds=33779,ko=35840,Wo=35841,Xo=35842,qo=35843,Uc=36196,Yo=37492,Zo=37496,Jo=37808,$o=37809,Ko=37810,jo=37811,Qo=37812,ea=37813,ta=37814,na=37815,ia=37816,ra=37817,sa=37818,oa=37819,aa=37820,la=37821,ca=36492,Bc=2200,Nc=2201,Oc=2202,Mr=2300,wr=2301,fs=2302,Yn=2400,Zn=2401,br=2402,ps=2500,ha=2501,zc=0,Kd=1,jd=2,sn=3e3,je=3001,Hc=3200,Gc=3201,Jn=0,Vc=1,Qd=0,ms=7680,ef=7681,tf=7682,nf=7683,rf=34055,sf=34056,of=5386,af=512,lf=513,cf=514,hf=515,uf=516,df=517,ff=518,kc=519,Si=35044,Ti=35048,pf=35040,mf=35045,gf=35049,yf=35041,xf=35046,_f=35050,vf=35042,Mf="100",ua="300 es",gs=1035;class Mn{addEventListener(e,t){this._listeners===void 0&&(this._listeners={});const n=this._listeners;n[e]===void 0&&(n[e]=[]),n[e].indexOf(t)===-1&&n[e].push(t)}hasEventListener(e,t){if(this._listeners===void 0)return!1;const n=this._listeners;return n[e]!==void 0&&n[e].indexOf(t)!==-1}removeEventListener(e,t){if(this._listeners===void 0)return;const i=this._listeners[e];if(i!==void 0){const s=i.indexOf(t);s!==-1&&i.splice(s,1)}}dispatchEvent(e){if(this._listeners===void 0)return;const n=this._listeners[e.type];if(n!==void 0){e.target=this;const i=n.slice(0);for(let s=0,o=i.length;s<o;s++)i[s].call(this,e);e.target=null}}}const xt=[];for(let r=0;r<256;r++)xt[r]=(r<16?"0":"")+r.toString(16);let ys=1234567;const $n=Math.PI/180,Er=180/Math.PI;function Pt(){const r=Math.random()*4294967295|0,e=Math.random()*4294967295|0,t=Math.random()*4294967295|0,n=Math.random()*4294967295|0;return(xt[r&255]+xt[r>>8&255]+xt[r>>16&255]+xt[r>>24&255]+"-"+xt[e&255]+xt[e>>8&255]+"-"+xt[e>>16&15|64]+xt[e>>24&255]+"-"+xt[t&63|128]+xt[t>>8&255]+"-"+xt[t>>16&255]+xt[t>>24&255]+xt[n&255]+xt[n>>8&255]+xt[n>>16&255]+xt[n>>24&255]).toUpperCase()}function _t(r,e,t){return Math.max(e,Math.min(t,r))}function da(r,e){return(r%e+e)%e}function wf(r,e,t,n,i){return n+(r-e)*(i-n)/(t-e)}function bf(r,e,t){return r!==e?(t-r)/(e-r):0}function Sr(r,e,t){return(1-t)*r+t*e}function Ef(r,e,t,n){return Sr(r,e,1-Math.exp(-t*n))}function Sf(r,e=1){return e-Math.abs(da(r,e*2)-e)}function Tf(r,e,t){return r<=e?0:r>=t?1:(r=(r-e)/(t-e),r*r*(3-2*r))}function Af(r,e,t){return r<=e?0:r>=t?1:(r=(r-e)/(t-e),r*r*r*(r*(r*6-15)+10))}function Rf(r,e){return r+Math.floor(Math.random()*(e-r+1))}function Cf(r,e){return r+Math.random()*(e-r)}function Lf(r){return r*(.5-Math.random())}function Pf(r){return r!==void 0&&(ys=r%2147483647),ys=ys*16807%2147483647,(ys-1)/2147483646}function If(r){return r*$n}function Df(r){return r*Er}function fa(r){return(r&r-1)==0&&r!==0}function Wc(r){return Math.pow(2,Math.ceil(Math.log(r)/Math.LN2))}function xs(r){return Math.pow(2,Math.floor(Math.log(r)/Math.LN2))}function Ff(r,e,t,n,i){const s=Math.cos,o=Math.sin,a=s(t/2),c=o(t/2),h=s((e+n)/2),u=o((e+n)/2),d=s((e-n)/2),f=o((e-n)/2),p=s((n-e)/2),g=o((n-e)/2);switch(i){case"XYX":r.set(a*u,c*d,c*f,a*h);break;case"YZY":r.set(c*f,a*u,c*d,a*h);break;case"ZXZ":r.set(c*d,c*f,a*u,a*h);break;case"XZX":r.set(a*u,c*g,c*p,a*h);break;case"YXY":r.set(c*p,a*u,c*g,a*h);break;case"ZYZ":r.set(c*g,c*p,a*u,a*h);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+i)}}var Xc=Object.freeze({__proto__:null,DEG2RAD:$n,RAD2DEG:Er,generateUUID:Pt,clamp:_t,euclideanModulo:da,mapLinear:wf,inverseLerp:bf,lerp:Sr,damp:Ef,pingpong:Sf,smoothstep:Tf,smootherstep:Af,randInt:Rf,randFloat:Cf,randFloatSpread:Lf,seededRandom:Pf,degToRad:If,radToDeg:Df,isPowerOfTwo:fa,ceilPowerOfTwo:Wc,floorPowerOfTwo:xs,setQuaternionFromProperEuler:Ff});class te{constructor(e=0,t=0){this.x=e,this.y=t}get width(){return this.x}set width(e){this.x=e}get height(){return this.y}set height(e){this.y=e}set(e,t){return this.x=e,this.y=t,this}setScalar(e){return this.x=e,this.y=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y)}copy(e){return this.x=e.x,this.y=e.y,this}add(e,t){return t!==void 0?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this)}addScalar(e){return this.x+=e,this.y+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this}sub(e,t){return t!==void 0?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this)}subScalar(e){return this.x-=e,this.y-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this}multiply(e){return this.x*=e.x,this.y*=e.y,this}multiplyScalar(e){return this.x*=e,this.y*=e,this}divide(e){return this.x/=e.x,this.y/=e.y,this}divideScalar(e){return this.multiplyScalar(1/e)}applyMatrix3(e){const t=this.x,n=this.y,i=e.elements;return this.x=i[0]*t+i[3]*n+i[6],this.y=i[1]*t+i[4]*n+i[7],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(e){return this.x*e.x+this.y*e.y}cross(e){return this.x*e.y-this.y*e.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y;return t*t+n*n}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this}equals(e){return e.x===this.x&&e.y===this.y}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e}fromBufferAttribute(e,t,n){return n!==void 0&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),this.x=e.getX(t),this.y=e.getY(t),this}rotateAround(e,t){const n=Math.cos(t),i=Math.sin(t),s=this.x-e.x,o=this.y-e.y;return this.x=s*n-o*i+e.x,this.y=s*i+o*n+e.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}te.prototype.isVector2=!0;class ft{constructor(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}set(e,t,n,i,s,o,a,c,h){const u=this.elements;return u[0]=e,u[1]=i,u[2]=a,u[3]=t,u[4]=s,u[5]=c,u[6]=n,u[7]=o,u[8]=h,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],this}extractBasis(e,t,n){return e.setFromMatrix3Column(this,0),t.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(e){const t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,i=t.elements,s=this.elements,o=n[0],a=n[3],c=n[6],h=n[1],u=n[4],d=n[7],f=n[2],p=n[5],g=n[8],_=i[0],b=i[3],y=i[6],m=i[1],T=i[4],E=i[7],S=i[2],D=i[5],U=i[8];return s[0]=o*_+a*m+c*S,s[3]=o*b+a*T+c*D,s[6]=o*y+a*E+c*U,s[1]=h*_+u*m+d*S,s[4]=h*b+u*T+d*D,s[7]=h*y+u*E+d*U,s[2]=f*_+p*m+g*S,s[5]=f*b+p*T+g*D,s[8]=f*y+p*E+g*U,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[1],i=e[2],s=e[3],o=e[4],a=e[5],c=e[6],h=e[7],u=e[8];return t*o*u-t*a*h-n*s*u+n*a*c+i*s*h-i*o*c}invert(){const e=this.elements,t=e[0],n=e[1],i=e[2],s=e[3],o=e[4],a=e[5],c=e[6],h=e[7],u=e[8],d=u*o-a*h,f=a*c-u*s,p=h*s-o*c,g=t*d+n*f+i*p;if(g===0)return this.set(0,0,0,0,0,0,0,0,0);const _=1/g;return e[0]=d*_,e[1]=(i*h-u*n)*_,e[2]=(a*n-i*o)*_,e[3]=f*_,e[4]=(u*t-i*c)*_,e[5]=(i*s-a*t)*_,e[6]=p*_,e[7]=(n*c-h*t)*_,e[8]=(o*t-n*s)*_,this}transpose(){let e;const t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this}getNormalMatrix(e){return this.setFromMatrix4(e).invert().transpose()}transposeIntoArray(e){const t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this}setUvTransform(e,t,n,i,s,o,a){const c=Math.cos(s),h=Math.sin(s);return this.set(n*c,n*h,-n*(c*o+h*a)+o+e,-i*h,i*c,-i*(-h*o+c*a)+a+t,0,0,1),this}scale(e,t){const n=this.elements;return n[0]*=e,n[3]*=e,n[6]*=e,n[1]*=t,n[4]*=t,n[7]*=t,this}rotate(e){const t=Math.cos(e),n=Math.sin(e),i=this.elements,s=i[0],o=i[3],a=i[6],c=i[1],h=i[4],u=i[7];return i[0]=t*s+n*c,i[3]=t*o+n*h,i[6]=t*a+n*u,i[1]=-n*s+t*c,i[4]=-n*o+t*h,i[7]=-n*a+t*u,this}translate(e,t){const n=this.elements;return n[0]+=e*n[2],n[3]+=e*n[5],n[6]+=e*n[8],n[1]+=t*n[2],n[4]+=t*n[5],n[7]+=t*n[8],this}equals(e){const t=this.elements,n=e.elements;for(let i=0;i<9;i++)if(t[i]!==n[i])return!1;return!0}fromArray(e,t=0){for(let n=0;n<9;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e}clone(){return new this.constructor().fromArray(this.elements)}}ft.prototype.isMatrix3=!0;function qc(r){for(let e=r.length-1;e>=0;--e)if(r[e]>65535)return!0;return!1}const Uf={Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array};function Ai(r,e){return new Uf[r](e)}function Tr(r){return document.createElementNS("http://www.w3.org/1999/xhtml",r)}const Yc={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},zt={h:0,s:0,l:0},_s={h:0,s:0,l:0};function pa(r,e,t){return t<0&&(t+=1),t>1&&(t-=1),t<1/6?r+(e-r)*6*t:t<1/2?e:t<2/3?r+(e-r)*6*(2/3-t):r}function Ri(r){return r<.04045?r*.0773993808:Math.pow(r*.9478672986+.0521327014,2.4)}function ma(r){return r<.0031308?r*12.92:1.055*Math.pow(r,.41666)-.055}class ge{constructor(e,t,n){return t===void 0&&n===void 0?this.set(e):this.setRGB(e,t,n)}set(e){return e&&e.isColor?this.copy(e):typeof e=="number"?this.setHex(e):typeof e=="string"&&this.setStyle(e),this}setScalar(e){return this.r=e,this.g=e,this.b=e,this}setHex(e){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(e&255)/255,this}setRGB(e,t,n){return this.r=e,this.g=t,this.b=n,this}setHSL(e,t,n){if(e=da(e,1),t=_t(t,0,1),n=_t(n,0,1),t===0)this.r=this.g=this.b=n;else{const i=n<=.5?n*(1+t):n+t-n*t,s=2*n-i;this.r=pa(s,i,e+1/3),this.g=pa(s,i,e),this.b=pa(s,i,e-1/3)}return this}setStyle(e){function t(i){i!==void 0&&parseFloat(i)<1&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}let n;if(n=/^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(e)){let i;const s=n[1],o=n[2];switch(s){case"rgb":case"rgba":if(i=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o))return this.r=Math.min(255,parseInt(i[1],10))/255,this.g=Math.min(255,parseInt(i[2],10))/255,this.b=Math.min(255,parseInt(i[3],10))/255,t(i[4]),this;if(i=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o))return this.r=Math.min(100,parseInt(i[1],10))/100,this.g=Math.min(100,parseInt(i[2],10))/100,this.b=Math.min(100,parseInt(i[3],10))/100,t(i[4]),this;break;case"hsl":case"hsla":if(i=/^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o)){const a=parseFloat(i[1])/360,c=parseInt(i[2],10)/100,h=parseInt(i[3],10)/100;return t(i[4]),this.setHSL(a,c,h)}break}}else if(n=/^\#([A-Fa-f\d]+)$/.exec(e)){const i=n[1],s=i.length;if(s===3)return this.r=parseInt(i.charAt(0)+i.charAt(0),16)/255,this.g=parseInt(i.charAt(1)+i.charAt(1),16)/255,this.b=parseInt(i.charAt(2)+i.charAt(2),16)/255,this;if(s===6)return this.r=parseInt(i.charAt(0)+i.charAt(1),16)/255,this.g=parseInt(i.charAt(2)+i.charAt(3),16)/255,this.b=parseInt(i.charAt(4)+i.charAt(5),16)/255,this}return e&&e.length>0?this.setColorName(e):this}setColorName(e){const t=Yc[e.toLowerCase()];return t!==void 0?this.setHex(t):console.warn("THREE.Color: Unknown color "+e),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(e){return this.r=e.r,this.g=e.g,this.b=e.b,this}copySRGBToLinear(e){return this.r=Ri(e.r),this.g=Ri(e.g),this.b=Ri(e.b),this}copyLinearToSRGB(e){return this.r=ma(e.r),this.g=ma(e.g),this.b=ma(e.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(){return this.r*255<<16^this.g*255<<8^this.b*255<<0}getHexString(){return("000000"+this.getHex().toString(16)).slice(-6)}getHSL(e){const t=this.r,n=this.g,i=this.b,s=Math.max(t,n,i),o=Math.min(t,n,i);let a,c;const h=(o+s)/2;if(o===s)a=0,c=0;else{const u=s-o;switch(c=h<=.5?u/(s+o):u/(2-s-o),s){case t:a=(n-i)/u+(n<i?6:0);break;case n:a=(i-t)/u+2;break;case i:a=(t-n)/u+4;break}a/=6}return e.h=a,e.s=c,e.l=h,e}getStyle(){return"rgb("+(this.r*255|0)+","+(this.g*255|0)+","+(this.b*255|0)+")"}offsetHSL(e,t,n){return this.getHSL(zt),zt.h+=e,zt.s+=t,zt.l+=n,this.setHSL(zt.h,zt.s,zt.l),this}add(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this}addColors(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this}addScalar(e){return this.r+=e,this.g+=e,this.b+=e,this}sub(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this}multiply(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this}multiplyScalar(e){return this.r*=e,this.g*=e,this.b*=e,this}lerp(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this}lerpColors(e,t,n){return this.r=e.r+(t.r-e.r)*n,this.g=e.g+(t.g-e.g)*n,this.b=e.b+(t.b-e.b)*n,this}lerpHSL(e,t){this.getHSL(zt),e.getHSL(_s);const n=Sr(zt.h,_s.h,t),i=Sr(zt.s,_s.s,t),s=Sr(zt.l,_s.l,t);return this.setHSL(n,i,s),this}equals(e){return e.r===this.r&&e.g===this.g&&e.b===this.b}fromArray(e,t=0){return this.r=e[t],this.g=e[t+1],this.b=e[t+2],this}toArray(e=[],t=0){return e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e}fromBufferAttribute(e,t){return this.r=e.getX(t),this.g=e.getY(t),this.b=e.getZ(t),e.normalized===!0&&(this.r/=255,this.g/=255,this.b/=255),this}toJSON(){return this.getHex()}}ge.NAMES=Yc;ge.prototype.isColor=!0;ge.prototype.r=1;ge.prototype.g=1;ge.prototype.b=1;let Ci;class wn{static getDataURL(e){if(/^data:/i.test(e.src)||typeof HTMLCanvasElement=="undefined")return e.src;let t;if(e instanceof HTMLCanvasElement)t=e;else{Ci===void 0&&(Ci=Tr("canvas")),Ci.width=e.width,Ci.height=e.height;const n=Ci.getContext("2d");e instanceof ImageData?n.putImageData(e,0,0):n.drawImage(e,0,0,e.width,e.height),t=Ci}return t.width>2048||t.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",e),t.toDataURL("image/jpeg",.6)):t.toDataURL("image/png")}static sRGBToLinear(e){if(typeof HTMLImageElement!="undefined"&&e instanceof HTMLImageElement||typeof HTMLCanvasElement!="undefined"&&e instanceof HTMLCanvasElement||typeof ImageBitmap!="undefined"&&e instanceof ImageBitmap){const t=Tr("canvas");t.width=e.width,t.height=e.height;const n=t.getContext("2d");n.drawImage(e,0,0,e.width,e.height);const i=n.getImageData(0,0,e.width,e.height),s=i.data;for(let o=0;o<s.length;o++)s[o]=Ri(s[o]/255)*255;return n.putImageData(i,0,0),t}else if(e.data){const t=e.data.slice(0);for(let n=0;n<t.length;n++)t instanceof Uint8Array||t instanceof Uint8ClampedArray?t[n]=Math.floor(Ri(t[n]/255)*255):t[n]=Ri(t[n]);return{data:t,width:e.width,height:e.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),e}}class Li{constructor(e=null){this.uuid=Pt(),this.data=e,this.version=0}set needsUpdate(e){e===!0&&this.version++}toJSON(e){const t=e===void 0||typeof e=="string";if(!t&&e.images[this.uuid]!==void 0)return e.images[this.uuid];const n={uuid:this.uuid,url:""},i=this.data;if(i!==null){let s;if(Array.isArray(i)){s=[];for(let o=0,a=i.length;o<a;o++)i[o].isDataTexture?s.push(ga(i[o].image)):s.push(ga(i[o]))}else s=ga(i);n.url=s}return t||(e.images[this.uuid]=n),n}}function ga(r){return typeof HTMLImageElement!="undefined"&&r instanceof HTMLImageElement||typeof HTMLCanvasElement!="undefined"&&r instanceof HTMLCanvasElement||typeof ImageBitmap!="undefined"&&r instanceof ImageBitmap?wn.getDataURL(r):r.data?{data:Array.prototype.slice.call(r.data),width:r.width,height:r.height,type:r.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}Li.prototype.isSource=!0;let Bf=0;class ut extends Mn{constructor(e=ut.DEFAULT_IMAGE,t=ut.DEFAULT_MAPPING,n=Tt,i=Tt,s=et,o=kn,a=wt,c=_n,h=1,u=sn){super();Object.defineProperty(this,"id",{value:Bf++}),this.uuid=Pt(),this.name="",this.source=new Li(e),this.mipmaps=[],this.mapping=t,this.wrapS=n,this.wrapT=i,this.magFilter=s,this.minFilter=o,this.anisotropy=h,this.format=a,this.internalFormat=null,this.type=c,this.offset=new te(0,0),this.repeat=new te(1,1),this.center=new te(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new ft,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=u,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.needsPMREMUpdate=!1}get image(){return this.source.data}set image(e){this.source.data=e}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(e){return this.name=e.name,this.source=e.source,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.internalFormat=e.internalFormat,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.center.copy(e.center),this.rotation=e.rotation,this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrix.copy(e.matrix),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.encoding=e.encoding,this.userData=JSON.parse(JSON.stringify(e.userData)),this}toJSON(e){const t=e===void 0||typeof e=="string";if(!t&&e.textures[this.uuid]!==void 0)return e.textures[this.uuid];const n={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(e).uuid,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return JSON.stringify(this.userData)!=="{}"&&(n.userData=this.userData),t||(e.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(e){if(this.mapping!==os)return e;if(e.applyMatrix3(this.matrix),e.x<0||e.x>1)switch(this.wrapS){case xr:e.x=e.x-Math.floor(e.x);break;case Tt:e.x=e.x<0?0:1;break;case _r:Math.abs(Math.floor(e.x)%2)===1?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x);break}if(e.y<0||e.y>1)switch(this.wrapT){case xr:e.y=e.y-Math.floor(e.y);break;case Tt:e.y=e.y<0?0:1;break;case _r:Math.abs(Math.floor(e.y)%2)===1?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y);break}return this.flipY&&(e.y=1-e.y),e}set needsUpdate(e){e===!0&&(this.version++,this.source.needsUpdate=!0)}}ut.DEFAULT_IMAGE=null;ut.DEFAULT_MAPPING=os;ut.prototype.isTexture=!0;class qe{constructor(e=0,t=0,n=0,i=1){this.x=e,this.y=t,this.z=n,this.w=i}get width(){return this.z}set width(e){this.z=e}get height(){return this.w}set height(e){this.w=e}set(e,t,n,i){return this.x=e,this.y=t,this.z=n,this.w=i,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this.w=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setW(e){return this.w=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=e.w!==void 0?e.w:1,this}add(e,t){return t!==void 0?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this)}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this}sub(e,t){return t!==void 0?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this)}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this.w*=e.w,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this}applyMatrix4(e){const t=this.x,n=this.y,i=this.z,s=this.w,o=e.elements;return this.x=o[0]*t+o[4]*n+o[8]*i+o[12]*s,this.y=o[1]*t+o[5]*n+o[9]*i+o[13]*s,this.z=o[2]*t+o[6]*n+o[10]*i+o[14]*s,this.w=o[3]*t+o[7]*n+o[11]*i+o[15]*s,this}divideScalar(e){return this.multiplyScalar(1/e)}setAxisAngleFromQuaternion(e){this.w=2*Math.acos(e.w);const t=Math.sqrt(1-e.w*e.w);return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/t,this.y=e.y/t,this.z=e.z/t),this}setAxisAngleFromRotationMatrix(e){let t,n,i,s;const o=.01,a=.1,c=e.elements,h=c[0],u=c[4],d=c[8],f=c[1],p=c[5],g=c[9],_=c[2],b=c[6],y=c[10];if(Math.abs(u-f)<o&&Math.abs(d-_)<o&&Math.abs(g-b)<o){if(Math.abs(u+f)<a&&Math.abs(d+_)<a&&Math.abs(g+b)<a&&Math.abs(h+p+y-3)<a)return this.set(1,0,0,0),this;t=Math.PI;const T=(h+1)/2,E=(p+1)/2,S=(y+1)/2,D=(u+f)/4,U=(d+_)/4,N=(g+b)/4;return T>E&&T>S?T<o?(n=0,i=.707106781,s=.707106781):(n=Math.sqrt(T),i=D/n,s=U/n):E>S?E<o?(n=.707106781,i=0,s=.707106781):(i=Math.sqrt(E),n=D/i,s=N/i):S<o?(n=.707106781,i=.707106781,s=0):(s=Math.sqrt(S),n=U/s,i=N/s),this.set(n,i,s,t),this}let m=Math.sqrt((b-g)*(b-g)+(d-_)*(d-_)+(f-u)*(f-u));return Math.abs(m)<.001&&(m=1),this.x=(b-g)/m,this.y=(d-_)/m,this.z=(f-u)/m,this.w=Math.acos((h+p+y-1)/2),this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this.w=Math.max(e.w,Math.min(t.w,this.w)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this.w=Math.max(e,Math.min(t,this.w)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this.w=e.w+(t.w-e.w)*n,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e}fromBufferAttribute(e,t,n){return n!==void 0&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this.w=e.getW(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}qe.prototype.isVector4=!0;class At extends Mn{constructor(e,t,n={}){super();this.width=e,this.height=t,this.depth=1,this.scissor=new qe(0,0,e,t),this.scissorTest=!1,this.viewport=new qe(0,0,e,t);const i={width:e,height:t,depth:1};this.texture=new ut(i,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.encoding),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=n.generateMipmaps!==void 0?n.generateMipmaps:!1,this.texture.internalFormat=n.internalFormat!==void 0?n.internalFormat:null,this.texture.minFilter=n.minFilter!==void 0?n.minFilter:et,this.depthBuffer=n.depthBuffer!==void 0?n.depthBuffer:!0,this.stencilBuffer=n.stencilBuffer!==void 0?n.stencilBuffer:!1,this.depthTexture=n.depthTexture!==void 0?n.depthTexture:null,this.samples=n.samples!==void 0?n.samples:0}setSize(e,t,n=1){(this.width!==e||this.height!==t||this.depth!==n)&&(this.width=e,this.height=t,this.depth=n,this.texture.image.width=e,this.texture.image.height=t,this.texture.image.depth=n,this.dispose()),this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)}clone(){return new this.constructor().copy(this)}copy(e){return this.width=e.width,this.height=e.height,this.depth=e.depth,this.viewport.copy(e.viewport),this.texture=e.texture.clone(),this.texture.image=Object.assign({},e.texture.image),this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,e.depthTexture!==null&&(this.depthTexture=e.depthTexture.clone()),this.samples=e.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}At.prototype.isWebGLRenderTarget=!0;class Pi extends ut{constructor(e=null,t=1,n=1,i=1){super(null);this.image={data:e,width:t,height:n,depth:i},this.magFilter=ht,this.minFilter=ht,this.wrapR=Tt,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}Pi.prototype.isDataArrayTexture=!0;class Zc extends At{constructor(e,t,n){super(e,t);this.depth=n,this.texture=new Pi(null,e,t,n),this.texture.isRenderTargetTexture=!0}}Zc.prototype.isWebGLArrayRenderTarget=!0;class Ar extends ut{constructor(e=null,t=1,n=1,i=1){super(null);this.image={data:e,width:t,height:n,depth:i},this.magFilter=ht,this.minFilter=ht,this.wrapR=Tt,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}Ar.prototype.isData3DTexture=!0;class Jc extends At{constructor(e,t,n){super(e,t);this.depth=n,this.texture=new Ar(null,e,t,n),this.texture.isRenderTargetTexture=!0}}Jc.prototype.isWebGL3DRenderTarget=!0;class $c extends At{constructor(e,t,n,i={}){super(e,t,i);const s=this.texture;this.texture=[];for(let o=0;o<n;o++)this.texture[o]=s.clone()}setSize(e,t,n=1){if(this.width!==e||this.height!==t||this.depth!==n){this.width=e,this.height=t,this.depth=n;for(let i=0,s=this.texture.length;i<s;i++)this.texture[i].image.width=e,this.texture[i].image.height=t,this.texture[i].image.depth=n;this.dispose()}return this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t),this}copy(e){this.dispose(),this.width=e.width,this.height=e.height,this.depth=e.depth,this.viewport.set(0,0,this.width,this.height),this.scissor.set(0,0,this.width,this.height),this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,this.depthTexture=e.depthTexture,this.texture.length=0;for(let t=0,n=e.texture.length;t<n;t++)this.texture[t]=e.texture[t].clone();return this}}$c.prototype.isWebGLMultipleRenderTargets=!0;class vt{constructor(e=0,t=0,n=0,i=1){this._x=e,this._y=t,this._z=n,this._w=i}static slerp(e,t,n,i){return console.warn("THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead."),n.slerpQuaternions(e,t,i)}static slerpFlat(e,t,n,i,s,o,a){let c=n[i+0],h=n[i+1],u=n[i+2],d=n[i+3];const f=s[o+0],p=s[o+1],g=s[o+2],_=s[o+3];if(a===0){e[t+0]=c,e[t+1]=h,e[t+2]=u,e[t+3]=d;return}if(a===1){e[t+0]=f,e[t+1]=p,e[t+2]=g,e[t+3]=_;return}if(d!==_||c!==f||h!==p||u!==g){let b=1-a;const y=c*f+h*p+u*g+d*_,m=y>=0?1:-1,T=1-y*y;if(T>Number.EPSILON){const S=Math.sqrt(T),D=Math.atan2(S,y*m);b=Math.sin(b*D)/S,a=Math.sin(a*D)/S}const E=a*m;if(c=c*b+f*E,h=h*b+p*E,u=u*b+g*E,d=d*b+_*E,b===1-a){const S=1/Math.sqrt(c*c+h*h+u*u+d*d);c*=S,h*=S,u*=S,d*=S}}e[t]=c,e[t+1]=h,e[t+2]=u,e[t+3]=d}static multiplyQuaternionsFlat(e,t,n,i,s,o){const a=n[i],c=n[i+1],h=n[i+2],u=n[i+3],d=s[o],f=s[o+1],p=s[o+2],g=s[o+3];return e[t]=a*g+u*d+c*p-h*f,e[t+1]=c*g+u*f+h*d-a*p,e[t+2]=h*g+u*p+a*f-c*d,e[t+3]=u*g-a*d-c*f-h*p,e}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get w(){return this._w}set w(e){this._w=e,this._onChangeCallback()}set(e,t,n,i){return this._x=e,this._y=t,this._z=n,this._w=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this._onChangeCallback(),this}setFromEuler(e,t){if(!(e&&e.isEuler))throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");const n=e._x,i=e._y,s=e._z,o=e._order,a=Math.cos,c=Math.sin,h=a(n/2),u=a(i/2),d=a(s/2),f=c(n/2),p=c(i/2),g=c(s/2);switch(o){case"XYZ":this._x=f*u*d+h*p*g,this._y=h*p*d-f*u*g,this._z=h*u*g+f*p*d,this._w=h*u*d-f*p*g;break;case"YXZ":this._x=f*u*d+h*p*g,this._y=h*p*d-f*u*g,this._z=h*u*g-f*p*d,this._w=h*u*d+f*p*g;break;case"ZXY":this._x=f*u*d-h*p*g,this._y=h*p*d+f*u*g,this._z=h*u*g+f*p*d,this._w=h*u*d-f*p*g;break;case"ZYX":this._x=f*u*d-h*p*g,this._y=h*p*d+f*u*g,this._z=h*u*g-f*p*d,this._w=h*u*d+f*p*g;break;case"YZX":this._x=f*u*d+h*p*g,this._y=h*p*d+f*u*g,this._z=h*u*g-f*p*d,this._w=h*u*d-f*p*g;break;case"XZY":this._x=f*u*d-h*p*g,this._y=h*p*d-f*u*g,this._z=h*u*g+f*p*d,this._w=h*u*d+f*p*g;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+o)}return t!==!1&&this._onChangeCallback(),this}setFromAxisAngle(e,t){const n=t/2,i=Math.sin(n);return this._x=e.x*i,this._y=e.y*i,this._z=e.z*i,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(e){const t=e.elements,n=t[0],i=t[4],s=t[8],o=t[1],a=t[5],c=t[9],h=t[2],u=t[6],d=t[10],f=n+a+d;if(f>0){const p=.5/Math.sqrt(f+1);this._w=.25/p,this._x=(u-c)*p,this._y=(s-h)*p,this._z=(o-i)*p}else if(n>a&&n>d){const p=2*Math.sqrt(1+n-a-d);this._w=(u-c)/p,this._x=.25*p,this._y=(i+o)/p,this._z=(s+h)/p}else if(a>d){const p=2*Math.sqrt(1+a-n-d);this._w=(s-h)/p,this._x=(i+o)/p,this._y=.25*p,this._z=(c+u)/p}else{const p=2*Math.sqrt(1+d-n-a);this._w=(o-i)/p,this._x=(s+h)/p,this._y=(c+u)/p,this._z=.25*p}return this._onChangeCallback(),this}setFromUnitVectors(e,t){let n=e.dot(t)+1;return n<Number.EPSILON?(n=0,Math.abs(e.x)>Math.abs(e.z)?(this._x=-e.y,this._y=e.x,this._z=0,this._w=n):(this._x=0,this._y=-e.z,this._z=e.y,this._w=n)):(this._x=e.y*t.z-e.z*t.y,this._y=e.z*t.x-e.x*t.z,this._z=e.x*t.y-e.y*t.x,this._w=n),this.normalize()}angleTo(e){return 2*Math.acos(Math.abs(_t(this.dot(e),-1,1)))}rotateTowards(e,t){const n=this.angleTo(e);if(n===0)return this;const i=Math.min(1,t/n);return this.slerp(e,i),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let e=this.length();return e===0?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this._onChangeCallback(),this}multiply(e,t){return t!==void 0?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(e,t)):this.multiplyQuaternions(this,e)}premultiply(e){return this.multiplyQuaternions(e,this)}multiplyQuaternions(e,t){const n=e._x,i=e._y,s=e._z,o=e._w,a=t._x,c=t._y,h=t._z,u=t._w;return this._x=n*u+o*a+i*h-s*c,this._y=i*u+o*c+s*a-n*h,this._z=s*u+o*h+n*c-i*a,this._w=o*u-n*a-i*c-s*h,this._onChangeCallback(),this}slerp(e,t){if(t===0)return this;if(t===1)return this.copy(e);const n=this._x,i=this._y,s=this._z,o=this._w;let a=o*e._w+n*e._x+i*e._y+s*e._z;if(a<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,a=-a):this.copy(e),a>=1)return this._w=o,this._x=n,this._y=i,this._z=s,this;const c=1-a*a;if(c<=Number.EPSILON){const p=1-t;return this._w=p*o+t*this._w,this._x=p*n+t*this._x,this._y=p*i+t*this._y,this._z=p*s+t*this._z,this.normalize(),this._onChangeCallback(),this}const h=Math.sqrt(c),u=Math.atan2(h,a),d=Math.sin((1-t)*u)/h,f=Math.sin(t*u)/h;return this._w=o*d+this._w*f,this._x=n*d+this._x*f,this._y=i*d+this._y*f,this._z=s*d+this._z*f,this._onChangeCallback(),this}slerpQuaternions(e,t,n){return this.copy(e).slerp(t,n)}random(){const e=Math.random(),t=Math.sqrt(1-e),n=Math.sqrt(e),i=2*Math.PI*Math.random(),s=2*Math.PI*Math.random();return this.set(t*Math.cos(i),n*Math.sin(s),n*Math.cos(s),t*Math.sin(i))}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w}fromArray(e,t=0){return this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e}fromBufferAttribute(e,t){return this._x=e.getX(t),this._y=e.getY(t),this._z=e.getZ(t),this._w=e.getW(t),this}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}}vt.prototype.isQuaternion=!0;class L{constructor(e=0,t=0,n=0){this.x=e,this.y=t,this.z=n}set(e,t,n){return n===void 0&&(n=this.z),this.x=e,this.y=t,this.z=n,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this}add(e,t){return t!==void 0?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this.z+=e.z,this)}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this}sub(e,t){return t!==void 0?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this.z-=e.z,this)}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this}multiply(e,t){return t!==void 0?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(e,t)):(this.x*=e.x,this.y*=e.y,this.z*=e.z,this)}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this}multiplyVectors(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this}applyEuler(e){return e&&e.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),this.applyQuaternion(Kc.setFromEuler(e))}applyAxisAngle(e,t){return this.applyQuaternion(Kc.setFromAxisAngle(e,t))}applyMatrix3(e){const t=this.x,n=this.y,i=this.z,s=e.elements;return this.x=s[0]*t+s[3]*n+s[6]*i,this.y=s[1]*t+s[4]*n+s[7]*i,this.z=s[2]*t+s[5]*n+s[8]*i,this}applyNormalMatrix(e){return this.applyMatrix3(e).normalize()}applyMatrix4(e){const t=this.x,n=this.y,i=this.z,s=e.elements,o=1/(s[3]*t+s[7]*n+s[11]*i+s[15]);return this.x=(s[0]*t+s[4]*n+s[8]*i+s[12])*o,this.y=(s[1]*t+s[5]*n+s[9]*i+s[13])*o,this.z=(s[2]*t+s[6]*n+s[10]*i+s[14])*o,this}applyQuaternion(e){const t=this.x,n=this.y,i=this.z,s=e.x,o=e.y,a=e.z,c=e.w,h=c*t+o*i-a*n,u=c*n+a*t-s*i,d=c*i+s*n-o*t,f=-s*t-o*n-a*i;return this.x=h*c+f*-s+u*-a-d*-o,this.y=u*c+f*-o+d*-s-h*-a,this.z=d*c+f*-a+h*-o-u*-s,this}project(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)}unproject(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)}transformDirection(e){const t=this.x,n=this.y,i=this.z,s=e.elements;return this.x=s[0]*t+s[4]*n+s[8]*i,this.y=s[1]*t+s[5]*n+s[9]*i,this.z=s[2]*t+s[6]*n+s[10]*i,this.normalize()}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this}divideScalar(e){return this.multiplyScalar(1/e)}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this}cross(e,t){return t!==void 0?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(e,t)):this.crossVectors(this,e)}crossVectors(e,t){const n=e.x,i=e.y,s=e.z,o=t.x,a=t.y,c=t.z;return this.x=i*c-s*a,this.y=s*o-n*c,this.z=n*a-i*o,this}projectOnVector(e){const t=e.lengthSq();if(t===0)return this.set(0,0,0);const n=e.dot(this)/t;return this.copy(e).multiplyScalar(n)}projectOnPlane(e){return ya.copy(this).projectOnVector(e),this.sub(ya)}reflect(e){return this.sub(ya.copy(e).multiplyScalar(2*this.dot(e)))}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(_t(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y,i=this.z-e.z;return t*t+n*n+i*i}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)}setFromSpherical(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)}setFromSphericalCoords(e,t,n){const i=Math.sin(t)*e;return this.x=i*Math.sin(n),this.y=Math.cos(t)*e,this.z=i*Math.cos(n),this}setFromCylindrical(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)}setFromCylindricalCoords(e,t,n){return this.x=e*Math.sin(t),this.y=n,this.z=e*Math.cos(t),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this}setFromMatrixScale(e){const t=this.setFromMatrixColumn(e,0).length(),n=this.setFromMatrixColumn(e,1).length(),i=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=n,this.z=i,this}setFromMatrixColumn(e,t){return this.fromArray(e.elements,t*4)}setFromMatrix3Column(e,t){return this.fromArray(e.elements,t*3)}setFromEuler(e){return this.x=e._x,this.y=e._y,this.z=e._z,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e}fromBufferAttribute(e,t,n){return n!==void 0&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const e=(Math.random()-.5)*2,t=Math.random()*Math.PI*2,n=Math.sqrt(1-e**2);return this.x=n*Math.cos(t),this.y=n*Math.sin(t),this.z=e,this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}L.prototype.isVector3=!0;const ya=new L,Kc=new vt;class It{constructor(e=new L(1/0,1/0,1/0),t=new L(-1/0,-1/0,-1/0)){this.min=e,this.max=t}set(e,t){return this.min.copy(e),this.max.copy(t),this}setFromArray(e){let t=1/0,n=1/0,i=1/0,s=-1/0,o=-1/0,a=-1/0;for(let c=0,h=e.length;c<h;c+=3){const u=e[c],d=e[c+1],f=e[c+2];u<t&&(t=u),d<n&&(n=d),f<i&&(i=f),u>s&&(s=u),d>o&&(o=d),f>a&&(a=f)}return this.min.set(t,n,i),this.max.set(s,o,a),this}setFromBufferAttribute(e){let t=1/0,n=1/0,i=1/0,s=-1/0,o=-1/0,a=-1/0;for(let c=0,h=e.count;c<h;c++){const u=e.getX(c),d=e.getY(c),f=e.getZ(c);u<t&&(t=u),d<n&&(n=d),f<i&&(i=f),u>s&&(s=u),d>o&&(o=d),f>a&&(a=f)}return this.min.set(t,n,i),this.max.set(s,o,a),this}setFromPoints(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t++)this.expandByPoint(e[t]);return this}setFromCenterAndSize(e,t){const n=Kn.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(n),this.max.copy(e).add(n),this}setFromObject(e,t=!1){return this.makeEmpty(),this.expandByObject(e,t)}clone(){return new this.constructor().copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(e){return this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}expandByObject(e,t=!1){e.updateWorldMatrix(!1,!1);const n=e.geometry;if(n!==void 0)if(t&&n.attributes!=null&&n.attributes.position!==void 0){const s=n.attributes.position;for(let o=0,a=s.count;o<a;o++)Kn.fromBufferAttribute(s,o).applyMatrix4(e.matrixWorld),this.expandByPoint(Kn)}else n.boundingBox===null&&n.computeBoundingBox(),xa.copy(n.boundingBox),xa.applyMatrix4(e.matrixWorld),this.union(xa);const i=e.children;for(let s=0,o=i.length;s<o;s++)this.expandByObject(i[s],t);return this}containsPoint(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y||e.z<this.min.z||e.z>this.max.z)}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z}getParameter(e,t){return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y||e.max.z<this.min.z||e.min.z>this.max.z)}intersectsSphere(e){return this.clampPoint(e.center,Kn),Kn.distanceToSquared(e.center)<=e.radius*e.radius}intersectsPlane(e){let t,n;return e.normal.x>0?(t=e.normal.x*this.min.x,n=e.normal.x*this.max.x):(t=e.normal.x*this.max.x,n=e.normal.x*this.min.x),e.normal.y>0?(t+=e.normal.y*this.min.y,n+=e.normal.y*this.max.y):(t+=e.normal.y*this.max.y,n+=e.normal.y*this.min.y),e.normal.z>0?(t+=e.normal.z*this.min.z,n+=e.normal.z*this.max.z):(t+=e.normal.z*this.max.z,n+=e.normal.z*this.min.z),t<=-e.constant&&n>=-e.constant}intersectsTriangle(e){if(this.isEmpty())return!1;this.getCenter(Rr),vs.subVectors(this.max,Rr),Ii.subVectors(e.a,Rr),Di.subVectors(e.b,Rr),Fi.subVectors(e.c,Rr),bn.subVectors(Di,Ii),En.subVectors(Fi,Di),jn.subVectors(Ii,Fi);let t=[0,-bn.z,bn.y,0,-En.z,En.y,0,-jn.z,jn.y,bn.z,0,-bn.x,En.z,0,-En.x,jn.z,0,-jn.x,-bn.y,bn.x,0,-En.y,En.x,0,-jn.y,jn.x,0];return!_a(t,Ii,Di,Fi,vs)||(t=[1,0,0,0,1,0,0,0,1],!_a(t,Ii,Di,Fi,vs))?!1:(Ms.crossVectors(bn,En),t=[Ms.x,Ms.y,Ms.z],_a(t,Ii,Di,Fi,vs))}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return Kn.copy(e).clamp(this.min,this.max).sub(e).length()}getBoundingSphere(e){return this.getCenter(e.center),e.radius=this.getSize(Kn).length()*.5,e}intersect(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}applyMatrix4(e){return this.isEmpty()?this:(on[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e),on[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e),on[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e),on[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e),on[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e),on[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e),on[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e),on[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e),this.setFromPoints(on),this)}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}It.prototype.isBox3=!0;const on=[new L,new L,new L,new L,new L,new L,new L,new L],Kn=new L,xa=new It,Ii=new L,Di=new L,Fi=new L,bn=new L,En=new L,jn=new L,Rr=new L,vs=new L,Ms=new L,Qn=new L;function _a(r,e,t,n,i){for(let s=0,o=r.length-3;s<=o;s+=3){Qn.fromArray(r,s);const a=i.x*Math.abs(Qn.x)+i.y*Math.abs(Qn.y)+i.z*Math.abs(Qn.z),c=e.dot(Qn),h=t.dot(Qn),u=n.dot(Qn);if(Math.max(-Math.max(c,h,u),Math.min(c,h,u))>a)return!1}return!0}const Nf=new It,jc=new L,ws=new L,va=new L;class Sn{constructor(e=new L,t=-1){this.center=e,this.radius=t}set(e,t){return this.center.copy(e),this.radius=t,this}setFromPoints(e,t){const n=this.center;t!==void 0?n.copy(t):Nf.setFromPoints(e).getCenter(n);let i=0;for(let s=0,o=e.length;s<o;s++)i=Math.max(i,n.distanceToSquared(e[s]));return this.radius=Math.sqrt(i),this}copy(e){return this.center.copy(e.center),this.radius=e.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(e){return e.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(e){return e.distanceTo(this.center)-this.radius}intersectsSphere(e){const t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t}intersectsBox(e){return e.intersectsSphere(this)}intersectsPlane(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius}clampPoint(e,t){const n=this.center.distanceToSquared(e);return t.copy(e),n>this.radius*this.radius&&(t.sub(this.center).normalize(),t.multiplyScalar(this.radius).add(this.center)),t}getBoundingBox(e){return this.isEmpty()?(e.makeEmpty(),e):(e.set(this.center,this.center),e.expandByScalar(this.radius),e)}applyMatrix4(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this}translate(e){return this.center.add(e),this}expandByPoint(e){va.subVectors(e,this.center);const t=va.lengthSq();if(t>this.radius*this.radius){const n=Math.sqrt(t),i=(n-this.radius)*.5;this.center.add(va.multiplyScalar(i/n)),this.radius+=i}return this}union(e){return this.center.equals(e.center)===!0?ws.set(0,0,1).multiplyScalar(e.radius):ws.subVectors(e.center,this.center).normalize().multiplyScalar(e.radius),this.expandByPoint(jc.copy(e.center).add(ws)),this.expandByPoint(jc.copy(e.center).sub(ws)),this}equals(e){return e.center.equals(this.center)&&e.radius===this.radius}clone(){return new this.constructor().copy(this)}}const an=new L,Ma=new L,bs=new L,Tn=new L,wa=new L,Es=new L,ba=new L;class An{constructor(e=new L,t=new L(0,0,-1)){this.origin=e,this.direction=t}set(e,t){return this.origin.copy(e),this.direction.copy(t),this}copy(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this}at(e,t){return t.copy(this.direction).multiplyScalar(e).add(this.origin)}lookAt(e){return this.direction.copy(e).sub(this.origin).normalize(),this}recast(e){return this.origin.copy(this.at(e,an)),this}closestPointToPoint(e,t){t.subVectors(e,this.origin);const n=t.dot(this.direction);return n<0?t.copy(this.origin):t.copy(this.direction).multiplyScalar(n).add(this.origin)}distanceToPoint(e){return Math.sqrt(this.distanceSqToPoint(e))}distanceSqToPoint(e){const t=an.subVectors(e,this.origin).dot(this.direction);return t<0?this.origin.distanceToSquared(e):(an.copy(this.direction).multiplyScalar(t).add(this.origin),an.distanceToSquared(e))}distanceSqToSegment(e,t,n,i){Ma.copy(e).add(t).multiplyScalar(.5),bs.copy(t).sub(e).normalize(),Tn.copy(this.origin).sub(Ma);const s=e.distanceTo(t)*.5,o=-this.direction.dot(bs),a=Tn.dot(this.direction),c=-Tn.dot(bs),h=Tn.lengthSq(),u=Math.abs(1-o*o);let d,f,p,g;if(u>0)if(d=o*c-a,f=o*a-c,g=s*u,d>=0)if(f>=-g)if(f<=g){const _=1/u;d*=_,f*=_,p=d*(d+o*f+2*a)+f*(o*d+f+2*c)+h}else f=s,d=Math.max(0,-(o*f+a)),p=-d*d+f*(f+2*c)+h;else f=-s,d=Math.max(0,-(o*f+a)),p=-d*d+f*(f+2*c)+h;else f<=-g?(d=Math.max(0,-(-o*s+a)),f=d>0?-s:Math.min(Math.max(-s,-c),s),p=-d*d+f*(f+2*c)+h):f<=g?(d=0,f=Math.min(Math.max(-s,-c),s),p=f*(f+2*c)+h):(d=Math.max(0,-(o*s+a)),f=d>0?s:Math.min(Math.max(-s,-c),s),p=-d*d+f*(f+2*c)+h);else f=o>0?-s:s,d=Math.max(0,-(o*f+a)),p=-d*d+f*(f+2*c)+h;return n&&n.copy(this.direction).multiplyScalar(d).add(this.origin),i&&i.copy(bs).multiplyScalar(f).add(Ma),p}intersectSphere(e,t){an.subVectors(e.center,this.origin);const n=an.dot(this.direction),i=an.dot(an)-n*n,s=e.radius*e.radius;if(i>s)return null;const o=Math.sqrt(s-i),a=n-o,c=n+o;return a<0&&c<0?null:a<0?this.at(c,t):this.at(a,t)}intersectsSphere(e){return this.distanceSqToPoint(e.center)<=e.radius*e.radius}distanceToPlane(e){const t=e.normal.dot(this.direction);if(t===0)return e.distanceToPoint(this.origin)===0?0:null;const n=-(this.origin.dot(e.normal)+e.constant)/t;return n>=0?n:null}intersectPlane(e,t){const n=this.distanceToPlane(e);return n===null?null:this.at(n,t)}intersectsPlane(e){const t=e.distanceToPoint(this.origin);return t===0||e.normal.dot(this.direction)*t<0}intersectBox(e,t){let n,i,s,o,a,c;const h=1/this.direction.x,u=1/this.direction.y,d=1/this.direction.z,f=this.origin;return h>=0?(n=(e.min.x-f.x)*h,i=(e.max.x-f.x)*h):(n=(e.max.x-f.x)*h,i=(e.min.x-f.x)*h),u>=0?(s=(e.min.y-f.y)*u,o=(e.max.y-f.y)*u):(s=(e.max.y-f.y)*u,o=(e.min.y-f.y)*u),n>o||s>i||((s>n||n!==n)&&(n=s),(o<i||i!==i)&&(i=o),d>=0?(a=(e.min.z-f.z)*d,c=(e.max.z-f.z)*d):(a=(e.max.z-f.z)*d,c=(e.min.z-f.z)*d),n>c||a>i)||((a>n||n!==n)&&(n=a),(c<i||i!==i)&&(i=c),i<0)?null:this.at(n>=0?n:i,t)}intersectsBox(e){return this.intersectBox(e,an)!==null}intersectTriangle(e,t,n,i,s){wa.subVectors(t,e),Es.subVectors(n,e),ba.crossVectors(wa,Es);let o=this.direction.dot(ba),a;if(o>0){if(i)return null;a=1}else if(o<0)a=-1,o=-o;else return null;Tn.subVectors(this.origin,e);const c=a*this.direction.dot(Es.crossVectors(Tn,Es));if(c<0)return null;const h=a*this.direction.dot(wa.cross(Tn));if(h<0||c+h>o)return null;const u=-a*Tn.dot(ba);return u<0?null:this.at(u/o,s)}applyMatrix4(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this}equals(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class Me{constructor(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}set(e,t,n,i,s,o,a,c,h,u,d,f,p,g,_,b){const y=this.elements;return y[0]=e,y[4]=t,y[8]=n,y[12]=i,y[1]=s,y[5]=o,y[9]=a,y[13]=c,y[2]=h,y[6]=u,y[10]=d,y[14]=f,y[3]=p,y[7]=g,y[11]=_,y[15]=b,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new Me().fromArray(this.elements)}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],this}copyPosition(e){const t=this.elements,n=e.elements;return t[12]=n[12],t[13]=n[13],t[14]=n[14],this}setFromMatrix3(e){const t=e.elements;return this.set(t[0],t[3],t[6],0,t[1],t[4],t[7],0,t[2],t[5],t[8],0,0,0,0,1),this}extractBasis(e,t,n){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(e,t,n){return this.set(e.x,t.x,n.x,0,e.y,t.y,n.y,0,e.z,t.z,n.z,0,0,0,0,1),this}extractRotation(e){const t=this.elements,n=e.elements,i=1/Ui.setFromMatrixColumn(e,0).length(),s=1/Ui.setFromMatrixColumn(e,1).length(),o=1/Ui.setFromMatrixColumn(e,2).length();return t[0]=n[0]*i,t[1]=n[1]*i,t[2]=n[2]*i,t[3]=0,t[4]=n[4]*s,t[5]=n[5]*s,t[6]=n[6]*s,t[7]=0,t[8]=n[8]*o,t[9]=n[9]*o,t[10]=n[10]*o,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromEuler(e){e&&e.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");const t=this.elements,n=e.x,i=e.y,s=e.z,o=Math.cos(n),a=Math.sin(n),c=Math.cos(i),h=Math.sin(i),u=Math.cos(s),d=Math.sin(s);if(e.order==="XYZ"){const f=o*u,p=o*d,g=a*u,_=a*d;t[0]=c*u,t[4]=-c*d,t[8]=h,t[1]=p+g*h,t[5]=f-_*h,t[9]=-a*c,t[2]=_-f*h,t[6]=g+p*h,t[10]=o*c}else if(e.order==="YXZ"){const f=c*u,p=c*d,g=h*u,_=h*d;t[0]=f+_*a,t[4]=g*a-p,t[8]=o*h,t[1]=o*d,t[5]=o*u,t[9]=-a,t[2]=p*a-g,t[6]=_+f*a,t[10]=o*c}else if(e.order==="ZXY"){const f=c*u,p=c*d,g=h*u,_=h*d;t[0]=f-_*a,t[4]=-o*d,t[8]=g+p*a,t[1]=p+g*a,t[5]=o*u,t[9]=_-f*a,t[2]=-o*h,t[6]=a,t[10]=o*c}else if(e.order==="ZYX"){const f=o*u,p=o*d,g=a*u,_=a*d;t[0]=c*u,t[4]=g*h-p,t[8]=f*h+_,t[1]=c*d,t[5]=_*h+f,t[9]=p*h-g,t[2]=-h,t[6]=a*c,t[10]=o*c}else if(e.order==="YZX"){const f=o*c,p=o*h,g=a*c,_=a*h;t[0]=c*u,t[4]=_-f*d,t[8]=g*d+p,t[1]=d,t[5]=o*u,t[9]=-a*u,t[2]=-h*u,t[6]=p*d+g,t[10]=f-_*d}else if(e.order==="XZY"){const f=o*c,p=o*h,g=a*c,_=a*h;t[0]=c*u,t[4]=-d,t[8]=h*u,t[1]=f*d+_,t[5]=o*u,t[9]=p*d-g,t[2]=g*d-p,t[6]=a*u,t[10]=_*d+f}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromQuaternion(e){return this.compose(Of,e,zf)}lookAt(e,t,n){const i=this.elements;return Dt.subVectors(e,t),Dt.lengthSq()===0&&(Dt.z=1),Dt.normalize(),Rn.crossVectors(n,Dt),Rn.lengthSq()===0&&(Math.abs(n.z)===1?Dt.x+=1e-4:Dt.z+=1e-4,Dt.normalize(),Rn.crossVectors(n,Dt)),Rn.normalize(),Ss.crossVectors(Dt,Rn),i[0]=Rn.x,i[4]=Ss.x,i[8]=Dt.x,i[1]=Rn.y,i[5]=Ss.y,i[9]=Dt.y,i[2]=Rn.z,i[6]=Ss.z,i[10]=Dt.z,this}multiply(e,t){return t!==void 0?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(e,t)):this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,i=t.elements,s=this.elements,o=n[0],a=n[4],c=n[8],h=n[12],u=n[1],d=n[5],f=n[9],p=n[13],g=n[2],_=n[6],b=n[10],y=n[14],m=n[3],T=n[7],E=n[11],S=n[15],D=i[0],U=i[4],N=i[8],Z=i[12],z=i[1],A=i[5],F=i[9],G=i[13],W=i[2],q=i[6],X=i[10],J=i[14],k=i[3],Q=i[7],re=i[11],se=i[15];return s[0]=o*D+a*z+c*W+h*k,s[4]=o*U+a*A+c*q+h*Q,s[8]=o*N+a*F+c*X+h*re,s[12]=o*Z+a*G+c*J+h*se,s[1]=u*D+d*z+f*W+p*k,s[5]=u*U+d*A+f*q+p*Q,s[9]=u*N+d*F+f*X+p*re,s[13]=u*Z+d*G+f*J+p*se,s[2]=g*D+_*z+b*W+y*k,s[6]=g*U+_*A+b*q+y*Q,s[10]=g*N+_*F+b*X+y*re,s[14]=g*Z+_*G+b*J+y*se,s[3]=m*D+T*z+E*W+S*k,s[7]=m*U+T*A+E*q+S*Q,s[11]=m*N+T*F+E*X+S*re,s[15]=m*Z+T*G+E*J+S*se,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[4],i=e[8],s=e[12],o=e[1],a=e[5],c=e[9],h=e[13],u=e[2],d=e[6],f=e[10],p=e[14],g=e[3],_=e[7],b=e[11],y=e[15];return g*(+s*c*d-i*h*d-s*a*f+n*h*f+i*a*p-n*c*p)+_*(+t*c*p-t*h*f+s*o*f-i*o*p+i*h*u-s*c*u)+b*(+t*h*d-t*a*p-s*o*d+n*o*p+s*a*u-n*h*u)+y*(-i*a*u-t*c*d+t*a*f+i*o*d-n*o*f+n*c*u)}transpose(){const e=this.elements;let t;return t=e[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this}setPosition(e,t,n){const i=this.elements;return e.isVector3?(i[12]=e.x,i[13]=e.y,i[14]=e.z):(i[12]=e,i[13]=t,i[14]=n),this}invert(){const e=this.elements,t=e[0],n=e[1],i=e[2],s=e[3],o=e[4],a=e[5],c=e[6],h=e[7],u=e[8],d=e[9],f=e[10],p=e[11],g=e[12],_=e[13],b=e[14],y=e[15],m=d*b*h-_*f*h+_*c*p-a*b*p-d*c*y+a*f*y,T=g*f*h-u*b*h-g*c*p+o*b*p+u*c*y-o*f*y,E=u*_*h-g*d*h+g*a*p-o*_*p-u*a*y+o*d*y,S=g*d*c-u*_*c-g*a*f+o*_*f+u*a*b-o*d*b,D=t*m+n*T+i*E+s*S;if(D===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const U=1/D;return e[0]=m*U,e[1]=(_*f*s-d*b*s-_*i*p+n*b*p+d*i*y-n*f*y)*U,e[2]=(a*b*s-_*c*s+_*i*h-n*b*h-a*i*y+n*c*y)*U,e[3]=(d*c*s-a*f*s-d*i*h+n*f*h+a*i*p-n*c*p)*U,e[4]=T*U,e[5]=(u*b*s-g*f*s+g*i*p-t*b*p-u*i*y+t*f*y)*U,e[6]=(g*c*s-o*b*s-g*i*h+t*b*h+o*i*y-t*c*y)*U,e[7]=(o*f*s-u*c*s+u*i*h-t*f*h-o*i*p+t*c*p)*U,e[8]=E*U,e[9]=(g*d*s-u*_*s-g*n*p+t*_*p+u*n*y-t*d*y)*U,e[10]=(o*_*s-g*a*s+g*n*h-t*_*h-o*n*y+t*a*y)*U,e[11]=(u*a*s-o*d*s-u*n*h+t*d*h+o*n*p-t*a*p)*U,e[12]=S*U,e[13]=(u*_*i-g*d*i+g*n*f-t*_*f-u*n*b+t*d*b)*U,e[14]=(g*a*i-o*_*i-g*n*c+t*_*c+o*n*b-t*a*b)*U,e[15]=(o*d*i-u*a*i+u*n*c-t*d*c-o*n*f+t*a*f)*U,this}scale(e){const t=this.elements,n=e.x,i=e.y,s=e.z;return t[0]*=n,t[4]*=i,t[8]*=s,t[1]*=n,t[5]*=i,t[9]*=s,t[2]*=n,t[6]*=i,t[10]*=s,t[3]*=n,t[7]*=i,t[11]*=s,this}getMaxScaleOnAxis(){const e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],n=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],i=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,n,i))}makeTranslation(e,t,n){return this.set(1,0,0,e,0,1,0,t,0,0,1,n,0,0,0,1),this}makeRotationX(e){const t=Math.cos(e),n=Math.sin(e);return this.set(1,0,0,0,0,t,-n,0,0,n,t,0,0,0,0,1),this}makeRotationY(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,0,n,0,0,1,0,0,-n,0,t,0,0,0,0,1),this}makeRotationZ(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,0,n,t,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(e,t){const n=Math.cos(t),i=Math.sin(t),s=1-n,o=e.x,a=e.y,c=e.z,h=s*o,u=s*a;return this.set(h*o+n,h*a-i*c,h*c+i*a,0,h*a+i*c,u*a+n,u*c-i*o,0,h*c-i*a,u*c+i*o,s*c*c+n,0,0,0,0,1),this}makeScale(e,t,n){return this.set(e,0,0,0,0,t,0,0,0,0,n,0,0,0,0,1),this}makeShear(e,t,n,i,s,o){return this.set(1,n,s,0,e,1,o,0,t,i,1,0,0,0,0,1),this}compose(e,t,n){const i=this.elements,s=t._x,o=t._y,a=t._z,c=t._w,h=s+s,u=o+o,d=a+a,f=s*h,p=s*u,g=s*d,_=o*u,b=o*d,y=a*d,m=c*h,T=c*u,E=c*d,S=n.x,D=n.y,U=n.z;return i[0]=(1-(_+y))*S,i[1]=(p+E)*S,i[2]=(g-T)*S,i[3]=0,i[4]=(p-E)*D,i[5]=(1-(f+y))*D,i[6]=(b+m)*D,i[7]=0,i[8]=(g+T)*U,i[9]=(b-m)*U,i[10]=(1-(f+_))*U,i[11]=0,i[12]=e.x,i[13]=e.y,i[14]=e.z,i[15]=1,this}decompose(e,t,n){const i=this.elements;let s=Ui.set(i[0],i[1],i[2]).length();const o=Ui.set(i[4],i[5],i[6]).length(),a=Ui.set(i[8],i[9],i[10]).length();this.determinant()<0&&(s=-s),e.x=i[12],e.y=i[13],e.z=i[14],Ht.copy(this);const h=1/s,u=1/o,d=1/a;return Ht.elements[0]*=h,Ht.elements[1]*=h,Ht.elements[2]*=h,Ht.elements[4]*=u,Ht.elements[5]*=u,Ht.elements[6]*=u,Ht.elements[8]*=d,Ht.elements[9]*=d,Ht.elements[10]*=d,t.setFromRotationMatrix(Ht),n.x=s,n.y=o,n.z=a,this}makePerspective(e,t,n,i,s,o){o===void 0&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");const a=this.elements,c=2*s/(t-e),h=2*s/(n-i),u=(t+e)/(t-e),d=(n+i)/(n-i),f=-(o+s)/(o-s),p=-2*o*s/(o-s);return a[0]=c,a[4]=0,a[8]=u,a[12]=0,a[1]=0,a[5]=h,a[9]=d,a[13]=0,a[2]=0,a[6]=0,a[10]=f,a[14]=p,a[3]=0,a[7]=0,a[11]=-1,a[15]=0,this}makeOrthographic(e,t,n,i,s,o){const a=this.elements,c=1/(t-e),h=1/(n-i),u=1/(o-s),d=(t+e)*c,f=(n+i)*h,p=(o+s)*u;return a[0]=2*c,a[4]=0,a[8]=0,a[12]=-d,a[1]=0,a[5]=2*h,a[9]=0,a[13]=-f,a[2]=0,a[6]=0,a[10]=-2*u,a[14]=-p,a[3]=0,a[7]=0,a[11]=0,a[15]=1,this}equals(e){const t=this.elements,n=e.elements;for(let i=0;i<16;i++)if(t[i]!==n[i])return!1;return!0}fromArray(e,t=0){for(let n=0;n<16;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e[t+9]=n[9],e[t+10]=n[10],e[t+11]=n[11],e[t+12]=n[12],e[t+13]=n[13],e[t+14]=n[14],e[t+15]=n[15],e}}Me.prototype.isMatrix4=!0;const Ui=new L,Ht=new Me,Of=new L(0,0,0),zf=new L(1,1,1),Rn=new L,Ss=new L,Dt=new L,Qc=new Me,eh=new vt;class Cn{constructor(e=0,t=0,n=0,i=Cn.DefaultOrder){this._x=e,this._y=t,this._z=n,this._order=i}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get order(){return this._order}set order(e){this._order=e,this._onChangeCallback()}set(e,t,n,i=this._order){return this._x=e,this._y=t,this._z=n,this._order=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this._onChangeCallback(),this}setFromRotationMatrix(e,t=this._order,n=!0){const i=e.elements,s=i[0],o=i[4],a=i[8],c=i[1],h=i[5],u=i[9],d=i[2],f=i[6],p=i[10];switch(t){case"XYZ":this._y=Math.asin(_t(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(-u,p),this._z=Math.atan2(-o,s)):(this._x=Math.atan2(f,h),this._z=0);break;case"YXZ":this._x=Math.asin(-_t(u,-1,1)),Math.abs(u)<.9999999?(this._y=Math.atan2(a,p),this._z=Math.atan2(c,h)):(this._y=Math.atan2(-d,s),this._z=0);break;case"ZXY":this._x=Math.asin(_t(f,-1,1)),Math.abs(f)<.9999999?(this._y=Math.atan2(-d,p),this._z=Math.atan2(-o,h)):(this._y=0,this._z=Math.atan2(c,s));break;case"ZYX":this._y=Math.asin(-_t(d,-1,1)),Math.abs(d)<.9999999?(this._x=Math.atan2(f,p),this._z=Math.atan2(c,s)):(this._x=0,this._z=Math.atan2(-o,h));break;case"YZX":this._z=Math.asin(_t(c,-1,1)),Math.abs(c)<.9999999?(this._x=Math.atan2(-u,h),this._y=Math.atan2(-d,s)):(this._x=0,this._y=Math.atan2(a,p));break;case"XZY":this._z=Math.asin(-_t(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(f,h),this._y=Math.atan2(a,s)):(this._x=Math.atan2(-u,p),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+t)}return this._order=t,n===!0&&this._onChangeCallback(),this}setFromQuaternion(e,t,n){return Qc.makeRotationFromQuaternion(e),this.setFromRotationMatrix(Qc,t,n)}setFromVector3(e,t=this._order){return this.set(e.x,e.y,e.z,t)}reorder(e){return eh.setFromEuler(this),this.setFromQuaternion(eh,e)}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order}fromArray(e){return this._x=e[0],this._y=e[1],this._z=e[2],e[3]!==void 0&&(this._order=e[3]),this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._order,e}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}}Cn.prototype.isEuler=!0;Cn.DefaultOrder="XYZ";Cn.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"];class Ts{constructor(){this.mask=1|0}set(e){this.mask=(1<<e|0)>>>0}enable(e){this.mask|=1<<e|0}enableAll(){this.mask=4294967295|0}toggle(e){this.mask^=1<<e|0}disable(e){this.mask&=~(1<<e|0)}disableAll(){this.mask=0}test(e){return(this.mask&e.mask)!=0}isEnabled(e){return(this.mask&(1<<e|0))!=0}}let Hf=0;const th=new L,Bi=new vt,ln=new Me,As=new L,Cr=new L,Gf=new L,Vf=new vt,nh=new L(1,0,0),ih=new L(0,1,0),rh=new L(0,0,1),kf={type:"added"},sh={type:"removed"};class Ne extends Mn{constructor(){super();Object.defineProperty(this,"id",{value:Hf++}),this.uuid=Pt(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=Ne.DefaultUp.clone();const e=new L,t=new Cn,n=new vt,i=new L(1,1,1);function s(){n.setFromEuler(t,!1)}function o(){t.setFromQuaternion(n,void 0,!1)}t._onChange(s),n._onChange(o),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:e},rotation:{configurable:!0,enumerable:!0,value:t},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:i},modelViewMatrix:{value:new Me},normalMatrix:{value:new ft}}),this.matrix=new Me,this.matrixWorld=new Me,this.matrixAutoUpdate=Ne.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new Ts,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4(e){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(e),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(e){return this.quaternion.premultiply(e),this}setRotationFromAxisAngle(e,t){this.quaternion.setFromAxisAngle(e,t)}setRotationFromEuler(e){this.quaternion.setFromEuler(e,!0)}setRotationFromMatrix(e){this.quaternion.setFromRotationMatrix(e)}setRotationFromQuaternion(e){this.quaternion.copy(e)}rotateOnAxis(e,t){return Bi.setFromAxisAngle(e,t),this.quaternion.multiply(Bi),this}rotateOnWorldAxis(e,t){return Bi.setFromAxisAngle(e,t),this.quaternion.premultiply(Bi),this}rotateX(e){return this.rotateOnAxis(nh,e)}rotateY(e){return this.rotateOnAxis(ih,e)}rotateZ(e){return this.rotateOnAxis(rh,e)}translateOnAxis(e,t){return th.copy(e).applyQuaternion(this.quaternion),this.position.add(th.multiplyScalar(t)),this}translateX(e){return this.translateOnAxis(nh,e)}translateY(e){return this.translateOnAxis(ih,e)}translateZ(e){return this.translateOnAxis(rh,e)}localToWorld(e){return e.applyMatrix4(this.matrixWorld)}worldToLocal(e){return e.applyMatrix4(ln.copy(this.matrixWorld).invert())}lookAt(e,t,n){e.isVector3?As.copy(e):As.set(e,t,n);const i=this.parent;this.updateWorldMatrix(!0,!1),Cr.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?ln.lookAt(Cr,As,this.up):ln.lookAt(As,Cr,this.up),this.quaternion.setFromRotationMatrix(ln),i&&(ln.extractRotation(i.matrixWorld),Bi.setFromRotationMatrix(ln),this.quaternion.premultiply(Bi.invert()))}add(e){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return e===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",e),this):(e&&e.isObject3D?(e.parent!==null&&e.parent.remove(e),e.parent=this,this.children.push(e),e.dispatchEvent(kf)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e),this)}remove(e){if(arguments.length>1){for(let n=0;n<arguments.length;n++)this.remove(arguments[n]);return this}const t=this.children.indexOf(e);return t!==-1&&(e.parent=null,this.children.splice(t,1),e.dispatchEvent(sh)),this}removeFromParent(){const e=this.parent;return e!==null&&e.remove(this),this}clear(){for(let e=0;e<this.children.length;e++){const t=this.children[e];t.parent=null,t.dispatchEvent(sh)}return this.children.length=0,this}attach(e){return this.updateWorldMatrix(!0,!1),ln.copy(this.matrixWorld).invert(),e.parent!==null&&(e.parent.updateWorldMatrix(!0,!1),ln.multiply(e.parent.matrixWorld)),e.applyMatrix4(ln),this.add(e),e.updateWorldMatrix(!1,!0),this}getObjectById(e){return this.getObjectByProperty("id",e)}getObjectByName(e){return this.getObjectByProperty("name",e)}getObjectByProperty(e,t){if(this[e]===t)return this;for(let n=0,i=this.children.length;n<i;n++){const o=this.children[n].getObjectByProperty(e,t);if(o!==void 0)return o}}getWorldPosition(e){return this.updateWorldMatrix(!0,!1),e.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Cr,e,Gf),e}getWorldScale(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Cr,Vf,e),e}getWorldDirection(e){this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()}raycast(){}traverse(e){e(this);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].traverse(e)}traverseVisible(e){if(this.visible===!1)return;e(this);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].traverseVisible(e)}traverseAncestors(e){const t=this.parent;t!==null&&(e(t),t.traverseAncestors(e))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].updateMatrixWorld(e)}updateWorldMatrix(e,t){const n=this.parent;if(e===!0&&n!==null&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),t===!0){const i=this.children;for(let s=0,o=i.length;s<o;s++)i[s].updateWorldMatrix(!1,!0)}}toJSON(e){const t=e===void 0||typeof e=="string",n={};t&&(e={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},n.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});const i={};i.uuid=this.uuid,i.type=this.type,this.name!==""&&(i.name=this.name),this.castShadow===!0&&(i.castShadow=!0),this.receiveShadow===!0&&(i.receiveShadow=!0),this.visible===!1&&(i.visible=!1),this.frustumCulled===!1&&(i.frustumCulled=!1),this.renderOrder!==0&&(i.renderOrder=this.renderOrder),JSON.stringify(this.userData)!=="{}"&&(i.userData=this.userData),i.layers=this.layers.mask,i.matrix=this.matrix.toArray(),this.matrixAutoUpdate===!1&&(i.matrixAutoUpdate=!1),this.isInstancedMesh&&(i.type="InstancedMesh",i.count=this.count,i.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(i.instanceColor=this.instanceColor.toJSON()));function s(a,c){return a[c.uuid]===void 0&&(a[c.uuid]=c.toJSON(e)),c.uuid}if(this.isScene)this.background&&(this.background.isColor?i.background=this.background.toJSON():this.background.isTexture&&(i.background=this.background.toJSON(e).uuid)),this.environment&&this.environment.isTexture&&(i.environment=this.environment.toJSON(e).uuid);else if(this.isMesh||this.isLine||this.isPoints){i.geometry=s(e.geometries,this.geometry);const a=this.geometry.parameters;if(a!==void 0&&a.shapes!==void 0){const c=a.shapes;if(Array.isArray(c))for(let h=0,u=c.length;h<u;h++){const d=c[h];s(e.shapes,d)}else s(e.shapes,c)}}if(this.isSkinnedMesh&&(i.bindMode=this.bindMode,i.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(s(e.skeletons,this.skeleton),i.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const a=[];for(let c=0,h=this.material.length;c<h;c++)a.push(s(e.materials,this.material[c]));i.material=a}else i.material=s(e.materials,this.material);if(this.children.length>0){i.children=[];for(let a=0;a<this.children.length;a++)i.children.push(this.children[a].toJSON(e).object)}if(this.animations.length>0){i.animations=[];for(let a=0;a<this.animations.length;a++){const c=this.animations[a];i.animations.push(s(e.animations,c))}}if(t){const a=o(e.geometries),c=o(e.materials),h=o(e.textures),u=o(e.images),d=o(e.shapes),f=o(e.skeletons),p=o(e.animations),g=o(e.nodes);a.length>0&&(n.geometries=a),c.length>0&&(n.materials=c),h.length>0&&(n.textures=h),u.length>0&&(n.images=u),d.length>0&&(n.shapes=d),f.length>0&&(n.skeletons=f),p.length>0&&(n.animations=p),g.length>0&&(n.nodes=g)}return n.object=i,n;function o(a){const c=[];for(const h in a){const u=a[h];delete u.metadata,c.push(u)}return c}}clone(e){return new this.constructor().copy(this,e)}copy(e,t=!0){if(this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.rotation.order=e.rotation.order,this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.layers.mask=e.layers.mask,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.userData=JSON.parse(JSON.stringify(e.userData)),t===!0)for(let n=0;n<e.children.length;n++){const i=e.children[n];this.add(i.clone())}return this}}Ne.DefaultUp=new L(0,1,0);Ne.DefaultMatrixAutoUpdate=!0;Ne.prototype.isObject3D=!0;const Gt=new L,cn=new L,Ea=new L,hn=new L,Ni=new L,Oi=new L,oh=new L,Sa=new L,Ta=new L,Aa=new L;class st{constructor(e=new L,t=new L,n=new L){this.a=e,this.b=t,this.c=n}static getNormal(e,t,n,i){i.subVectors(n,t),Gt.subVectors(e,t),i.cross(Gt);const s=i.lengthSq();return s>0?i.multiplyScalar(1/Math.sqrt(s)):i.set(0,0,0)}static getBarycoord(e,t,n,i,s){Gt.subVectors(i,t),cn.subVectors(n,t),Ea.subVectors(e,t);const o=Gt.dot(Gt),a=Gt.dot(cn),c=Gt.dot(Ea),h=cn.dot(cn),u=cn.dot(Ea),d=o*h-a*a;if(d===0)return s.set(-2,-1,-1);const f=1/d,p=(h*c-a*u)*f,g=(o*u-a*c)*f;return s.set(1-p-g,g,p)}static containsPoint(e,t,n,i){return this.getBarycoord(e,t,n,i,hn),hn.x>=0&&hn.y>=0&&hn.x+hn.y<=1}static getUV(e,t,n,i,s,o,a,c){return this.getBarycoord(e,t,n,i,hn),c.set(0,0),c.addScaledVector(s,hn.x),c.addScaledVector(o,hn.y),c.addScaledVector(a,hn.z),c}static isFrontFacing(e,t,n,i){return Gt.subVectors(n,t),cn.subVectors(e,t),Gt.cross(cn).dot(i)<0}set(e,t,n){return this.a.copy(e),this.b.copy(t),this.c.copy(n),this}setFromPointsAndIndices(e,t,n,i){return this.a.copy(e[t]),this.b.copy(e[n]),this.c.copy(e[i]),this}setFromAttributeAndIndices(e,t,n,i){return this.a.fromBufferAttribute(e,t),this.b.fromBufferAttribute(e,n),this.c.fromBufferAttribute(e,i),this}clone(){return new this.constructor().copy(this)}copy(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this}getArea(){return Gt.subVectors(this.c,this.b),cn.subVectors(this.a,this.b),Gt.cross(cn).length()*.5}getMidpoint(e){return e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(e){return st.getNormal(this.a,this.b,this.c,e)}getPlane(e){return e.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(e,t){return st.getBarycoord(e,this.a,this.b,this.c,t)}getUV(e,t,n,i,s){return st.getUV(e,this.a,this.b,this.c,t,n,i,s)}containsPoint(e){return st.containsPoint(e,this.a,this.b,this.c)}isFrontFacing(e){return st.isFrontFacing(this.a,this.b,this.c,e)}intersectsBox(e){return e.intersectsTriangle(this)}closestPointToPoint(e,t){const n=this.a,i=this.b,s=this.c;let o,a;Ni.subVectors(i,n),Oi.subVectors(s,n),Sa.subVectors(e,n);const c=Ni.dot(Sa),h=Oi.dot(Sa);if(c<=0&&h<=0)return t.copy(n);Ta.subVectors(e,i);const u=Ni.dot(Ta),d=Oi.dot(Ta);if(u>=0&&d<=u)return t.copy(i);const f=c*d-u*h;if(f<=0&&c>=0&&u<=0)return o=c/(c-u),t.copy(n).addScaledVector(Ni,o);Aa.subVectors(e,s);const p=Ni.dot(Aa),g=Oi.dot(Aa);if(g>=0&&p<=g)return t.copy(s);const _=p*h-c*g;if(_<=0&&h>=0&&g<=0)return a=h/(h-g),t.copy(n).addScaledVector(Oi,a);const b=u*g-p*d;if(b<=0&&d-u>=0&&p-g>=0)return oh.subVectors(s,i),a=(d-u)/(d-u+(p-g)),t.copy(i).addScaledVector(oh,a);const y=1/(b+_+f);return o=_*y,a=f*y,t.copy(n).addScaledVector(Ni,o).addScaledVector(Oi,a)}equals(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}}let Wf=0;class ot extends Mn{constructor(){super();Object.defineProperty(this,"id",{value:Wf++}),this.uuid=Pt(),this.name="",this.type="Material",this.fog=!0,this.blending=Gn,this.side=zn,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.blendSrc=Ho,this.blendDst=Go,this.blendEquation=Vn,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=ss,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=kc,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=ms,this.stencilZFail=ms,this.stencilZPass=ms,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(e){this._alphaTest>0!=e>0&&this.version++,this._alphaTest=e}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(e){if(e!==void 0)for(const t in e){const n=e[t];if(n===void 0){console.warn("THREE.Material: '"+t+"' parameter is undefined.");continue}if(t==="shading"){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=n===Fo;continue}const i=this[t];if(i===void 0){console.warn("THREE."+this.type+": '"+t+"' is not a property of this material.");continue}i&&i.isColor?i.set(n):i&&i.isVector3&&n&&n.isVector3?i.copy(n):this[t]=n}}toJSON(e){const t=e===void 0||typeof e=="string";t&&(e={textures:{},images:{}});const n={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};n.uuid=this.uuid,n.type=this.type,this.name!==""&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),this.roughness!==void 0&&(n.roughness=this.roughness),this.metalness!==void 0&&(n.metalness=this.metalness),this.sheen!==void 0&&(n.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(n.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(n.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity&&this.emissiveIntensity!==1&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(n.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(n.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(n.shininess=this.shininess),this.clearcoat!==void 0&&(n.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(e).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(e).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(e).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(e).uuid,n.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(e).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(e).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(e).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(e).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(e).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(n.specularIntensityMap=this.specularIntensityMap.toJSON(e).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(n.specularColorMap=this.specularColorMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(e).uuid,this.combine!==void 0&&(n.combine=this.combine)),this.envMapIntensity!==void 0&&(n.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(n.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(n.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(e).uuid),this.transmission!==void 0&&(n.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(n.transmissionMap=this.transmissionMap.toJSON(e).uuid),this.thickness!==void 0&&(n.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(n.thicknessMap=this.thicknessMap.toJSON(e).uuid),this.attenuationDistance!==void 0&&(n.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(n.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(n.size=this.size),this.shadowSide!==null&&(n.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==Gn&&(n.blending=this.blending),this.side!==zn&&(n.side=this.side),this.vertexColors&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),this.transparent===!0&&(n.transparent=this.transparent),n.depthFunc=this.depthFunc,n.depthTest=this.depthTest,n.depthWrite=this.depthWrite,n.colorWrite=this.colorWrite,n.stencilWrite=this.stencilWrite,n.stencilWriteMask=this.stencilWriteMask,n.stencilFunc=this.stencilFunc,n.stencilRef=this.stencilRef,n.stencilFuncMask=this.stencilFuncMask,n.stencilFail=this.stencilFail,n.stencilZFail=this.stencilZFail,n.stencilZPass=this.stencilZPass,this.rotation!==void 0&&this.rotation!==0&&(n.rotation=this.rotation),this.polygonOffset===!0&&(n.polygonOffset=!0),this.polygonOffsetFactor!==0&&(n.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(n.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(n.linewidth=this.linewidth),this.dashSize!==void 0&&(n.dashSize=this.dashSize),this.gapSize!==void 0&&(n.gapSize=this.gapSize),this.scale!==void 0&&(n.scale=this.scale),this.dithering===!0&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),this.alphaToCoverage===!0&&(n.alphaToCoverage=this.alphaToCoverage),this.premultipliedAlpha===!0&&(n.premultipliedAlpha=this.premultipliedAlpha),this.wireframe===!0&&(n.wireframe=this.wireframe),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(n.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(n.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(n.flatShading=this.flatShading),this.visible===!1&&(n.visible=!1),this.toneMapped===!1&&(n.toneMapped=!1),JSON.stringify(this.userData)!=="{}"&&(n.userData=this.userData);function i(s){const o=[];for(const a in s){const c=s[a];delete c.metadata,o.push(c)}return o}if(t){const s=i(e.textures),o=i(e.images);s.length>0&&(n.textures=s),o.length>0&&(n.images=o)}return n}clone(){return new this.constructor().copy(this)}copy(e){this.name=e.name,this.fog=e.fog,this.blending=e.blending,this.side=e.side,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.stencilWriteMask=e.stencilWriteMask,this.stencilFunc=e.stencilFunc,this.stencilRef=e.stencilRef,this.stencilFuncMask=e.stencilFuncMask,this.stencilFail=e.stencilFail,this.stencilZFail=e.stencilZFail,this.stencilZPass=e.stencilZPass,this.stencilWrite=e.stencilWrite;const t=e.clippingPlanes;let n=null;if(t!==null){const i=t.length;n=new Array(i);for(let s=0;s!==i;++s)n[s]=t[s].clone()}return this.clippingPlanes=n,this.clipIntersection=e.clipIntersection,this.clipShadows=e.clipShadows,this.shadowSide=e.shadowSide,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.dithering=e.dithering,this.alphaTest=e.alphaTest,this.alphaToCoverage=e.alphaToCoverage,this.premultipliedAlpha=e.premultipliedAlpha,this.visible=e.visible,this.toneMapped=e.toneMapped,this.userData=JSON.parse(JSON.stringify(e.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(e){e===!0&&this.version++}}ot.prototype.isMaterial=!0;ot.fromType=function(){return null};class un extends ot{constructor(e){super();this.type="MeshBasicMaterial",this.color=new ge(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=pr,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this}}un.prototype.isMeshBasicMaterial=!0;const Ke=new L,Rs=new te;class He{constructor(e,t,n){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.name="",this.array=e,this.itemSize=t,this.count=e!==void 0?e.length/t:0,this.normalized=n===!0,this.usage=Si,this.updateRange={offset:0,count:-1},this.version=0}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}copy(e){return this.name=e.name,this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.count=e.count,this.normalized=e.normalized,this.usage=e.usage,this}copyAt(e,t,n){e*=this.itemSize,n*=t.itemSize;for(let i=0,s=this.itemSize;i<s;i++)this.array[e+i]=t.array[n+i];return this}copyArray(e){return this.array.set(e),this}copyColorsArray(e){const t=this.array;let n=0;for(let i=0,s=e.length;i<s;i++){let o=e[i];o===void 0&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",i),o=new ge),t[n++]=o.r,t[n++]=o.g,t[n++]=o.b}return this}copyVector2sArray(e){const t=this.array;let n=0;for(let i=0,s=e.length;i<s;i++){let o=e[i];o===void 0&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",i),o=new te),t[n++]=o.x,t[n++]=o.y}return this}copyVector3sArray(e){const t=this.array;let n=0;for(let i=0,s=e.length;i<s;i++){let o=e[i];o===void 0&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",i),o=new L),t[n++]=o.x,t[n++]=o.y,t[n++]=o.z}return this}copyVector4sArray(e){const t=this.array;let n=0;for(let i=0,s=e.length;i<s;i++){let o=e[i];o===void 0&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",i),o=new qe),t[n++]=o.x,t[n++]=o.y,t[n++]=o.z,t[n++]=o.w}return this}applyMatrix3(e){if(this.itemSize===2)for(let t=0,n=this.count;t<n;t++)Rs.fromBufferAttribute(this,t),Rs.applyMatrix3(e),this.setXY(t,Rs.x,Rs.y);else if(this.itemSize===3)for(let t=0,n=this.count;t<n;t++)Ke.fromBufferAttribute(this,t),Ke.applyMatrix3(e),this.setXYZ(t,Ke.x,Ke.y,Ke.z);return this}applyMatrix4(e){for(let t=0,n=this.count;t<n;t++)Ke.x=this.getX(t),Ke.y=this.getY(t),Ke.z=this.getZ(t),Ke.applyMatrix4(e),this.setXYZ(t,Ke.x,Ke.y,Ke.z);return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++)Ke.x=this.getX(t),Ke.y=this.getY(t),Ke.z=this.getZ(t),Ke.applyNormalMatrix(e),this.setXYZ(t,Ke.x,Ke.y,Ke.z);return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++)Ke.x=this.getX(t),Ke.y=this.getY(t),Ke.z=this.getZ(t),Ke.transformDirection(e),this.setXYZ(t,Ke.x,Ke.y,Ke.z);return this}set(e,t=0){return this.array.set(e,t),this}getX(e){return this.array[e*this.itemSize]}setX(e,t){return this.array[e*this.itemSize]=t,this}getY(e){return this.array[e*this.itemSize+1]}setY(e,t){return this.array[e*this.itemSize+1]=t,this}getZ(e){return this.array[e*this.itemSize+2]}setZ(e,t){return this.array[e*this.itemSize+2]=t,this}getW(e){return this.array[e*this.itemSize+3]}setW(e,t){return this.array[e*this.itemSize+3]=t,this}setXY(e,t,n){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=n,this}setXYZ(e,t,n,i){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=i,this}setXYZW(e,t,n,i,s){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=i,this.array[e+3]=s,this}onUpload(e){return this.onUploadCallback=e,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const e={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized};return this.name!==""&&(e.name=this.name),this.usage!==Si&&(e.usage=this.usage),(this.updateRange.offset!==0||this.updateRange.count!==-1)&&(e.updateRange=this.updateRange),e}}He.prototype.isBufferAttribute=!0;class ah extends He{constructor(e,t,n){super(new Int8Array(e),t,n)}}class lh extends He{constructor(e,t,n){super(new Uint8Array(e),t,n)}}class ch extends He{constructor(e,t,n){super(new Uint8ClampedArray(e),t,n)}}class hh extends He{constructor(e,t,n){super(new Int16Array(e),t,n)}}class Cs extends He{constructor(e,t,n){super(new Uint16Array(e),t,n)}}class uh extends He{constructor(e,t,n){super(new Int32Array(e),t,n)}}class Ls extends He{constructor(e,t,n){super(new Uint32Array(e),t,n)}}class dh extends He{constructor(e,t,n){super(new Uint16Array(e),t,n)}}dh.prototype.isFloat16BufferAttribute=!0;class ve extends He{constructor(e,t,n){super(new Float32Array(e),t,n)}}class fh extends He{constructor(e,t,n){super(new Float64Array(e),t,n)}}let Xf=0;const Bt=new Me,Ra=new Ne,zi=new L,Ft=new It,Lr=new It,pt=new L;class Se extends Mn{constructor(){super();Object.defineProperty(this,"id",{value:Xf++}),this.uuid=Pt(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(e){return Array.isArray(e)?this.index=new(qc(e)?Ls:Cs)(e,1):this.index=e,this}getAttribute(e){return this.attributes[e]}setAttribute(e,t){return this.attributes[e]=t,this}deleteAttribute(e){return delete this.attributes[e],this}hasAttribute(e){return this.attributes[e]!==void 0}addGroup(e,t,n=0){this.groups.push({start:e,count:t,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(e,t){this.drawRange.start=e,this.drawRange.count=t}applyMatrix4(e){const t=this.attributes.position;t!==void 0&&(t.applyMatrix4(e),t.needsUpdate=!0);const n=this.attributes.normal;if(n!==void 0){const s=new ft().getNormalMatrix(e);n.applyNormalMatrix(s),n.needsUpdate=!0}const i=this.attributes.tangent;return i!==void 0&&(i.transformDirection(e),i.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(e){return Bt.makeRotationFromQuaternion(e),this.applyMatrix4(Bt),this}rotateX(e){return Bt.makeRotationX(e),this.applyMatrix4(Bt),this}rotateY(e){return Bt.makeRotationY(e),this.applyMatrix4(Bt),this}rotateZ(e){return Bt.makeRotationZ(e),this.applyMatrix4(Bt),this}translate(e,t,n){return Bt.makeTranslation(e,t,n),this.applyMatrix4(Bt),this}scale(e,t,n){return Bt.makeScale(e,t,n),this.applyMatrix4(Bt),this}lookAt(e){return Ra.lookAt(e),Ra.updateMatrix(),this.applyMatrix4(Ra.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(zi).negate(),this.translate(zi.x,zi.y,zi.z),this}setFromPoints(e){const t=[];for(let n=0,i=e.length;n<i;n++){const s=e[n];t.push(s.x,s.y,s.z||0)}return this.setAttribute("position",new ve(t,3)),this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new It);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingBox.set(new L(-1/0,-1/0,-1/0),new L(1/0,1/0,1/0));return}if(e!==void 0){if(this.boundingBox.setFromBufferAttribute(e),t)for(let n=0,i=t.length;n<i;n++){const s=t[n];Ft.setFromBufferAttribute(s),this.morphTargetsRelative?(pt.addVectors(this.boundingBox.min,Ft.min),this.boundingBox.expandByPoint(pt),pt.addVectors(this.boundingBox.max,Ft.max),this.boundingBox.expandByPoint(pt)):(this.boundingBox.expandByPoint(Ft.min),this.boundingBox.expandByPoint(Ft.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new Sn);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingSphere.set(new L,1/0);return}if(e){const n=this.boundingSphere.center;if(Ft.setFromBufferAttribute(e),t)for(let s=0,o=t.length;s<o;s++){const a=t[s];Lr.setFromBufferAttribute(a),this.morphTargetsRelative?(pt.addVectors(Ft.min,Lr.min),Ft.expandByPoint(pt),pt.addVectors(Ft.max,Lr.max),Ft.expandByPoint(pt)):(Ft.expandByPoint(Lr.min),Ft.expandByPoint(Lr.max))}Ft.getCenter(n);let i=0;for(let s=0,o=e.count;s<o;s++)pt.fromBufferAttribute(e,s),i=Math.max(i,n.distanceToSquared(pt));if(t)for(let s=0,o=t.length;s<o;s++){const a=t[s],c=this.morphTargetsRelative;for(let h=0,u=a.count;h<u;h++)pt.fromBufferAttribute(a,h),c&&(zi.fromBufferAttribute(e,h),pt.add(zi)),i=Math.max(i,n.distanceToSquared(pt))}this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const e=this.index,t=this.attributes;if(e===null||t.position===void 0||t.normal===void 0||t.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const n=e.array,i=t.position.array,s=t.normal.array,o=t.uv.array,a=i.length/3;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new He(new Float32Array(4*a),4));const c=this.getAttribute("tangent").array,h=[],u=[];for(let z=0;z<a;z++)h[z]=new L,u[z]=new L;const d=new L,f=new L,p=new L,g=new te,_=new te,b=new te,y=new L,m=new L;function T(z,A,F){d.fromArray(i,z*3),f.fromArray(i,A*3),p.fromArray(i,F*3),g.fromArray(o,z*2),_.fromArray(o,A*2),b.fromArray(o,F*2),f.sub(d),p.sub(d),_.sub(g),b.sub(g);const G=1/(_.x*b.y-b.x*_.y);!isFinite(G)||(y.copy(f).multiplyScalar(b.y).addScaledVector(p,-_.y).multiplyScalar(G),m.copy(p).multiplyScalar(_.x).addScaledVector(f,-b.x).multiplyScalar(G),h[z].add(y),h[A].add(y),h[F].add(y),u[z].add(m),u[A].add(m),u[F].add(m))}let E=this.groups;E.length===0&&(E=[{start:0,count:n.length}]);for(let z=0,A=E.length;z<A;++z){const F=E[z],G=F.start,W=F.count;for(let q=G,X=G+W;q<X;q+=3)T(n[q+0],n[q+1],n[q+2])}const S=new L,D=new L,U=new L,N=new L;function Z(z){U.fromArray(s,z*3),N.copy(U);const A=h[z];S.copy(A),S.sub(U.multiplyScalar(U.dot(A))).normalize(),D.crossVectors(N,A);const G=D.dot(u[z])<0?-1:1;c[z*4]=S.x,c[z*4+1]=S.y,c[z*4+2]=S.z,c[z*4+3]=G}for(let z=0,A=E.length;z<A;++z){const F=E[z],G=F.start,W=F.count;for(let q=G,X=G+W;q<X;q+=3)Z(n[q+0]),Z(n[q+1]),Z(n[q+2])}}computeVertexNormals(){const e=this.index,t=this.getAttribute("position");if(t!==void 0){let n=this.getAttribute("normal");if(n===void 0)n=new He(new Float32Array(t.count*3),3),this.setAttribute("normal",n);else for(let f=0,p=n.count;f<p;f++)n.setXYZ(f,0,0,0);const i=new L,s=new L,o=new L,a=new L,c=new L,h=new L,u=new L,d=new L;if(e)for(let f=0,p=e.count;f<p;f+=3){const g=e.getX(f+0),_=e.getX(f+1),b=e.getX(f+2);i.fromBufferAttribute(t,g),s.fromBufferAttribute(t,_),o.fromBufferAttribute(t,b),u.subVectors(o,s),d.subVectors(i,s),u.cross(d),a.fromBufferAttribute(n,g),c.fromBufferAttribute(n,_),h.fromBufferAttribute(n,b),a.add(u),c.add(u),h.add(u),n.setXYZ(g,a.x,a.y,a.z),n.setXYZ(_,c.x,c.y,c.z),n.setXYZ(b,h.x,h.y,h.z)}else for(let f=0,p=t.count;f<p;f+=3)i.fromBufferAttribute(t,f+0),s.fromBufferAttribute(t,f+1),o.fromBufferAttribute(t,f+2),u.subVectors(o,s),d.subVectors(i,s),u.cross(d),n.setXYZ(f+0,u.x,u.y,u.z),n.setXYZ(f+1,u.x,u.y,u.z),n.setXYZ(f+2,u.x,u.y,u.z);this.normalizeNormals(),n.needsUpdate=!0}}merge(e,t){if(!(e&&e.isBufferGeometry)){console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",e);return}t===void 0&&(t=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));const n=this.attributes;for(const i in n){if(e.attributes[i]===void 0)continue;const o=n[i].array,a=e.attributes[i],c=a.array,h=a.itemSize*t,u=Math.min(c.length,o.length-h);for(let d=0,f=h;d<u;d++,f++)o[f]=c[d]}return this}normalizeNormals(){const e=this.attributes.normal;for(let t=0,n=e.count;t<n;t++)pt.fromBufferAttribute(e,t),pt.normalize(),e.setXYZ(t,pt.x,pt.y,pt.z)}toNonIndexed(){function e(a,c){const h=a.array,u=a.itemSize,d=a.normalized,f=new h.constructor(c.length*u);let p=0,g=0;for(let _=0,b=c.length;_<b;_++){a.isInterleavedBufferAttribute?p=c[_]*a.data.stride+a.offset:p=c[_]*u;for(let y=0;y<u;y++)f[g++]=h[p++]}return new He(f,u,d)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const t=new Se,n=this.index.array,i=this.attributes;for(const a in i){const c=i[a],h=e(c,n);t.setAttribute(a,h)}const s=this.morphAttributes;for(const a in s){const c=[],h=s[a];for(let u=0,d=h.length;u<d;u++){const f=h[u],p=e(f,n);c.push(p)}t.morphAttributes[a]=c}t.morphTargetsRelative=this.morphTargetsRelative;const o=this.groups;for(let a=0,c=o.length;a<c;a++){const h=o[a];t.addGroup(h.start,h.count,h.materialIndex)}return t}toJSON(){const e={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,this.name!==""&&(e.name=this.name),Object.keys(this.userData).length>0&&(e.userData=this.userData),this.parameters!==void 0){const c=this.parameters;for(const h in c)c[h]!==void 0&&(e[h]=c[h]);return e}e.data={attributes:{}};const t=this.index;t!==null&&(e.data.index={type:t.array.constructor.name,array:Array.prototype.slice.call(t.array)});const n=this.attributes;for(const c in n){const h=n[c];e.data.attributes[c]=h.toJSON(e.data)}const i={};let s=!1;for(const c in this.morphAttributes){const h=this.morphAttributes[c],u=[];for(let d=0,f=h.length;d<f;d++){const p=h[d];u.push(p.toJSON(e.data))}u.length>0&&(i[c]=u,s=!0)}s&&(e.data.morphAttributes=i,e.data.morphTargetsRelative=this.morphTargetsRelative);const o=this.groups;o.length>0&&(e.data.groups=JSON.parse(JSON.stringify(o)));const a=this.boundingSphere;return a!==null&&(e.data.boundingSphere={center:a.center.toArray(),radius:a.radius}),e}clone(){return new this.constructor().copy(this)}copy(e){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const t={};this.name=e.name;const n=e.index;n!==null&&this.setIndex(n.clone(t));const i=e.attributes;for(const h in i){const u=i[h];this.setAttribute(h,u.clone(t))}const s=e.morphAttributes;for(const h in s){const u=[],d=s[h];for(let f=0,p=d.length;f<p;f++)u.push(d[f].clone(t));this.morphAttributes[h]=u}this.morphTargetsRelative=e.morphTargetsRelative;const o=e.groups;for(let h=0,u=o.length;h<u;h++){const d=o[h];this.addGroup(d.start,d.count,d.materialIndex)}const a=e.boundingBox;a!==null&&(this.boundingBox=a.clone());const c=e.boundingSphere;return c!==null&&(this.boundingSphere=c.clone()),this.drawRange.start=e.drawRange.start,this.drawRange.count=e.drawRange.count,this.userData=e.userData,e.parameters!==void 0&&(this.parameters=Object.assign({},e.parameters)),this}dispose(){this.dispatchEvent({type:"dispose"})}}Se.prototype.isBufferGeometry=!0;const ph=new Me,Hi=new An,Ca=new Sn,Ln=new L,Pn=new L,In=new L,La=new L,Pa=new L,Ia=new L,Ps=new L,Is=new L,Ds=new L,Fs=new te,Us=new te,Bs=new te,Da=new L,Ns=new L;class dt extends Ne{constructor(e=new Se,t=new un){super();this.type="Mesh",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e){return super.copy(e),e.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=e.morphTargetInfluences.slice()),e.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)),this.material=e.material,this.geometry=e.geometry,this}updateMorphTargets(){const e=this.geometry;if(e.isBufferGeometry){const t=e.morphAttributes,n=Object.keys(t);if(n.length>0){const i=t[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let s=0,o=i.length;s<o;s++){const a=i[s].name||String(s);this.morphTargetInfluences.push(0),this.morphTargetDictionary[a]=s}}}}else{const t=e.morphTargets;t!==void 0&&t.length>0&&console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}raycast(e,t){const n=this.geometry,i=this.material,s=this.matrixWorld;if(i===void 0||(n.boundingSphere===null&&n.computeBoundingSphere(),Ca.copy(n.boundingSphere),Ca.applyMatrix4(s),e.ray.intersectsSphere(Ca)===!1)||(ph.copy(s).invert(),Hi.copy(e.ray).applyMatrix4(ph),n.boundingBox!==null&&Hi.intersectsBox(n.boundingBox)===!1))return;let o;if(n.isBufferGeometry){const a=n.index,c=n.attributes.position,h=n.morphAttributes.position,u=n.morphTargetsRelative,d=n.attributes.uv,f=n.attributes.uv2,p=n.groups,g=n.drawRange;if(a!==null)if(Array.isArray(i))for(let _=0,b=p.length;_<b;_++){const y=p[_],m=i[y.materialIndex],T=Math.max(y.start,g.start),E=Math.min(a.count,Math.min(y.start+y.count,g.start+g.count));for(let S=T,D=E;S<D;S+=3){const U=a.getX(S),N=a.getX(S+1),Z=a.getX(S+2);o=Os(this,m,e,Hi,c,h,u,d,f,U,N,Z),o&&(o.faceIndex=Math.floor(S/3),o.face.materialIndex=y.materialIndex,t.push(o))}}else{const _=Math.max(0,g.start),b=Math.min(a.count,g.start+g.count);for(let y=_,m=b;y<m;y+=3){const T=a.getX(y),E=a.getX(y+1),S=a.getX(y+2);o=Os(this,i,e,Hi,c,h,u,d,f,T,E,S),o&&(o.faceIndex=Math.floor(y/3),t.push(o))}}else if(c!==void 0)if(Array.isArray(i))for(let _=0,b=p.length;_<b;_++){const y=p[_],m=i[y.materialIndex],T=Math.max(y.start,g.start),E=Math.min(c.count,Math.min(y.start+y.count,g.start+g.count));for(let S=T,D=E;S<D;S+=3){const U=S,N=S+1,Z=S+2;o=Os(this,m,e,Hi,c,h,u,d,f,U,N,Z),o&&(o.faceIndex=Math.floor(S/3),o.face.materialIndex=y.materialIndex,t.push(o))}}else{const _=Math.max(0,g.start),b=Math.min(c.count,g.start+g.count);for(let y=_,m=b;y<m;y+=3){const T=y,E=y+1,S=y+2;o=Os(this,i,e,Hi,c,h,u,d,f,T,E,S),o&&(o.faceIndex=Math.floor(y/3),t.push(o))}}}else n.isGeometry&&console.error("THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}dt.prototype.isMesh=!0;function qf(r,e,t,n,i,s,o,a){let c;if(e.side===rt?c=n.intersectTriangle(o,s,i,!0,a):c=n.intersectTriangle(i,s,o,e.side!==Hn,a),c===null)return null;Ns.copy(a),Ns.applyMatrix4(r.matrixWorld);const h=t.ray.origin.distanceTo(Ns);return h<t.near||h>t.far?null:{distance:h,point:Ns.clone(),object:r}}function Os(r,e,t,n,i,s,o,a,c,h,u,d){Ln.fromBufferAttribute(i,h),Pn.fromBufferAttribute(i,u),In.fromBufferAttribute(i,d);const f=r.morphTargetInfluences;if(s&&f){Ps.set(0,0,0),Is.set(0,0,0),Ds.set(0,0,0);for(let g=0,_=s.length;g<_;g++){const b=f[g],y=s[g];b!==0&&(La.fromBufferAttribute(y,h),Pa.fromBufferAttribute(y,u),Ia.fromBufferAttribute(y,d),o?(Ps.addScaledVector(La,b),Is.addScaledVector(Pa,b),Ds.addScaledVector(Ia,b)):(Ps.addScaledVector(La.sub(Ln),b),Is.addScaledVector(Pa.sub(Pn),b),Ds.addScaledVector(Ia.sub(In),b)))}Ln.add(Ps),Pn.add(Is),In.add(Ds)}r.isSkinnedMesh&&(r.boneTransform(h,Ln),r.boneTransform(u,Pn),r.boneTransform(d,In));const p=qf(r,e,t,n,Ln,Pn,In,Da);if(p){a&&(Fs.fromBufferAttribute(a,h),Us.fromBufferAttribute(a,u),Bs.fromBufferAttribute(a,d),p.uv=st.getUV(Da,Ln,Pn,In,Fs,Us,Bs,new te)),c&&(Fs.fromBufferAttribute(c,h),Us.fromBufferAttribute(c,u),Bs.fromBufferAttribute(c,d),p.uv2=st.getUV(Da,Ln,Pn,In,Fs,Us,Bs,new te));const g={a:h,b:u,c:d,normal:new L,materialIndex:0};st.getNormal(Ln,Pn,In,g.normal),p.face=g}return p}class dn extends Se{constructor(e=1,t=1,n=1,i=1,s=1,o=1){super();this.type="BoxGeometry",this.parameters={width:e,height:t,depth:n,widthSegments:i,heightSegments:s,depthSegments:o};const a=this;i=Math.floor(i),s=Math.floor(s),o=Math.floor(o);const c=[],h=[],u=[],d=[];let f=0,p=0;g("z","y","x",-1,-1,n,t,e,o,s,0),g("z","y","x",1,-1,n,t,-e,o,s,1),g("x","z","y",1,1,e,n,t,i,o,2),g("x","z","y",1,-1,e,n,-t,i,o,3),g("x","y","z",1,-1,e,t,n,i,s,4),g("x","y","z",-1,-1,e,t,-n,i,s,5),this.setIndex(c),this.setAttribute("position",new ve(h,3)),this.setAttribute("normal",new ve(u,3)),this.setAttribute("uv",new ve(d,2));function g(_,b,y,m,T,E,S,D,U,N,Z){const z=E/U,A=S/N,F=E/2,G=S/2,W=D/2,q=U+1,X=N+1;let J=0,k=0;const Q=new L;for(let re=0;re<X;re++){const se=re*A-G;for(let ae=0;ae<q;ae++){const Ee=ae*z-F;Q[_]=Ee*m,Q[b]=se*T,Q[y]=W,h.push(Q.x,Q.y,Q.z),Q[_]=0,Q[b]=0,Q[y]=D>0?1:-1,u.push(Q.x,Q.y,Q.z),d.push(ae/U),d.push(1-re/N),J+=1}}for(let re=0;re<N;re++)for(let se=0;se<U;se++){const ae=f+se+q*re,Ee=f+se+q*(re+1),ze=f+(se+1)+q*(re+1),be=f+(se+1)+q*re;c.push(ae,Ee,be),c.push(Ee,ze,be),k+=6}a.addGroup(p,k,Z),p+=k,f+=J}}static fromJSON(e){return new dn(e.width,e.height,e.depth,e.widthSegments,e.heightSegments,e.depthSegments)}}function Gi(r){const e={};for(const t in r){e[t]={};for(const n in r[t]){const i=r[t][n];i&&(i.isColor||i.isMatrix3||i.isMatrix4||i.isVector2||i.isVector3||i.isVector4||i.isTexture||i.isQuaternion)?e[t][n]=i.clone():Array.isArray(i)?e[t][n]=i.slice():e[t][n]=i}}return e}function bt(r){const e={};for(let t=0;t<r.length;t++){const n=Gi(r[t]);for(const i in n)e[i]=n[i]}return e}const mh={clone:Gi,merge:bt};var Yf=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,Zf=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;class Nt extends ot{constructor(e){super();this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader=Yf,this.fragmentShader=Zf,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,e!==void 0&&(e.attributes!==void 0&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(e))}copy(e){return super.copy(e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=Gi(e.uniforms),this.defines=Object.assign({},e.defines),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.lights=e.lights,this.clipping=e.clipping,this.extensions=Object.assign({},e.extensions),this.glslVersion=e.glslVersion,this}toJSON(e){const t=super.toJSON(e);t.glslVersion=this.glslVersion,t.uniforms={};for(const i in this.uniforms){const o=this.uniforms[i].value;o&&o.isTexture?t.uniforms[i]={type:"t",value:o.toJSON(e).uuid}:o&&o.isColor?t.uniforms[i]={type:"c",value:o.getHex()}:o&&o.isVector2?t.uniforms[i]={type:"v2",value:o.toArray()}:o&&o.isVector3?t.uniforms[i]={type:"v3",value:o.toArray()}:o&&o.isVector4?t.uniforms[i]={type:"v4",value:o.toArray()}:o&&o.isMatrix3?t.uniforms[i]={type:"m3",value:o.toArray()}:o&&o.isMatrix4?t.uniforms[i]={type:"m4",value:o.toArray()}:t.uniforms[i]={value:o}}Object.keys(this.defines).length>0&&(t.defines=this.defines),t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader;const n={};for(const i in this.extensions)this.extensions[i]===!0&&(n[i]=!0);return Object.keys(n).length>0&&(t.extensions=n),t}}Nt.prototype.isShaderMaterial=!0;class Pr extends Ne{constructor(){super();this.type="Camera",this.matrixWorldInverse=new Me,this.projectionMatrix=new Me,this.projectionMatrixInverse=new Me}copy(e,t){return super.copy(e,t),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this.projectionMatrixInverse.copy(e.projectionMatrixInverse),this}getWorldDirection(e){this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return e.set(-t[8],-t[9],-t[10]).normalize()}updateMatrixWorld(e){super.updateMatrixWorld(e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(e,t){super.updateWorldMatrix(e,t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}Pr.prototype.isCamera=!0;class mt extends Pr{constructor(e=50,t=1,n=.1,i=2e3){super();this.type="PerspectiveCamera",this.fov=e,this.zoom=1,this.near=n,this.far=i,this.focus=10,this.aspect=t,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=e.view===null?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this}setFocalLength(e){const t=.5*this.getFilmHeight()/e;this.fov=Er*2*Math.atan(t),this.updateProjectionMatrix()}getFocalLength(){const e=Math.tan($n*.5*this.fov);return .5*this.getFilmHeight()/e}getEffectiveFOV(){return Er*2*Math.atan(Math.tan($n*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(e,t,n,i,s,o){this.aspect=e/t,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=i,this.view.width=s,this.view.height=o,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=this.near;let t=e*Math.tan($n*.5*this.fov)/this.zoom,n=2*t,i=this.aspect*n,s=-.5*i;const o=this.view;if(this.view!==null&&this.view.enabled){const c=o.fullWidth,h=o.fullHeight;s+=o.offsetX*i/c,t-=o.offsetY*n/h,i*=o.width/c,n*=o.height/h}const a=this.filmOffset;a!==0&&(s+=e*a/this.getFilmWidth()),this.projectionMatrix.makePerspective(s,s+i,t,t-n,e,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,this.view!==null&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}}mt.prototype.isPerspectiveCamera=!0;const Vi=90,ki=1;class zs extends Ne{constructor(e,t,n){super();if(this.type="CubeCamera",n.isWebGLCubeRenderTarget!==!0){console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.");return}this.renderTarget=n;const i=new mt(Vi,ki,e,t);i.layers=this.layers,i.up.set(0,-1,0),i.lookAt(new L(1,0,0)),this.add(i);const s=new mt(Vi,ki,e,t);s.layers=this.layers,s.up.set(0,-1,0),s.lookAt(new L(-1,0,0)),this.add(s);const o=new mt(Vi,ki,e,t);o.layers=this.layers,o.up.set(0,0,1),o.lookAt(new L(0,1,0)),this.add(o);const a=new mt(Vi,ki,e,t);a.layers=this.layers,a.up.set(0,0,-1),a.lookAt(new L(0,-1,0)),this.add(a);const c=new mt(Vi,ki,e,t);c.layers=this.layers,c.up.set(0,-1,0),c.lookAt(new L(0,0,1)),this.add(c);const h=new mt(Vi,ki,e,t);h.layers=this.layers,h.up.set(0,-1,0),h.lookAt(new L(0,0,-1)),this.add(h)}update(e,t){this.parent===null&&this.updateMatrixWorld();const n=this.renderTarget,[i,s,o,a,c,h]=this.children,u=e.xr.enabled,d=e.getRenderTarget();e.xr.enabled=!1;const f=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,e.setRenderTarget(n,0),e.render(t,i),e.setRenderTarget(n,1),e.render(t,s),e.setRenderTarget(n,2),e.render(t,o),e.setRenderTarget(n,3),e.render(t,a),e.setRenderTarget(n,4),e.render(t,c),n.texture.generateMipmaps=f,e.setRenderTarget(n,5),e.render(t,h),e.setRenderTarget(d),e.xr.enabled=u,n.texture.needsPMREMUpdate=!0}}class Wi extends ut{constructor(e,t,n,i,s,o,a,c,h,u){e=e!==void 0?e:[],t=t!==void 0?t:yn;super(e,t,n,i,s,o,a,c,h,u);this.flipY=!1}get images(){return this.image}set images(e){this.image=e}}Wi.prototype.isCubeTexture=!0;class Hs extends At{constructor(e,t={}){super(e,e,t);const n={width:e,height:e,depth:1},i=[n,n,n,n,n,n];this.texture=new Wi(i,t.mapping,t.wrapS,t.wrapT,t.magFilter,t.minFilter,t.format,t.type,t.anisotropy,t.encoding),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=t.generateMipmaps!==void 0?t.generateMipmaps:!1,this.texture.minFilter=t.minFilter!==void 0?t.minFilter:et}fromEquirectangularTexture(e,t){this.texture.type=t.type,this.texture.format=wt,this.texture.encoding=t.encoding,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},i=new dn(5,5,5),s=new Nt({name:"CubemapFromEquirect",uniforms:Gi(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:rt,blending:tn});s.uniforms.tEquirect.value=t;const o=new dt(i,s),a=t.minFilter;return t.minFilter===kn&&(t.minFilter=et),new zs(1,10,this).update(e,o),t.minFilter=a,o.geometry.dispose(),o.material.dispose(),this}clear(e,t,n,i){const s=e.getRenderTarget();for(let o=0;o<6;o++)e.setRenderTarget(this,o),e.clear(t,n,i);e.setRenderTarget(s)}}Hs.prototype.isWebGLCubeRenderTarget=!0;const Fa=new L,Jf=new L,$f=new ft;class Jt{constructor(e=new L(1,0,0),t=0){this.normal=e,this.constant=t}set(e,t){return this.normal.copy(e),this.constant=t,this}setComponents(e,t,n,i){return this.normal.set(e,t,n),this.constant=i,this}setFromNormalAndCoplanarPoint(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this}setFromCoplanarPoints(e,t,n){const i=Fa.subVectors(n,t).cross(Jf.subVectors(e,t)).normalize();return this.setFromNormalAndCoplanarPoint(i,e),this}copy(e){return this.normal.copy(e.normal),this.constant=e.constant,this}normalize(){const e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(e){return this.normal.dot(e)+this.constant}distanceToSphere(e){return this.distanceToPoint(e.center)-e.radius}projectPoint(e,t){return t.copy(this.normal).multiplyScalar(-this.distanceToPoint(e)).add(e)}intersectLine(e,t){const n=e.delta(Fa),i=this.normal.dot(n);if(i===0)return this.distanceToPoint(e.start)===0?t.copy(e.start):null;const s=-(e.start.dot(this.normal)+this.constant)/i;return s<0||s>1?null:t.copy(n).multiplyScalar(s).add(e.start)}intersectsLine(e){const t=this.distanceToPoint(e.start),n=this.distanceToPoint(e.end);return t<0&&n>0||n<0&&t>0}intersectsBox(e){return e.intersectsPlane(this)}intersectsSphere(e){return e.intersectsPlane(this)}coplanarPoint(e){return e.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(e,t){const n=t||$f.getNormalMatrix(e),i=this.coplanarPoint(Fa).applyMatrix4(e),s=this.normal.applyMatrix3(n).normalize();return this.constant=-i.dot(s),this}translate(e){return this.constant-=e.dot(this.normal),this}equals(e){return e.normal.equals(this.normal)&&e.constant===this.constant}clone(){return new this.constructor().copy(this)}}Jt.prototype.isPlane=!0;const Xi=new Sn,Gs=new L;class Ir{constructor(e=new Jt,t=new Jt,n=new Jt,i=new Jt,s=new Jt,o=new Jt){this.planes=[e,t,n,i,s,o]}set(e,t,n,i,s,o){const a=this.planes;return a[0].copy(e),a[1].copy(t),a[2].copy(n),a[3].copy(i),a[4].copy(s),a[5].copy(o),this}copy(e){const t=this.planes;for(let n=0;n<6;n++)t[n].copy(e.planes[n]);return this}setFromProjectionMatrix(e){const t=this.planes,n=e.elements,i=n[0],s=n[1],o=n[2],a=n[3],c=n[4],h=n[5],u=n[6],d=n[7],f=n[8],p=n[9],g=n[10],_=n[11],b=n[12],y=n[13],m=n[14],T=n[15];return t[0].setComponents(a-i,d-c,_-f,T-b).normalize(),t[1].setComponents(a+i,d+c,_+f,T+b).normalize(),t[2].setComponents(a+s,d+h,_+p,T+y).normalize(),t[3].setComponents(a-s,d-h,_-p,T-y).normalize(),t[4].setComponents(a-o,d-u,_-g,T-m).normalize(),t[5].setComponents(a+o,d+u,_+g,T+m).normalize(),this}intersectsObject(e){const t=e.geometry;return t.boundingSphere===null&&t.computeBoundingSphere(),Xi.copy(t.boundingSphere).applyMatrix4(e.matrixWorld),this.intersectsSphere(Xi)}intersectsSprite(e){return Xi.center.set(0,0,0),Xi.radius=.7071067811865476,Xi.applyMatrix4(e.matrixWorld),this.intersectsSphere(Xi)}intersectsSphere(e){const t=this.planes,n=e.center,i=-e.radius;for(let s=0;s<6;s++)if(t[s].distanceToPoint(n)<i)return!1;return!0}intersectsBox(e){const t=this.planes;for(let n=0;n<6;n++){const i=t[n];if(Gs.x=i.normal.x>0?e.max.x:e.min.x,Gs.y=i.normal.y>0?e.max.y:e.min.y,Gs.z=i.normal.z>0?e.max.z:e.min.z,i.distanceToPoint(Gs)<0)return!1}return!0}containsPoint(e){const t=this.planes;for(let n=0;n<6;n++)if(t[n].distanceToPoint(e)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}}function gh(){let r=null,e=!1,t=null,n=null;function i(s,o){t(s,o),n=r.requestAnimationFrame(i)}return{start:function(){e!==!0&&t!==null&&(n=r.requestAnimationFrame(i),e=!0)},stop:function(){r.cancelAnimationFrame(n),e=!1},setAnimationLoop:function(s){t=s},setContext:function(s){r=s}}}function Kf(r,e){const t=e.isWebGL2,n=new WeakMap;function i(h,u){const d=h.array,f=h.usage,p=r.createBuffer();r.bindBuffer(u,p),r.bufferData(u,d,f),h.onUploadCallback();let g;if(d instanceof Float32Array)g=r.FLOAT;else if(d instanceof Uint16Array)if(h.isFloat16BufferAttribute)if(t)g=r.HALF_FLOAT;else throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");else g=r.UNSIGNED_SHORT;else if(d instanceof Int16Array)g=r.SHORT;else if(d instanceof Uint32Array)g=r.UNSIGNED_INT;else if(d instanceof Int32Array)g=r.INT;else if(d instanceof Int8Array)g=r.BYTE;else if(d instanceof Uint8Array)g=r.UNSIGNED_BYTE;else if(d instanceof Uint8ClampedArray)g=r.UNSIGNED_BYTE;else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+d);return{buffer:p,type:g,bytesPerElement:d.BYTES_PER_ELEMENT,version:h.version}}function s(h,u,d){const f=u.array,p=u.updateRange;r.bindBuffer(d,h),p.count===-1?r.bufferSubData(d,0,f):(t?r.bufferSubData(d,p.offset*f.BYTES_PER_ELEMENT,f,p.offset,p.count):r.bufferSubData(d,p.offset*f.BYTES_PER_ELEMENT,f.subarray(p.offset,p.offset+p.count)),p.count=-1)}function o(h){return h.isInterleavedBufferAttribute&&(h=h.data),n.get(h)}function a(h){h.isInterleavedBufferAttribute&&(h=h.data);const u=n.get(h);u&&(r.deleteBuffer(u.buffer),n.delete(h))}function c(h,u){if(h.isGLBufferAttribute){const f=n.get(h);(!f||f.version<h.version)&&n.set(h,{buffer:h.buffer,type:h.type,bytesPerElement:h.elementSize,version:h.version});return}h.isInterleavedBufferAttribute&&(h=h.data);const d=n.get(h);d===void 0?n.set(h,i(h,u)):d.version<h.version&&(s(d.buffer,h,u),d.version=h.version)}return{get:o,remove:a,update:c}}class ei extends Se{constructor(e=1,t=1,n=1,i=1){super();this.type="PlaneGeometry",this.parameters={width:e,height:t,widthSegments:n,heightSegments:i};const s=e/2,o=t/2,a=Math.floor(n),c=Math.floor(i),h=a+1,u=c+1,d=e/a,f=t/c,p=[],g=[],_=[],b=[];for(let y=0;y<u;y++){const m=y*f-o;for(let T=0;T<h;T++){const E=T*d-s;g.push(E,-m,0),_.push(0,0,1),b.push(T/a),b.push(1-y/c)}}for(let y=0;y<c;y++)for(let m=0;m<a;m++){const T=m+h*y,E=m+h*(y+1),S=m+1+h*(y+1),D=m+1+h*y;p.push(T,E,D),p.push(E,S,D)}this.setIndex(p),this.setAttribute("position",new ve(g,3)),this.setAttribute("normal",new ve(_,3)),this.setAttribute("uv",new ve(b,2))}static fromJSON(e){return new ei(e.width,e.height,e.widthSegments,e.heightSegments)}}var jf=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vUv ).g;
#endif`,Qf=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,ep=`#ifdef USE_ALPHATEST
	if ( diffuseColor.a < alphaTest ) discard;
#endif`,tp=`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,np=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,ip=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,rp="vec3 transformed = vec3( position );",sp=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,op=`vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
	float D = D_GGX( alpha, dotNH );
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif`,ap=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vUv );
		vec2 dSTdy = dFdy( vUv );
		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );
		vec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,lp=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#pragma unroll_loop_start
	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
		plane = clippingPlanes[ i ];
		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
	}
	#pragma unroll_loop_end
	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
		bool clipped = true;
		#pragma unroll_loop_start
		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
		}
		#pragma unroll_loop_end
		if ( clipped ) discard;
	#endif
#endif`,cp=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,hp=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,up=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,dp=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,fp=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,pp=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	varying vec3 vColor;
#endif`,mp=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif`,gp=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
struct GeometricContext {
	vec3 position;
	vec3 normal;
	vec3 viewDir;
#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal;
#endif
};
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
float linearToRelativeLuminance( const in vec3 color ) {
	vec3 weights = vec3( 0.2126, 0.7152, 0.0722 );
	return dot( weights, color.rgb );
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}`,yp=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		vec2 uv = getUV( direction, face ) * ( faceSize - 1.0 ) + 0.5;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define r0 1.0
	#define v0 0.339
	#define m0 - 2.0
	#define r1 0.8
	#define v1 0.276
	#define m1 - 1.0
	#define r4 0.4
	#define v4 0.046
	#define m4 2.0
	#define r5 0.305
	#define v5 0.016
	#define m5 3.0
	#define r6 0.21
	#define v6 0.0038
	#define m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= r1 ) {
			mip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;
		} else if ( roughness >= r4 ) {
			mip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;
		} else if ( roughness >= r5 ) {
			mip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;
		} else if ( roughness >= r6 ) {
			mip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,xp=`vec3 transformedNormal = objectNormal;
#ifdef USE_INSTANCING
	mat3 m = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );
	transformedNormal = m * transformedNormal;
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,_p=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,vp=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );
#endif`,Mp=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vUv );
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,wp=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,bp="gl_FragColor = linearToOutputTexel( gl_FragColor );",Ep=`vec4 LinearToLinear( in vec4 value ) {
	return value;
}
vec4 LinearTosRGB( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`,Sp=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,Tp=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,Ap=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,Rp=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,Cp=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,Lp=`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,Pp=`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,Ip=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,Dp=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,Fp=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		return ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );
	#endif
}`,Up=`#ifdef USE_LIGHTMAP
	vec4 lightMapTexel = texture2D( lightMap, vUv2 );
	vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
	#ifndef PHYSICALLY_CORRECT_LIGHTS
		lightMapIrradiance *= PI;
	#endif
	reflectedLight.indirectDiffuse += lightMapIrradiance;
#endif`,Bp=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,Np=`vec3 diffuse = vec3( 1.0 );
GeometricContext geometry;
geometry.position = mvPosition.xyz;
geometry.normal = normalize( transformedNormal );
geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );
GeometricContext backGeometry;
backGeometry.position = geometry.position;
backGeometry.normal = -geometry.normal;
backGeometry.viewDir = geometry.viewDir;
vLightFront = vec3( 0.0 );
vIndirectFront = vec3( 0.0 );
#ifdef DOUBLE_SIDED
	vLightBack = vec3( 0.0 );
	vIndirectBack = vec3( 0.0 );
#endif
IncidentLight directLight;
float dotNL;
vec3 directLightColor_Diffuse;
vIndirectFront += getAmbientLightIrradiance( ambientLightColor );
vIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );
#ifdef DOUBLE_SIDED
	vIndirectBack += getAmbientLightIrradiance( ambientLightColor );
	vIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );
#endif
#if NUM_POINT_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		getPointLightInfo( pointLights[ i ], geometry, directLight );
		dotNL = dot( geometry.normal, directLight.direction );
		directLightColor_Diffuse = directLight.color;
		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;
		#ifdef DOUBLE_SIDED
			vLightBack += saturate( - dotNL ) * directLightColor_Diffuse;
		#endif
	}
	#pragma unroll_loop_end
#endif
#if NUM_SPOT_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		getSpotLightInfo( spotLights[ i ], geometry, directLight );
		dotNL = dot( geometry.normal, directLight.direction );
		directLightColor_Diffuse = directLight.color;
		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;
		#ifdef DOUBLE_SIDED
			vLightBack += saturate( - dotNL ) * directLightColor_Diffuse;
		#endif
	}
	#pragma unroll_loop_end
#endif
#if NUM_DIR_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		getDirectionalLightInfo( directionalLights[ i ], geometry, directLight );
		dotNL = dot( geometry.normal, directLight.direction );
		directLightColor_Diffuse = directLight.color;
		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;
		#ifdef DOUBLE_SIDED
			vLightBack += saturate( - dotNL ) * directLightColor_Diffuse;
		#endif
	}
	#pragma unroll_loop_end
#endif
#if NUM_HEMI_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
		vIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );
		#ifdef DOUBLE_SIDED
			vIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );
		#endif
	}
	#pragma unroll_loop_end
#endif`,Op=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
uniform vec3 lightProbe[ 9 ];
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	#if defined ( PHYSICALLY_CORRECT_LIGHTS )
		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
		if ( cutoffDistance > 0.0 ) {
			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
		}
		return distanceFalloff;
	#else
		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {
			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );
		}
		return 1.0;
	#endif
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometry.position;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometry.position;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,zp=`#if defined( USE_ENVMAP )
	#ifdef ENVMAP_MODE_REFRACTION
		uniform float refractionRatio;
	#endif
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#if defined( ENVMAP_TYPE_CUBE_UV )
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#if defined( ENVMAP_TYPE_CUBE_UV )
			vec3 reflectVec;
			#ifdef ENVMAP_MODE_REFLECTION
				reflectVec = reflect( - viewDir, normal );
				reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			#else
				reflectVec = refract( - viewDir, normal, refractionRatio );
			#endif
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
#endif`,Hp=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,Gp=`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon
#define Material_LightProbeLOD( material )	(0)`,Vp=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,kp=`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong
#define Material_LightProbeLOD( material )	(0)`,Wp=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	#ifdef SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULARINTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;
		#endif
		#ifdef USE_SPECULARCOLORMAP
			specularColorFactor *= texture2D( specularColorMap, vUv ).rgb;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEENCOLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEENROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;
	#endif
#endif`,Xp=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
};
vec3 clearcoatSpecular = vec3( 0.0 );
vec3 sheenSpecular = vec3( 0.0 );
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	vec3 FssEss = specularColor * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometry.normal;
		vec3 viewDir = geometry.viewDir;
		vec3 position = geometry.position;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(		0, 1,		0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	computeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	vec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,qp=`
GeometricContext geometry;
geometry.position = - vViewPosition;
geometry.normal = normal;
geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
#ifdef USE_CLEARCOAT
	geometry.clearcoatNormal = clearcoatNormal;
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	irradiance += getLightProbeIrradiance( lightProbe, geometry.normal );
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,Yp=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vUv2 );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		#ifndef PHYSICALLY_CORRECT_LIGHTS
			lightMapIrradiance *= PI;
		#endif
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometry.normal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	radiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,Zp=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );
#endif`,Jp=`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,$p=`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,Kp=`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		varying float vFragDepth;
		varying float vIsPerspective;
	#else
		uniform float logDepthBufFC;
	#endif
#endif`,jp=`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		vFragDepth = 1.0 + gl_Position.w;
		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
	#else
		if ( isPerspectiveMatrix( projectionMatrix ) ) {
			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;
			gl_Position.z *= gl_Position.w;
		}
	#endif
#endif`,Qp=`#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`,em=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,tm=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,nm=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	uniform mat3 uvTransform;
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,im=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vUv );
	metalnessFactor *= texelMetalness.b;
#endif`,rm=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,sm=`#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ]
		#endif
	}
#endif`,om=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];
		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];
		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];
		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];
	#endif
#endif`,am=`#ifdef USE_MORPHTARGETS
	uniform float morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
		uniform sampler2DArray morphTargetsTexture;
		uniform vec2 morphTargetsTextureSize;
		vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
			float texelIndex = float( vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset );
			float y = floor( texelIndex / morphTargetsTextureSize.x );
			float x = texelIndex - y * morphTargetsTextureSize.x;
			vec3 morphUV = vec3( ( x + 0.5 ) / morphTargetsTextureSize.x, y / morphTargetsTextureSize.y, morphTargetIndex );
			return texture( morphTargetsTexture, morphUV );
		}
	#else
		#ifndef USE_MORPHNORMALS
			uniform float morphTargetInfluences[ 8 ];
		#else
			uniform float morphTargetInfluences[ 4 ];
		#endif
	#endif
#endif`,lm=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		transformed += morphTarget0 * morphTargetInfluences[ 0 ];
		transformed += morphTarget1 * morphTargetInfluences[ 1 ];
		transformed += morphTarget2 * morphTargetInfluences[ 2 ];
		transformed += morphTarget3 * morphTargetInfluences[ 3 ];
		#ifndef USE_MORPHNORMALS
			transformed += morphTarget4 * morphTargetInfluences[ 4 ];
			transformed += morphTarget5 * morphTargetInfluences[ 5 ];
			transformed += morphTarget6 * morphTargetInfluences[ 6 ];
			transformed += morphTarget7 * morphTargetInfluences[ 7 ];
		#endif
	#endif
#endif`,cm=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );
	vec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	#ifdef USE_TANGENT
		vec3 tangent = normalize( vTangent );
		vec3 bitangent = normalize( vBitangent );
		#ifdef DOUBLE_SIDED
			tangent = tangent * faceDirection;
			bitangent = bitangent * faceDirection;
		#endif
		#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )
			mat3 vTBN = mat3( tangent, bitangent, normal );
		#endif
	#endif
#endif
vec3 geometryNormal = normal;`,hm=`#ifdef OBJECTSPACE_NORMALMAP
	normal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( TANGENTSPACE_NORMALMAP )
	vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	#ifdef USE_TANGENT
		normal = normalize( vTBN * mapN );
	#else
		normal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );
	#endif
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,um=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,dm=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,fm=`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,pm=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef OBJECTSPACE_NORMALMAP
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )
	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {
		vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );
		vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );
		vec2 st0 = dFdx( vUv.st );
		vec2 st1 = dFdy( vUv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );
		return normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );
	}
#endif`,mm=`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = geometryNormal;
#endif`,gm=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	#ifdef USE_TANGENT
		clearcoatNormal = normalize( vTBN * clearcoatMapN );
	#else
		clearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );
	#endif
#endif`,ym=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif`,xm=`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= transmissionAlpha + 0.1;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,_m=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;
const vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );
const vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );
const float ShiftRight8 = 1. / 256.;
vec4 packDepthToRGBA( const in float v ) {
	vec4 r = vec4( fract( v * PackFactors ), v );
	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors );
}
vec4 pack2HalfToRGBA( vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {
	return linearClipZ * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * invClipZ - far );
}`,vm=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,Mm=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,wm=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,bm=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,Em=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vUv );
	roughnessFactor *= texelRoughness.g;
#endif`,Sm=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,Tm=`#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );
		bool inFrustum = all( inFrustumVec );
		bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );
		bool frustumTest = all( frustumTestVec );
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), 
							texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
							f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), 
							texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
							f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return shadow;
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
		vec3 lightToPosition = shadowCoord.xyz;
		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;
		vec3 bd3D = normalize( lightToPosition );
		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
			return (
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
			) * ( 1.0 / 9.0 );
		#else
			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
		#endif
	}
#endif`,Am=`#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];
		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,Rm=`#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0
		vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		vec4 shadowWorldPosition;
	#endif
	#if NUM_DIR_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
		vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );
		vSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
		vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
#endif`,Cm=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,Lm=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,Pm=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	#ifdef BONE_TEXTURE
		uniform highp sampler2D boneTexture;
		uniform int boneTextureSize;
		mat4 getBoneMatrix( const in float i ) {
			float j = i * 4.0;
			float x = mod( j, float( boneTextureSize ) );
			float y = floor( j / float( boneTextureSize ) );
			float dx = 1.0 / float( boneTextureSize );
			float dy = 1.0 / float( boneTextureSize );
			y = dy * ( y + 0.5 );
			vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );
			vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );
			vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );
			vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );
			mat4 bone = mat4( v1, v2, v3, v4 );
			return bone;
		}
	#else
		uniform mat4 boneMatrices[ MAX_BONES ];
		mat4 getBoneMatrix( const in float i ) {
			mat4 bone = boneMatrices[ int(i) ];
			return bone;
		}
	#endif
#endif`,Im=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,Dm=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,Fm=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,Um=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,Bm=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,Nm=`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return toneMappingExposure * color;
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 OptimizedCineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(	1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,	1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,	1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,Om=`#ifdef USE_TRANSMISSION
	float transmissionAlpha = 1.0;
	float transmissionFactor = transmission;
	float thicknessFactor = thickness;
	#ifdef USE_TRANSMISSIONMAP
		transmissionFactor *= texture2D( transmissionMap, vUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		thicknessFactor *= texture2D( thicknessMap, vUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmission = getIBLVolumeRefraction(
		n, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,
		attenuationColor, attenuationDistance );
	totalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );
	transmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );
#endif`,zm=`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		#ifdef texture2DLodEXT
			return texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );
		#else
			return texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );
		#endif
	}
	vec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( attenuationDistance == 0.0 ) {
			return radiance;
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance * radiance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
		vec3 refractedRayExit = position + transmissionRay;
		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
		vec2 refractionCoords = ndcPos.xy / ndcPos.w;
		refractionCoords += 1.0;
		refractionCoords /= 2.0;
		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
		vec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		return vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );
	}
#endif`,Hm=`#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )
	varying vec2 vUv;
#endif`,Gm=`#ifdef USE_UV
	#ifdef UVS_VERTEX_ONLY
		vec2 vUv;
	#else
		varying vec2 vUv;
	#endif
	uniform mat3 uvTransform;
#endif`,Vm=`#ifdef USE_UV
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
#endif`,km=`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	varying vec2 vUv2;
#endif`,Wm=`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	attribute vec2 uv2;
	varying vec2 vUv2;
	uniform mat3 uv2Transform;
#endif`,Xm=`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	vUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;
#endif`,qm=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;const Ym=`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,Zm=`uniform sampler2D t2D;
varying vec2 vUv;
void main() {
	gl_FragColor = texture2D( t2D, vUv );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,Jm=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,$m=`#include <envmap_common_pars_fragment>
uniform float opacity;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	vec3 vReflect = vWorldDirection;
	#include <envmap_fragment>
	gl_FragColor = envColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,Km=`#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,jm=`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#endif
}`,Qm=`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,eg=`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,tg=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,ng=`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,ig=`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,rg=`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,sg=`#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,og=`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <cube_uv_reflection_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel= texture2D( lightMap, vUv2 );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,ag=`#define LAMBERT
varying vec3 vLightFront;
varying vec3 vIndirectFront;
#ifdef DOUBLE_SIDED
	varying vec3 vLightBack;
	varying vec3 vIndirectBack;
#endif
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <envmap_pars_vertex>
#include <bsdfs>
#include <lights_pars_begin>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <lights_lambert_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,lg=`uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
varying vec3 vLightFront;
varying vec3 vIndirectFront;
#ifdef DOUBLE_SIDED
	varying vec3 vLightBack;
	varying vec3 vIndirectBack;
#endif
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <cube_uv_reflection_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <fog_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <emissivemap_fragment>
	#ifdef DOUBLE_SIDED
		reflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;
	#else
		reflectedLight.indirectDiffuse += vIndirectFront;
	#endif
	#include <lightmap_fragment>
	reflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );
	#ifdef DOUBLE_SIDED
		reflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;
	#else
		reflectedLight.directDiffuse = vLightFront;
	#endif
	reflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,cg=`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,hg=`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,ug=`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	vViewPosition = - mvPosition.xyz;
#endif
}`,dg=`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`,fg=`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,pg=`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <cube_uv_reflection_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,mg=`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,gg=`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULARINTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
	#ifdef USE_SPECULARCOLORMAP
		uniform sampler2D specularColorMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEENCOLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEENROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <bsdfs>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;
	#endif
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,yg=`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,xg=`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,_g=`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,vg=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,Mg=`#include <common>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,wg=`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`,bg=`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );
	vec2 scale;
	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );
	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,Eg=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`,Be={alphamap_fragment:jf,alphamap_pars_fragment:Qf,alphatest_fragment:ep,alphatest_pars_fragment:tp,aomap_fragment:np,aomap_pars_fragment:ip,begin_vertex:rp,beginnormal_vertex:sp,bsdfs:op,bumpmap_pars_fragment:ap,clipping_planes_fragment:lp,clipping_planes_pars_fragment:cp,clipping_planes_pars_vertex:hp,clipping_planes_vertex:up,color_fragment:dp,color_pars_fragment:fp,color_pars_vertex:pp,color_vertex:mp,common:gp,cube_uv_reflection_fragment:yp,defaultnormal_vertex:xp,displacementmap_pars_vertex:_p,displacementmap_vertex:vp,emissivemap_fragment:Mp,emissivemap_pars_fragment:wp,encodings_fragment:bp,encodings_pars_fragment:Ep,envmap_fragment:Sp,envmap_common_pars_fragment:Tp,envmap_pars_fragment:Ap,envmap_pars_vertex:Rp,envmap_physical_pars_fragment:zp,envmap_vertex:Cp,fog_vertex:Lp,fog_pars_vertex:Pp,fog_fragment:Ip,fog_pars_fragment:Dp,gradientmap_pars_fragment:Fp,lightmap_fragment:Up,lightmap_pars_fragment:Bp,lights_lambert_vertex:Np,lights_pars_begin:Op,lights_toon_fragment:Hp,lights_toon_pars_fragment:Gp,lights_phong_fragment:Vp,lights_phong_pars_fragment:kp,lights_physical_fragment:Wp,lights_physical_pars_fragment:Xp,lights_fragment_begin:qp,lights_fragment_maps:Yp,lights_fragment_end:Zp,logdepthbuf_fragment:Jp,logdepthbuf_pars_fragment:$p,logdepthbuf_pars_vertex:Kp,logdepthbuf_vertex:jp,map_fragment:Qp,map_pars_fragment:em,map_particle_fragment:tm,map_particle_pars_fragment:nm,metalnessmap_fragment:im,metalnessmap_pars_fragment:rm,morphcolor_vertex:sm,morphnormal_vertex:om,morphtarget_pars_vertex:am,morphtarget_vertex:lm,normal_fragment_begin:cm,normal_fragment_maps:hm,normal_pars_fragment:um,normal_pars_vertex:dm,normal_vertex:fm,normalmap_pars_fragment:pm,clearcoat_normal_fragment_begin:mm,clearcoat_normal_fragment_maps:gm,clearcoat_pars_fragment:ym,output_fragment:xm,packing:_m,premultiplied_alpha_fragment:vm,project_vertex:Mm,dithering_fragment:wm,dithering_pars_fragment:bm,roughnessmap_fragment:Em,roughnessmap_pars_fragment:Sm,shadowmap_pars_fragment:Tm,shadowmap_pars_vertex:Am,shadowmap_vertex:Rm,shadowmask_pars_fragment:Cm,skinbase_vertex:Lm,skinning_pars_vertex:Pm,skinning_vertex:Im,skinnormal_vertex:Dm,specularmap_fragment:Fm,specularmap_pars_fragment:Um,tonemapping_fragment:Bm,tonemapping_pars_fragment:Nm,transmission_fragment:Om,transmission_pars_fragment:zm,uv_pars_fragment:Hm,uv_pars_vertex:Gm,uv_vertex:Vm,uv2_pars_fragment:km,uv2_pars_vertex:Wm,uv2_vertex:Xm,worldpos_vertex:qm,background_vert:Ym,background_frag:Zm,cube_vert:Jm,cube_frag:$m,depth_vert:Km,depth_frag:jm,distanceRGBA_vert:Qm,distanceRGBA_frag:eg,equirect_vert:tg,equirect_frag:ng,linedashed_vert:ig,linedashed_frag:rg,meshbasic_vert:sg,meshbasic_frag:og,meshlambert_vert:ag,meshlambert_frag:lg,meshmatcap_vert:cg,meshmatcap_frag:hg,meshnormal_vert:ug,meshnormal_frag:dg,meshphong_vert:fg,meshphong_frag:pg,meshphysical_vert:mg,meshphysical_frag:gg,meshtoon_vert:yg,meshtoon_frag:xg,points_vert:_g,points_frag:vg,shadow_vert:Mg,shadow_frag:wg,sprite_vert:bg,sprite_frag:Eg},pe={common:{diffuse:{value:new ge(16777215)},opacity:{value:1},map:{value:null},uvTransform:{value:new ft},uv2Transform:{value:new ft},alphaMap:{value:null},alphaTest:{value:0}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new te(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new ge(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new ge(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new ft}},sprite:{diffuse:{value:new ge(16777215)},opacity:{value:1},center:{value:new te(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new ft}}},Vt={basic:{uniforms:bt([pe.common,pe.specularmap,pe.envmap,pe.aomap,pe.lightmap,pe.fog]),vertexShader:Be.meshbasic_vert,fragmentShader:Be.meshbasic_frag},lambert:{uniforms:bt([pe.common,pe.specularmap,pe.envmap,pe.aomap,pe.lightmap,pe.emissivemap,pe.fog,pe.lights,{emissive:{value:new ge(0)}}]),vertexShader:Be.meshlambert_vert,fragmentShader:Be.meshlambert_frag},phong:{uniforms:bt([pe.common,pe.specularmap,pe.envmap,pe.aomap,pe.lightmap,pe.emissivemap,pe.bumpmap,pe.normalmap,pe.displacementmap,pe.fog,pe.lights,{emissive:{value:new ge(0)},specular:{value:new ge(1118481)},shininess:{value:30}}]),vertexShader:Be.meshphong_vert,fragmentShader:Be.meshphong_frag},standard:{uniforms:bt([pe.common,pe.envmap,pe.aomap,pe.lightmap,pe.emissivemap,pe.bumpmap,pe.normalmap,pe.displacementmap,pe.roughnessmap,pe.metalnessmap,pe.fog,pe.lights,{emissive:{value:new ge(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:Be.meshphysical_vert,fragmentShader:Be.meshphysical_frag},toon:{uniforms:bt([pe.common,pe.aomap,pe.lightmap,pe.emissivemap,pe.bumpmap,pe.normalmap,pe.displacementmap,pe.gradientmap,pe.fog,pe.lights,{emissive:{value:new ge(0)}}]),vertexShader:Be.meshtoon_vert,fragmentShader:Be.meshtoon_frag},matcap:{uniforms:bt([pe.common,pe.bumpmap,pe.normalmap,pe.displacementmap,pe.fog,{matcap:{value:null}}]),vertexShader:Be.meshmatcap_vert,fragmentShader:Be.meshmatcap_frag},points:{uniforms:bt([pe.points,pe.fog]),vertexShader:Be.points_vert,fragmentShader:Be.points_frag},dashed:{uniforms:bt([pe.common,pe.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Be.linedashed_vert,fragmentShader:Be.linedashed_frag},depth:{uniforms:bt([pe.common,pe.displacementmap]),vertexShader:Be.depth_vert,fragmentShader:Be.depth_frag},normal:{uniforms:bt([pe.common,pe.bumpmap,pe.normalmap,pe.displacementmap,{opacity:{value:1}}]),vertexShader:Be.meshnormal_vert,fragmentShader:Be.meshnormal_frag},sprite:{uniforms:bt([pe.sprite,pe.fog]),vertexShader:Be.sprite_vert,fragmentShader:Be.sprite_frag},background:{uniforms:{uvTransform:{value:new ft},t2D:{value:null}},vertexShader:Be.background_vert,fragmentShader:Be.background_frag},cube:{uniforms:bt([pe.envmap,{opacity:{value:1}}]),vertexShader:Be.cube_vert,fragmentShader:Be.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Be.equirect_vert,fragmentShader:Be.equirect_frag},distanceRGBA:{uniforms:bt([pe.common,pe.displacementmap,{referencePosition:{value:new L},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Be.distanceRGBA_vert,fragmentShader:Be.distanceRGBA_frag},shadow:{uniforms:bt([pe.lights,pe.fog,{color:{value:new ge(0)},opacity:{value:1}}]),vertexShader:Be.shadow_vert,fragmentShader:Be.shadow_frag}};Vt.physical={uniforms:bt([Vt.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new te(1,1)},clearcoatNormalMap:{value:null},sheen:{value:0},sheenColor:{value:new ge(0)},sheenColorMap:{value:null},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},transmission:{value:0},transmissionMap:{value:null},transmissionSamplerSize:{value:new te},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},attenuationDistance:{value:0},attenuationColor:{value:new ge(0)},specularIntensity:{value:1},specularIntensityMap:{value:null},specularColor:{value:new ge(1,1,1)},specularColorMap:{value:null}}]),vertexShader:Be.meshphysical_vert,fragmentShader:Be.meshphysical_frag};function Sg(r,e,t,n,i,s){const o=new ge(0);let a=i===!0?0:1,c,h,u=null,d=0,f=null;function p(_,b){let y=!1,m=b.isScene===!0?b.background:null;m&&m.isTexture&&(m=e.get(m));const T=r.xr,E=T.getSession&&T.getSession();E&&E.environmentBlendMode==="additive"&&(m=null),m===null?g(o,a):m&&m.isColor&&(g(m,1),y=!0),(r.autoClear||y)&&r.clear(r.autoClearColor,r.autoClearDepth,r.autoClearStencil),m&&(m.isCubeTexture||m.mapping===bi)?(h===void 0&&(h=new dt(new dn(1,1,1),new Nt({name:"BackgroundCubeMaterial",uniforms:Gi(Vt.cube.uniforms),vertexShader:Vt.cube.vertexShader,fragmentShader:Vt.cube.fragmentShader,side:rt,depthTest:!1,depthWrite:!1,fog:!1})),h.geometry.deleteAttribute("normal"),h.geometry.deleteAttribute("uv"),h.onBeforeRender=function(S,D,U){this.matrixWorld.copyPosition(U.matrixWorld)},Object.defineProperty(h.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),n.update(h)),h.material.uniforms.envMap.value=m,h.material.uniforms.flipEnvMap.value=m.isCubeTexture&&m.isRenderTargetTexture===!1?-1:1,(u!==m||d!==m.version||f!==r.toneMapping)&&(h.material.needsUpdate=!0,u=m,d=m.version,f=r.toneMapping),_.unshift(h,h.geometry,h.material,0,0,null)):m&&m.isTexture&&(c===void 0&&(c=new dt(new ei(2,2),new Nt({name:"BackgroundMaterial",uniforms:Gi(Vt.background.uniforms),vertexShader:Vt.background.vertexShader,fragmentShader:Vt.background.fragmentShader,side:zn,depthTest:!1,depthWrite:!1,fog:!1})),c.geometry.deleteAttribute("normal"),Object.defineProperty(c.material,"map",{get:function(){return this.uniforms.t2D.value}}),n.update(c)),c.material.uniforms.t2D.value=m,m.matrixAutoUpdate===!0&&m.updateMatrix(),c.material.uniforms.uvTransform.value.copy(m.matrix),(u!==m||d!==m.version||f!==r.toneMapping)&&(c.material.needsUpdate=!0,u=m,d=m.version,f=r.toneMapping),_.unshift(c,c.geometry,c.material,0,0,null))}function g(_,b){t.buffers.color.setClear(_.r,_.g,_.b,b,s)}return{getClearColor:function(){return o},setClearColor:function(_,b=1){o.set(_),a=b,g(o,a)},getClearAlpha:function(){return a},setClearAlpha:function(_){a=_,g(o,a)},render:p}}function Tg(r,e,t,n){const i=r.getParameter(r.MAX_VERTEX_ATTRIBS),s=n.isWebGL2?null:e.get("OES_vertex_array_object"),o=n.isWebGL2||s!==null,a={},c=_(null);let h=c;function u(G,W,q,X,J){let k=!1;if(o){const Q=g(X,q,W);h!==Q&&(h=Q,f(h.object)),k=b(X,J),k&&y(X,J)}else{const Q=W.wireframe===!0;(h.geometry!==X.id||h.program!==q.id||h.wireframe!==Q)&&(h.geometry=X.id,h.program=q.id,h.wireframe=Q,k=!0)}G.isInstancedMesh===!0&&(k=!0),J!==null&&t.update(J,r.ELEMENT_ARRAY_BUFFER),k&&(U(G,W,q,X),J!==null&&r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,t.get(J).buffer))}function d(){return n.isWebGL2?r.createVertexArray():s.createVertexArrayOES()}function f(G){return n.isWebGL2?r.bindVertexArray(G):s.bindVertexArrayOES(G)}function p(G){return n.isWebGL2?r.deleteVertexArray(G):s.deleteVertexArrayOES(G)}function g(G,W,q){const X=q.wireframe===!0;let J=a[G.id];J===void 0&&(J={},a[G.id]=J);let k=J[W.id];k===void 0&&(k={},J[W.id]=k);let Q=k[X];return Q===void 0&&(Q=_(d()),k[X]=Q),Q}function _(G){const W=[],q=[],X=[];for(let J=0;J<i;J++)W[J]=0,q[J]=0,X[J]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:W,enabledAttributes:q,attributeDivisors:X,object:G,attributes:{},index:null}}function b(G,W){const q=h.attributes,X=G.attributes;let J=0;for(const k in X){const Q=q[k],re=X[k];if(Q===void 0||Q.attribute!==re||Q.data!==re.data)return!0;J++}return h.attributesNum!==J||h.index!==W}function y(G,W){const q={},X=G.attributes;let J=0;for(const k in X){const Q=X[k],re={};re.attribute=Q,Q.data&&(re.data=Q.data),q[k]=re,J++}h.attributes=q,h.attributesNum=J,h.index=W}function m(){const G=h.newAttributes;for(let W=0,q=G.length;W<q;W++)G[W]=0}function T(G){E(G,0)}function E(G,W){const q=h.newAttributes,X=h.enabledAttributes,J=h.attributeDivisors;q[G]=1,X[G]===0&&(r.enableVertexAttribArray(G),X[G]=1),J[G]!==W&&((n.isWebGL2?r:e.get("ANGLE_instanced_arrays"))[n.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](G,W),J[G]=W)}function S(){const G=h.newAttributes,W=h.enabledAttributes;for(let q=0,X=W.length;q<X;q++)W[q]!==G[q]&&(r.disableVertexAttribArray(q),W[q]=0)}function D(G,W,q,X,J,k){n.isWebGL2===!0&&(q===r.INT||q===r.UNSIGNED_INT)?r.vertexAttribIPointer(G,W,q,J,k):r.vertexAttribPointer(G,W,q,X,J,k)}function U(G,W,q,X){if(n.isWebGL2===!1&&(G.isInstancedMesh||X.isInstancedBufferGeometry)&&e.get("ANGLE_instanced_arrays")===null)return;m();const J=X.attributes,k=q.getAttributes(),Q=W.defaultAttributeValues;for(const re in k){const se=k[re];if(se.location>=0){let ae=J[re];if(ae===void 0&&(re==="instanceMatrix"&&G.instanceMatrix&&(ae=G.instanceMatrix),re==="instanceColor"&&G.instanceColor&&(ae=G.instanceColor)),ae!==void 0){const Ee=ae.normalized,ze=ae.itemSize,be=t.get(ae);if(be===void 0)continue;const H=be.buffer,Oe=be.type,Re=be.bytesPerElement;if(ae.isInterleavedBufferAttribute){const M=ae.data,ye=M.stride,De=ae.offset;if(M.isInstancedInterleavedBuffer){for(let $=0;$<se.locationSize;$++)E(se.location+$,M.meshPerAttribute);G.isInstancedMesh!==!0&&X._maxInstanceCount===void 0&&(X._maxInstanceCount=M.meshPerAttribute*M.count)}else for(let $=0;$<se.locationSize;$++)T(se.location+$);r.bindBuffer(r.ARRAY_BUFFER,H);for(let $=0;$<se.locationSize;$++)D(se.location+$,ze/se.locationSize,Oe,Ee,ye*Re,(De+ze/se.locationSize*$)*Re)}else{if(ae.isInstancedBufferAttribute){for(let M=0;M<se.locationSize;M++)E(se.location+M,ae.meshPerAttribute);G.isInstancedMesh!==!0&&X._maxInstanceCount===void 0&&(X._maxInstanceCount=ae.meshPerAttribute*ae.count)}else for(let M=0;M<se.locationSize;M++)T(se.location+M);r.bindBuffer(r.ARRAY_BUFFER,H);for(let M=0;M<se.locationSize;M++)D(se.location+M,ze/se.locationSize,Oe,Ee,ze*Re,ze/se.locationSize*M*Re)}}else if(Q!==void 0){const Ee=Q[re];if(Ee!==void 0)switch(Ee.length){case 2:r.vertexAttrib2fv(se.location,Ee);break;case 3:r.vertexAttrib3fv(se.location,Ee);break;case 4:r.vertexAttrib4fv(se.location,Ee);break;default:r.vertexAttrib1fv(se.location,Ee)}}}}S()}function N(){A();for(const G in a){const W=a[G];for(const q in W){const X=W[q];for(const J in X)p(X[J].object),delete X[J];delete W[q]}delete a[G]}}function Z(G){if(a[G.id]===void 0)return;const W=a[G.id];for(const q in W){const X=W[q];for(const J in X)p(X[J].object),delete X[J];delete W[q]}delete a[G.id]}function z(G){for(const W in a){const q=a[W];if(q[G.id]===void 0)continue;const X=q[G.id];for(const J in X)p(X[J].object),delete X[J];delete q[G.id]}}function A(){F(),h!==c&&(h=c,f(h.object))}function F(){c.geometry=null,c.program=null,c.wireframe=!1}return{setup:u,reset:A,resetDefaultState:F,dispose:N,releaseStatesOfGeometry:Z,releaseStatesOfProgram:z,initAttributes:m,enableAttribute:T,disableUnusedAttributes:S}}function Ag(r,e,t,n){const i=n.isWebGL2;let s;function o(h){s=h}function a(h,u){r.drawArrays(s,h,u),t.update(u,s,1)}function c(h,u,d){if(d===0)return;let f,p;if(i)f=r,p="drawArraysInstanced";else if(f=e.get("ANGLE_instanced_arrays"),p="drawArraysInstancedANGLE",f===null){console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}f[p](s,h,u,d),t.update(u,s,d)}this.setMode=o,this.render=a,this.renderInstances=c}function Rg(r,e,t){let n;function i(){if(n!==void 0)return n;if(e.has("EXT_texture_filter_anisotropic")===!0){const U=e.get("EXT_texture_filter_anisotropic");n=r.getParameter(U.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else n=0;return n}function s(U){if(U==="highp"){if(r.getShaderPrecisionFormat(r.VERTEX_SHADER,r.HIGH_FLOAT).precision>0&&r.getShaderPrecisionFormat(r.FRAGMENT_SHADER,r.HIGH_FLOAT).precision>0)return"highp";U="mediump"}return U==="mediump"&&r.getShaderPrecisionFormat(r.VERTEX_SHADER,r.MEDIUM_FLOAT).precision>0&&r.getShaderPrecisionFormat(r.FRAGMENT_SHADER,r.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}const o=typeof WebGL2RenderingContext!="undefined"&&r instanceof WebGL2RenderingContext||typeof WebGL2ComputeRenderingContext!="undefined"&&r instanceof WebGL2ComputeRenderingContext;let a=t.precision!==void 0?t.precision:"highp";const c=s(a);c!==a&&(console.warn("THREE.WebGLRenderer:",a,"not supported, using",c,"instead."),a=c);const h=o||e.has("WEBGL_draw_buffers"),u=t.logarithmicDepthBuffer===!0,d=r.getParameter(r.MAX_TEXTURE_IMAGE_UNITS),f=r.getParameter(r.MAX_VERTEX_TEXTURE_IMAGE_UNITS),p=r.getParameter(r.MAX_TEXTURE_SIZE),g=r.getParameter(r.MAX_CUBE_MAP_TEXTURE_SIZE),_=r.getParameter(r.MAX_VERTEX_ATTRIBS),b=r.getParameter(r.MAX_VERTEX_UNIFORM_VECTORS),y=r.getParameter(r.MAX_VARYING_VECTORS),m=r.getParameter(r.MAX_FRAGMENT_UNIFORM_VECTORS),T=f>0,E=o||e.has("OES_texture_float"),S=T&&E,D=o?r.getParameter(r.MAX_SAMPLES):0;return{isWebGL2:o,drawBuffers:h,getMaxAnisotropy:i,getMaxPrecision:s,precision:a,logarithmicDepthBuffer:u,maxTextures:d,maxVertexTextures:f,maxTextureSize:p,maxCubemapSize:g,maxAttributes:_,maxVertexUniforms:b,maxVaryings:y,maxFragmentUniforms:m,vertexTextures:T,floatFragmentTextures:E,floatVertexTextures:S,maxSamples:D}}function Cg(r){const e=this;let t=null,n=0,i=!1,s=!1;const o=new Jt,a=new ft,c={value:null,needsUpdate:!1};this.uniform=c,this.numPlanes=0,this.numIntersection=0,this.init=function(d,f,p){const g=d.length!==0||f||n!==0||i;return i=f,t=u(d,p,0),n=d.length,g},this.beginShadows=function(){s=!0,u(null)},this.endShadows=function(){s=!1,h()},this.setState=function(d,f,p){const g=d.clippingPlanes,_=d.clipIntersection,b=d.clipShadows,y=r.get(d);if(!i||g===null||g.length===0||s&&!b)s?u(null):h();else{const m=s?0:n,T=m*4;let E=y.clippingState||null;c.value=E,E=u(g,f,T,p);for(let S=0;S!==T;++S)E[S]=t[S];y.clippingState=E,this.numIntersection=_?this.numPlanes:0,this.numPlanes+=m}};function h(){c.value!==t&&(c.value=t,c.needsUpdate=n>0),e.numPlanes=n,e.numIntersection=0}function u(d,f,p,g){const _=d!==null?d.length:0;let b=null;if(_!==0){if(b=c.value,g!==!0||b===null){const y=p+_*4,m=f.matrixWorldInverse;a.getNormalMatrix(m),(b===null||b.length<y)&&(b=new Float32Array(y));for(let T=0,E=p;T!==_;++T,E+=4)o.copy(d[T]).applyMatrix4(m,a),o.normal.toArray(b,E),b[E+3]=o.constant}c.value=b,c.needsUpdate=!0}return e.numPlanes=_,e.numIntersection=0,b}}function Lg(r){let e=new WeakMap;function t(o,a){return a===mr?o.mapping=yn:a===gr&&(o.mapping=xn),o}function n(o){if(o&&o.isTexture&&o.isRenderTargetTexture===!1){const a=o.mapping;if(a===mr||a===gr)if(e.has(o)){const c=e.get(o).texture;return t(c,o.mapping)}else{const c=o.image;if(c&&c.height>0){const h=new Hs(c.height/2);return h.fromEquirectangularTexture(r,o),e.set(o,h),o.addEventListener("dispose",i),t(h.texture,o.mapping)}else return null}}return o}function i(o){const a=o.target;a.removeEventListener("dispose",i);const c=e.get(a);c!==void 0&&(e.delete(a),c.dispose())}function s(){e=new WeakMap}return{get:n,dispose:s}}class Dr extends Pr{constructor(e=-1,t=1,n=1,i=-1,s=.1,o=2e3){super();this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=e,this.right=t,this.top=n,this.bottom=i,this.near=s,this.far=o,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=e.view===null?null:Object.assign({},e.view),this}setViewOffset(e,t,n,i,s,o){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=i,this.view.width=s,this.view.height=o,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,i=(this.top+this.bottom)/2;let s=n-e,o=n+e,a=i+t,c=i-t;if(this.view!==null&&this.view.enabled){const h=(this.right-this.left)/this.view.fullWidth/this.zoom,u=(this.top-this.bottom)/this.view.fullHeight/this.zoom;s+=h*this.view.offsetX,o=s+h*this.view.width,a-=u*this.view.offsetY,c=a-u*this.view.height}this.projectionMatrix.makeOrthographic(s,o,a,c,this.near,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,this.view!==null&&(t.object.view=Object.assign({},this.view)),t}}Dr.prototype.isOrthographicCamera=!0;const qi=4,yh=[.125,.215,.35,.446,.526,.582],ti=20,Ua=new Dr,xh=new ge;let Ba=null;const ni=(1+Math.sqrt(5))/2,Yi=1/ni,_h=[new L(1,1,1),new L(-1,1,1),new L(1,1,-1),new L(-1,1,-1),new L(0,ni,Yi),new L(0,ni,-Yi),new L(Yi,0,ni),new L(-Yi,0,ni),new L(ni,Yi,0),new L(-ni,Yi,0)];class Na{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(e,t=0,n=.1,i=100){Ba=this._renderer.getRenderTarget(),this._setSize(256);const s=this._allocateTargets();return s.depthBuffer=!0,this._sceneToCubeUV(e,n,i,s),t>0&&this._blur(s,0,0,t),this._applyPMREM(s),this._cleanup(s),s}fromEquirectangular(e,t=null){return this._fromTexture(e,t)}fromCubemap(e,t=null){return this._fromTexture(e,t)}compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=wh(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=Mh(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose()}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(Ba),e.scissorTest=!1,Vs(e,0,0,e.width,e.height)}_fromTexture(e,t){e.mapping===yn||e.mapping===xn?this._setSize(e.image.length===0?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4),Ba=this._renderer.getRenderTarget();const n=t||this._allocateTargets();return this._textureToCubeUV(e,n),this._applyPMREM(n),this._cleanup(n),n}_allocateTargets(){const e=3*Math.max(this._cubeSize,16*7),t=4*this._cubeSize-32,n={magFilter:et,minFilter:et,generateMipmaps:!1,type:Wn,format:wt,encoding:sn,depthBuffer:!1},i=vh(e,t,n);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==e){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=vh(e,t,n);const{_lodMax:s}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=Pg(s)),this._blurMaterial=Ig(s,e,t)}return i}_compileMaterial(e){const t=new dt(this._lodPlanes[0],e);this._renderer.compile(t,Ua)}_sceneToCubeUV(e,t,n,i){const s=90,o=1,a=new mt(s,o,t,n),c=[1,-1,1,1,1,1],h=[1,1,1,-1,-1,-1],u=this._renderer,d=u.autoClear,f=u.toneMapping;u.getClearColor(xh),u.toneMapping=nn,u.autoClear=!1;const p=new un({name:"PMREM.Background",side:rt,depthWrite:!1,depthTest:!1}),g=new dt(new dn,p);let _=!1;const b=e.background;b?b.isColor&&(p.color.copy(b),e.background=null,_=!0):(p.color.copy(xh),_=!0);for(let y=0;y<6;y++){const m=y%3;m===0?(a.up.set(0,c[y],0),a.lookAt(h[y],0,0)):m===1?(a.up.set(0,0,c[y]),a.lookAt(0,h[y],0)):(a.up.set(0,c[y],0),a.lookAt(0,0,h[y]));const T=this._cubeSize;Vs(i,m*T,y>2?T:0,T,T),u.setRenderTarget(i),_&&u.render(g,a),u.render(e,a)}g.geometry.dispose(),g.material.dispose(),u.toneMapping=f,u.autoClear=d,e.background=b}_textureToCubeUV(e,t){const n=this._renderer,i=e.mapping===yn||e.mapping===xn;i?(this._cubemapMaterial===null&&(this._cubemapMaterial=wh()),this._cubemapMaterial.uniforms.flipEnvMap.value=e.isRenderTargetTexture===!1?-1:1):this._equirectMaterial===null&&(this._equirectMaterial=Mh());const s=i?this._cubemapMaterial:this._equirectMaterial,o=new dt(this._lodPlanes[0],s),a=s.uniforms;a.envMap.value=e;const c=this._cubeSize;Vs(t,0,0,3*c,2*c),n.setRenderTarget(t),n.render(o,Ua)}_applyPMREM(e){const t=this._renderer,n=t.autoClear;t.autoClear=!1;for(let i=1;i<this._lodPlanes.length;i++){const s=Math.sqrt(this._sigmas[i]*this._sigmas[i]-this._sigmas[i-1]*this._sigmas[i-1]),o=_h[(i-1)%_h.length];this._blur(e,i-1,i,s,o)}t.autoClear=n}_blur(e,t,n,i,s){const o=this._pingPongRenderTarget;this._halfBlur(e,o,t,n,i,"latitudinal",s),this._halfBlur(o,e,n,n,i,"longitudinal",s)}_halfBlur(e,t,n,i,s,o,a){const c=this._renderer,h=this._blurMaterial;o!=="latitudinal"&&o!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const u=3,d=new dt(this._lodPlanes[i],h),f=h.uniforms,p=this._sizeLods[n]-1,g=isFinite(s)?Math.PI/(2*p):2*Math.PI/(2*ti-1),_=s/g,b=isFinite(s)?1+Math.floor(u*_):ti;b>ti&&console.warn(`sigmaRadians, ${s}, is too large and will clip, as it requested ${b} samples when the maximum is set to ${ti}`);const y=[];let m=0;for(let U=0;U<ti;++U){const N=U/_,Z=Math.exp(-N*N/2);y.push(Z),U===0?m+=Z:U<b&&(m+=2*Z)}for(let U=0;U<y.length;U++)y[U]=y[U]/m;f.envMap.value=e.texture,f.samples.value=b,f.weights.value=y,f.latitudinal.value=o==="latitudinal",a&&(f.poleAxis.value=a);const{_lodMax:T}=this;f.dTheta.value=g,f.mipInt.value=T-n;const E=this._sizeLods[i],S=3*E*(i>T-qi?i-T+qi:0),D=4*(this._cubeSize-E);Vs(t,S,D,3*E,2*E),c.setRenderTarget(t),c.render(d,Ua)}}function Pg(r){const e=[],t=[],n=[];let i=r;const s=r-qi+1+yh.length;for(let o=0;o<s;o++){const a=Math.pow(2,i);t.push(a);let c=1/a;o>r-qi?c=yh[o-r+qi-1]:o===0&&(c=0),n.push(c);const h=1/(a-1),u=-h/2,d=1+h/2,f=[u,u,d,u,d,d,u,u,d,d,u,d],p=6,g=6,_=3,b=2,y=1,m=new Float32Array(_*g*p),T=new Float32Array(b*g*p),E=new Float32Array(y*g*p);for(let D=0;D<p;D++){const U=D%3*2/3-1,N=D>2?0:-1,Z=[U,N,0,U+2/3,N,0,U+2/3,N+1,0,U,N,0,U+2/3,N+1,0,U,N+1,0];m.set(Z,_*g*D),T.set(f,b*g*D);const z=[D,D,D,D,D,D];E.set(z,y*g*D)}const S=new Se;S.setAttribute("position",new He(m,_)),S.setAttribute("uv",new He(T,b)),S.setAttribute("faceIndex",new He(E,y)),e.push(S),i>qi&&i--}return{lodPlanes:e,sizeLods:t,sigmas:n}}function vh(r,e,t){const n=new At(r,e,t);return n.texture.mapping=bi,n.texture.name="PMREM.cubeUv",n.scissorTest=!0,n}function Vs(r,e,t,n,i){r.viewport.set(e,t,n,i),r.scissor.set(e,t,n,i)}function Ig(r,e,t){const n=new Float32Array(ti),i=new L(0,1,0);return new Nt({name:"SphericalGaussianBlur",defines:{n:ti,CUBEUV_TEXEL_WIDTH:1/e,CUBEUV_TEXEL_HEIGHT:1/t,CUBEUV_MAX_MIP:`${r}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:n},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:i}},vertexShader:Oa(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:tn,depthTest:!1,depthWrite:!1})}function Mh(){return new Nt({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:Oa(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:tn,depthTest:!1,depthWrite:!1})}function wh(){return new Nt({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:Oa(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:tn,depthTest:!1,depthWrite:!1})}function Oa(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function Dg(r){let e=new WeakMap,t=null;function n(a){if(a&&a.isTexture){const c=a.mapping,h=c===mr||c===gr,u=c===yn||c===xn;if(h||u)if(a.isRenderTargetTexture&&a.needsPMREMUpdate===!0){a.needsPMREMUpdate=!1;let d=e.get(a);return t===null&&(t=new Na(r)),d=h?t.fromEquirectangular(a,d):t.fromCubemap(a,d),e.set(a,d),d.texture}else{if(e.has(a))return e.get(a).texture;{const d=a.image;if(h&&d&&d.height>0||u&&d&&i(d)){t===null&&(t=new Na(r));const f=h?t.fromEquirectangular(a):t.fromCubemap(a);return e.set(a,f),a.addEventListener("dispose",s),f.texture}else return null}}}return a}function i(a){let c=0;const h=6;for(let u=0;u<h;u++)a[u]!==void 0&&c++;return c===h}function s(a){const c=a.target;c.removeEventListener("dispose",s);const h=e.get(c);h!==void 0&&(e.delete(c),h.dispose())}function o(){e=new WeakMap,t!==null&&(t.dispose(),t=null)}return{get:n,dispose:o}}function Fg(r){const e={};function t(n){if(e[n]!==void 0)return e[n];let i;switch(n){case"WEBGL_depth_texture":i=r.getExtension("WEBGL_depth_texture")||r.getExtension("MOZ_WEBGL_depth_texture")||r.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":i=r.getExtension("EXT_texture_filter_anisotropic")||r.getExtension("MOZ_EXT_texture_filter_anisotropic")||r.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":i=r.getExtension("WEBGL_compressed_texture_s3tc")||r.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||r.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":i=r.getExtension("WEBGL_compressed_texture_pvrtc")||r.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:i=r.getExtension(n)}return e[n]=i,i}return{has:function(n){return t(n)!==null},init:function(n){n.isWebGL2?t("EXT_color_buffer_float"):(t("WEBGL_depth_texture"),t("OES_texture_float"),t("OES_texture_half_float"),t("OES_texture_half_float_linear"),t("OES_standard_derivatives"),t("OES_element_index_uint"),t("OES_vertex_array_object"),t("ANGLE_instanced_arrays")),t("OES_texture_float_linear"),t("EXT_color_buffer_half_float"),t("WEBGL_multisampled_render_to_texture")},get:function(n){const i=t(n);return i===null&&console.warn("THREE.WebGLRenderer: "+n+" extension not supported."),i}}}function Ug(r,e,t,n){const i={},s=new WeakMap;function o(d){const f=d.target;f.index!==null&&e.remove(f.index);for(const g in f.attributes)e.remove(f.attributes[g]);f.removeEventListener("dispose",o),delete i[f.id];const p=s.get(f);p&&(e.remove(p),s.delete(f)),n.releaseStatesOfGeometry(f),f.isInstancedBufferGeometry===!0&&delete f._maxInstanceCount,t.memory.geometries--}function a(d,f){return i[f.id]===!0||(f.addEventListener("dispose",o),i[f.id]=!0,t.memory.geometries++),f}function c(d){const f=d.attributes;for(const g in f)e.update(f[g],r.ARRAY_BUFFER);const p=d.morphAttributes;for(const g in p){const _=p[g];for(let b=0,y=_.length;b<y;b++)e.update(_[b],r.ARRAY_BUFFER)}}function h(d){const f=[],p=d.index,g=d.attributes.position;let _=0;if(p!==null){const m=p.array;_=p.version;for(let T=0,E=m.length;T<E;T+=3){const S=m[T+0],D=m[T+1],U=m[T+2];f.push(S,D,D,U,U,S)}}else{const m=g.array;_=g.version;for(let T=0,E=m.length/3-1;T<E;T+=3){const S=T+0,D=T+1,U=T+2;f.push(S,D,D,U,U,S)}}const b=new(qc(f)?Ls:Cs)(f,1);b.version=_;const y=s.get(d);y&&e.remove(y),s.set(d,b)}function u(d){const f=s.get(d);if(f){const p=d.index;p!==null&&f.version<p.version&&h(d)}else h(d);return s.get(d)}return{get:a,update:c,getWireframeAttribute:u}}function Bg(r,e,t,n){const i=n.isWebGL2;let s;function o(f){s=f}let a,c;function h(f){a=f.type,c=f.bytesPerElement}function u(f,p){r.drawElements(s,p,a,f*c),t.update(p,s,1)}function d(f,p,g){if(g===0)return;let _,b;if(i)_=r,b="drawElementsInstanced";else if(_=e.get("ANGLE_instanced_arrays"),b="drawElementsInstancedANGLE",_===null){console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}_[b](s,p,a,f*c,g),t.update(p,s,g)}this.setMode=o,this.setIndex=h,this.render=u,this.renderInstances=d}function Ng(r){const e={geometries:0,textures:0},t={frame:0,calls:0,triangles:0,points:0,lines:0};function n(s,o,a){switch(t.calls++,o){case r.TRIANGLES:t.triangles+=a*(s/3);break;case r.LINES:t.lines+=a*(s/2);break;case r.LINE_STRIP:t.lines+=a*(s-1);break;case r.LINE_LOOP:t.lines+=a*s;break;case r.POINTS:t.points+=a*s;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",o);break}}function i(){t.frame++,t.calls=0,t.triangles=0,t.points=0,t.lines=0}return{memory:e,render:t,programs:null,autoReset:!0,reset:i,update:n}}function Og(r,e){return r[0]-e[0]}function zg(r,e){return Math.abs(e[1])-Math.abs(r[1])}function za(r,e){let t=1;const n=e.isInterleavedBufferAttribute?e.data.array:e.array;n instanceof Int8Array?t=127:n instanceof Int16Array?t=32767:n instanceof Int32Array?t=2147483647:console.error("THREE.WebGLMorphtargets: Unsupported morph attribute data type: ",n),r.divideScalar(t)}function Hg(r,e,t){const n={},i=new Float32Array(8),s=new WeakMap,o=new qe,a=[];for(let h=0;h<8;h++)a[h]=[h,0];function c(h,u,d,f){const p=h.morphTargetInfluences;if(e.isWebGL2===!0){const g=u.morphAttributes.position||u.morphAttributes.normal||u.morphAttributes.color,_=g!==void 0?g.length:0;let b=s.get(u);if(b===void 0||b.count!==_){let q=function(){G.dispose(),s.delete(u),u.removeEventListener("dispose",q)};b!==void 0&&b.texture.dispose();const T=u.morphAttributes.position!==void 0,E=u.morphAttributes.normal!==void 0,S=u.morphAttributes.color!==void 0,D=u.morphAttributes.position||[],U=u.morphAttributes.normal||[],N=u.morphAttributes.color||[];let Z=0;T===!0&&(Z=1),E===!0&&(Z=2),S===!0&&(Z=3);let z=u.attributes.position.count*Z,A=1;z>e.maxTextureSize&&(A=Math.ceil(z/e.maxTextureSize),z=e.maxTextureSize);const F=new Float32Array(z*A*4*_),G=new Pi(F,z,A,_);G.format=wt,G.type=rn,G.needsUpdate=!0;const W=Z*4;for(let X=0;X<_;X++){const J=D[X],k=U[X],Q=N[X],re=z*A*4*X;for(let se=0;se<J.count;se++){const ae=se*W;T===!0&&(o.fromBufferAttribute(J,se),J.normalized===!0&&za(o,J),F[re+ae+0]=o.x,F[re+ae+1]=o.y,F[re+ae+2]=o.z,F[re+ae+3]=0),E===!0&&(o.fromBufferAttribute(k,se),k.normalized===!0&&za(o,k),F[re+ae+4]=o.x,F[re+ae+5]=o.y,F[re+ae+6]=o.z,F[re+ae+7]=0),S===!0&&(o.fromBufferAttribute(Q,se),Q.normalized===!0&&za(o,k),F[re+ae+8]=o.x,F[re+ae+9]=o.y,F[re+ae+10]=o.z,F[re+ae+11]=Q.itemSize===4?o.w:1)}}b={count:_,texture:G,size:new te(z,A)},s.set(u,b),u.addEventListener("dispose",q)}let y=0;for(let T=0;T<p.length;T++)y+=p[T];const m=u.morphTargetsRelative?1:1-y;f.getUniforms().setValue(r,"morphTargetBaseInfluence",m),f.getUniforms().setValue(r,"morphTargetInfluences",p),f.getUniforms().setValue(r,"morphTargetsTexture",b.texture,t),f.getUniforms().setValue(r,"morphTargetsTextureSize",b.size)}else{const g=p===void 0?0:p.length;let _=n[u.id];if(_===void 0||_.length!==g){_=[];for(let E=0;E<g;E++)_[E]=[E,0];n[u.id]=_}for(let E=0;E<g;E++){const S=_[E];S[0]=E,S[1]=p[E]}_.sort(zg);for(let E=0;E<8;E++)E<g&&_[E][1]?(a[E][0]=_[E][0],a[E][1]=_[E][1]):(a[E][0]=Number.MAX_SAFE_INTEGER,a[E][1]=0);a.sort(Og);const b=u.morphAttributes.position,y=u.morphAttributes.normal;let m=0;for(let E=0;E<8;E++){const S=a[E],D=S[0],U=S[1];D!==Number.MAX_SAFE_INTEGER&&U?(b&&u.getAttribute("morphTarget"+E)!==b[D]&&u.setAttribute("morphTarget"+E,b[D]),y&&u.getAttribute("morphNormal"+E)!==y[D]&&u.setAttribute("morphNormal"+E,y[D]),i[E]=U,m+=U):(b&&u.hasAttribute("morphTarget"+E)===!0&&u.deleteAttribute("morphTarget"+E),y&&u.hasAttribute("morphNormal"+E)===!0&&u.deleteAttribute("morphNormal"+E),i[E]=0)}const T=u.morphTargetsRelative?1:1-m;f.getUniforms().setValue(r,"morphTargetBaseInfluence",T),f.getUniforms().setValue(r,"morphTargetInfluences",i)}}return{update:c}}function Gg(r,e,t,n){let i=new WeakMap;function s(c){const h=n.render.frame,u=c.geometry,d=e.get(c,u);return i.get(d)!==h&&(e.update(d),i.set(d,h)),c.isInstancedMesh&&(c.hasEventListener("dispose",a)===!1&&c.addEventListener("dispose",a),t.update(c.instanceMatrix,r.ARRAY_BUFFER),c.instanceColor!==null&&t.update(c.instanceColor,r.ARRAY_BUFFER)),d}function o(){i=new WeakMap}function a(c){const h=c.target;h.removeEventListener("dispose",a),t.remove(h.instanceMatrix),h.instanceColor!==null&&t.remove(h.instanceColor)}return{update:s,dispose:o}}const bh=new ut,Eh=new Pi,Sh=new Ar,Th=new Wi,Ah=[],Rh=[],Ch=new Float32Array(16),Lh=new Float32Array(9),Ph=new Float32Array(4);function Zi(r,e,t){const n=r[0];if(n<=0||n>0)return r;const i=e*t;let s=Ah[i];if(s===void 0&&(s=new Float32Array(i),Ah[i]=s),e!==0){n.toArray(s,0);for(let o=1,a=0;o!==e;++o)a+=t,r[o].toArray(s,a)}return s}function Rt(r,e){if(r.length!==e.length)return!1;for(let t=0,n=r.length;t<n;t++)if(r[t]!==e[t])return!1;return!0}function Et(r,e){for(let t=0,n=e.length;t<n;t++)r[t]=e[t]}function ks(r,e){let t=Rh[e];t===void 0&&(t=new Int32Array(e),Rh[e]=t);for(let n=0;n!==e;++n)t[n]=r.allocateTextureUnit();return t}function Vg(r,e){const t=this.cache;t[0]!==e&&(r.uniform1f(this.addr,e),t[0]=e)}function kg(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(r.uniform2f(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(Rt(t,e))return;r.uniform2fv(this.addr,e),Et(t,e)}}function Wg(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(r.uniform3f(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else if(e.r!==void 0)(t[0]!==e.r||t[1]!==e.g||t[2]!==e.b)&&(r.uniform3f(this.addr,e.r,e.g,e.b),t[0]=e.r,t[1]=e.g,t[2]=e.b);else{if(Rt(t,e))return;r.uniform3fv(this.addr,e),Et(t,e)}}function Xg(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(r.uniform4f(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(Rt(t,e))return;r.uniform4fv(this.addr,e),Et(t,e)}}function qg(r,e){const t=this.cache,n=e.elements;if(n===void 0){if(Rt(t,e))return;r.uniformMatrix2fv(this.addr,!1,e),Et(t,e)}else{if(Rt(t,n))return;Ph.set(n),r.uniformMatrix2fv(this.addr,!1,Ph),Et(t,n)}}function Yg(r,e){const t=this.cache,n=e.elements;if(n===void 0){if(Rt(t,e))return;r.uniformMatrix3fv(this.addr,!1,e),Et(t,e)}else{if(Rt(t,n))return;Lh.set(n),r.uniformMatrix3fv(this.addr,!1,Lh),Et(t,n)}}function Zg(r,e){const t=this.cache,n=e.elements;if(n===void 0){if(Rt(t,e))return;r.uniformMatrix4fv(this.addr,!1,e),Et(t,e)}else{if(Rt(t,n))return;Ch.set(n),r.uniformMatrix4fv(this.addr,!1,Ch),Et(t,n)}}function Jg(r,e){const t=this.cache;t[0]!==e&&(r.uniform1i(this.addr,e),t[0]=e)}function $g(r,e){const t=this.cache;Rt(t,e)||(r.uniform2iv(this.addr,e),Et(t,e))}function Kg(r,e){const t=this.cache;Rt(t,e)||(r.uniform3iv(this.addr,e),Et(t,e))}function jg(r,e){const t=this.cache;Rt(t,e)||(r.uniform4iv(this.addr,e),Et(t,e))}function Qg(r,e){const t=this.cache;t[0]!==e&&(r.uniform1ui(this.addr,e),t[0]=e)}function ey(r,e){const t=this.cache;Rt(t,e)||(r.uniform2uiv(this.addr,e),Et(t,e))}function ty(r,e){const t=this.cache;Rt(t,e)||(r.uniform3uiv(this.addr,e),Et(t,e))}function ny(r,e){const t=this.cache;Rt(t,e)||(r.uniform4uiv(this.addr,e),Et(t,e))}function iy(r,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(r.uniform1i(this.addr,i),n[0]=i),t.setTexture2D(e||bh,i)}function ry(r,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(r.uniform1i(this.addr,i),n[0]=i),t.setTexture3D(e||Sh,i)}function sy(r,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(r.uniform1i(this.addr,i),n[0]=i),t.setTextureCube(e||Th,i)}function oy(r,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(r.uniform1i(this.addr,i),n[0]=i),t.setTexture2DArray(e||Eh,i)}function ay(r){switch(r){case 5126:return Vg;case 35664:return kg;case 35665:return Wg;case 35666:return Xg;case 35674:return qg;case 35675:return Yg;case 35676:return Zg;case 5124:case 35670:return Jg;case 35667:case 35671:return $g;case 35668:case 35672:return Kg;case 35669:case 35673:return jg;case 5125:return Qg;case 36294:return ey;case 36295:return ty;case 36296:return ny;case 35678:case 36198:case 36298:case 36306:case 35682:return iy;case 35679:case 36299:case 36307:return ry;case 35680:case 36300:case 36308:case 36293:return sy;case 36289:case 36303:case 36311:case 36292:return oy}}function ly(r,e){r.uniform1fv(this.addr,e)}function cy(r,e){const t=Zi(e,this.size,2);r.uniform2fv(this.addr,t)}function hy(r,e){const t=Zi(e,this.size,3);r.uniform3fv(this.addr,t)}function uy(r,e){const t=Zi(e,this.size,4);r.uniform4fv(this.addr,t)}function dy(r,e){const t=Zi(e,this.size,4);r.uniformMatrix2fv(this.addr,!1,t)}function fy(r,e){const t=Zi(e,this.size,9);r.uniformMatrix3fv(this.addr,!1,t)}function py(r,e){const t=Zi(e,this.size,16);r.uniformMatrix4fv(this.addr,!1,t)}function my(r,e){r.uniform1iv(this.addr,e)}function gy(r,e){r.uniform2iv(this.addr,e)}function yy(r,e){r.uniform3iv(this.addr,e)}function xy(r,e){r.uniform4iv(this.addr,e)}function _y(r,e){r.uniform1uiv(this.addr,e)}function vy(r,e){r.uniform2uiv(this.addr,e)}function My(r,e){r.uniform3uiv(this.addr,e)}function wy(r,e){r.uniform4uiv(this.addr,e)}function by(r,e,t){const n=e.length,i=ks(t,n);r.uniform1iv(this.addr,i);for(let s=0;s!==n;++s)t.setTexture2D(e[s]||bh,i[s])}function Ey(r,e,t){const n=e.length,i=ks(t,n);r.uniform1iv(this.addr,i);for(let s=0;s!==n;++s)t.setTexture3D(e[s]||Sh,i[s])}function Sy(r,e,t){const n=e.length,i=ks(t,n);r.uniform1iv(this.addr,i);for(let s=0;s!==n;++s)t.setTextureCube(e[s]||Th,i[s])}function Ty(r,e,t){const n=e.length,i=ks(t,n);r.uniform1iv(this.addr,i);for(let s=0;s!==n;++s)t.setTexture2DArray(e[s]||Eh,i[s])}function Ay(r){switch(r){case 5126:return ly;case 35664:return cy;case 35665:return hy;case 35666:return uy;case 35674:return dy;case 35675:return fy;case 35676:return py;case 5124:case 35670:return my;case 35667:case 35671:return gy;case 35668:case 35672:return yy;case 35669:case 35673:return xy;case 5125:return _y;case 36294:return vy;case 36295:return My;case 36296:return wy;case 35678:case 36198:case 36298:case 36306:case 35682:return by;case 35679:case 36299:case 36307:return Ey;case 35680:case 36300:case 36308:case 36293:return Sy;case 36289:case 36303:case 36311:case 36292:return Ty}}function Ry(r,e,t){this.id=r,this.addr=t,this.cache=[],this.setValue=ay(e.type)}function Ih(r,e,t){this.id=r,this.addr=t,this.cache=[],this.size=e.size,this.setValue=Ay(e.type)}Ih.prototype.updateCache=function(r){const e=this.cache;r instanceof Float32Array&&e.length!==r.length&&(this.cache=new Float32Array(r.length)),Et(e,r)};function Dh(r){this.id=r,this.seq=[],this.map={}}Dh.prototype.setValue=function(r,e,t){const n=this.seq;for(let i=0,s=n.length;i!==s;++i){const o=n[i];o.setValue(r,e[o.id],t)}};const Ha=/(\w+)(\])?(\[|\.)?/g;function Fh(r,e){r.seq.push(e),r.map[e.id]=e}function Cy(r,e,t){const n=r.name,i=n.length;for(Ha.lastIndex=0;;){const s=Ha.exec(n),o=Ha.lastIndex;let a=s[1];const c=s[2]==="]",h=s[3];if(c&&(a=a|0),h===void 0||h==="["&&o+2===i){Fh(t,h===void 0?new Ry(a,r,e):new Ih(a,r,e));break}else{let d=t.map[a];d===void 0&&(d=new Dh(a),Fh(t,d)),t=d}}}function Dn(r,e){this.seq=[],this.map={};const t=r.getProgramParameter(e,r.ACTIVE_UNIFORMS);for(let n=0;n<t;++n){const i=r.getActiveUniform(e,n),s=r.getUniformLocation(e,i.name);Cy(i,s,this)}}Dn.prototype.setValue=function(r,e,t,n){const i=this.map[e];i!==void 0&&i.setValue(r,t,n)};Dn.prototype.setOptional=function(r,e,t){const n=e[t];n!==void 0&&this.setValue(r,t,n)};Dn.upload=function(r,e,t,n){for(let i=0,s=e.length;i!==s;++i){const o=e[i],a=t[o.id];a.needsUpdate!==!1&&o.setValue(r,a.value,n)}};Dn.seqWithValue=function(r,e){const t=[];for(let n=0,i=r.length;n!==i;++n){const s=r[n];s.id in e&&t.push(s)}return t};function Uh(r,e,t){const n=r.createShader(e);return r.shaderSource(n,t),r.compileShader(n),n}let Ly=0;function Py(r){const e=r.split(`
`);for(let t=0;t<e.length;t++)e[t]=t+1+": "+e[t];return e.join(`
`)}function Iy(r){switch(r){case sn:return["Linear","( value )"];case je:return["sRGB","( value )"];default:return console.warn("THREE.WebGLProgram: Unsupported encoding:",r),["Linear","( value )"]}}function Bh(r,e,t){const n=r.getShaderParameter(e,r.COMPILE_STATUS),i=r.getShaderInfoLog(e).trim();return n&&i===""?"":t.toUpperCase()+`

`+i+`

`+Py(r.getShaderSource(e))}function Dy(r,e){const t=Iy(e);return"vec4 "+r+"( vec4 value ) { return LinearTo"+t[0]+t[1]+"; }"}function Fy(r,e){let t;switch(e){case gc:t="Linear";break;case yc:t="Reinhard";break;case xc:t="OptimizedCineon";break;case _c:t="ACESFilmic";break;case vc:t="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",e),t="Linear"}return"vec3 "+r+"( vec3 color ) { return "+t+"ToneMapping( color ); }"}function Uy(r){return[r.extensionDerivatives||!!r.envMapCubeUVHeight||r.bumpMap||r.tangentSpaceNormalMap||r.clearcoatNormalMap||r.flatShading||r.shaderID==="physical"?"#extension GL_OES_standard_derivatives : enable":"",(r.extensionFragDepth||r.logarithmicDepthBuffer)&&r.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",r.extensionDrawBuffers&&r.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(r.extensionShaderTextureLOD||r.envMap||r.transmission)&&r.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(Fr).join(`
`)}function By(r){const e=[];for(const t in r){const n=r[t];n!==!1&&e.push("#define "+t+" "+n)}return e.join(`
`)}function Ny(r,e){const t={},n=r.getProgramParameter(e,r.ACTIVE_ATTRIBUTES);for(let i=0;i<n;i++){const s=r.getActiveAttrib(e,i),o=s.name;let a=1;s.type===r.FLOAT_MAT2&&(a=2),s.type===r.FLOAT_MAT3&&(a=3),s.type===r.FLOAT_MAT4&&(a=4),t[o]={type:s.type,location:r.getAttribLocation(e,o),locationSize:a}}return t}function Fr(r){return r!==""}function Nh(r,e){return r.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function Oh(r,e){return r.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const Oy=/^[ \t]*#include +<([\w\d./]+)>/gm;function Ga(r){return r.replace(Oy,zy)}function zy(r,e){const t=Be[e];if(t===void 0)throw new Error("Can not resolve #include <"+e+">");return Ga(t)}const Hy=/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,Gy=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function zh(r){return r.replace(Gy,Hh).replace(Hy,Vy)}function Vy(r,e,t,n){return console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead."),Hh(r,e,t,n)}function Hh(r,e,t,n){let i="";for(let s=parseInt(e);s<parseInt(t);s++)i+=n.replace(/\[\s*i\s*\]/g,"[ "+s+" ]").replace(/UNROLLED_LOOP_INDEX/g,s);return i}function Gh(r){let e="precision "+r.precision+` float;
precision `+r.precision+" int;";return r.precision==="highp"?e+=`
#define HIGH_PRECISION`:r.precision==="mediump"?e+=`
#define MEDIUM_PRECISION`:r.precision==="lowp"&&(e+=`
#define LOW_PRECISION`),e}function ky(r){let e="SHADOWMAP_TYPE_BASIC";return r.shadowMapType===Do?e="SHADOWMAP_TYPE_PCF":r.shadowMapType===Zl?e="SHADOWMAP_TYPE_PCF_SOFT":r.shadowMapType===wi&&(e="SHADOWMAP_TYPE_VSM"),e}function Wy(r){let e="ENVMAP_TYPE_CUBE";if(r.envMap)switch(r.envMapMode){case yn:case xn:e="ENVMAP_TYPE_CUBE";break;case bi:case yr:e="ENVMAP_TYPE_CUBE_UV";break}return e}function Xy(r){let e="ENVMAP_MODE_REFLECTION";if(r.envMap)switch(r.envMapMode){case xn:case yr:e="ENVMAP_MODE_REFRACTION";break}return e}function qy(r){let e="ENVMAP_BLENDING_NONE";if(r.envMap)switch(r.combine){case pr:e="ENVMAP_BLENDING_MULTIPLY";break;case pc:e="ENVMAP_BLENDING_MIX";break;case mc:e="ENVMAP_BLENDING_ADD";break}return e}function Yy(r){const e=r.envMapCubeUVHeight;if(e===null)return null;const t=Math.log2(e/32+1)+3,n=1/e;return{texelWidth:1/(3*Math.max(Math.pow(2,t),7*16)),texelHeight:n,maxMip:t}}function Zy(r,e,t,n){const i=r.getContext(),s=t.defines;let o=t.vertexShader,a=t.fragmentShader;const c=ky(t),h=Wy(t),u=Xy(t),d=qy(t),f=Yy(t),p=t.isWebGL2?"":Uy(t),g=By(s),_=i.createProgram();let b,y,m=t.glslVersion?"#version "+t.glslVersion+`
`:"";t.isRawShaderMaterial?(b=[g].filter(Fr).join(`
`),b.length>0&&(b+=`
`),y=[p,g].filter(Fr).join(`
`),y.length>0&&(y+=`
`)):(b=[Gh(t),"#define SHADER_NAME "+t.shaderName,g,t.instancing?"#define USE_INSTANCING":"",t.instancingColor?"#define USE_INSTANCING_COLOR":"",t.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define MAX_BONES "+t.maxBones,t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.map?"#define USE_MAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+u:"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMap&&t.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",t.normalMap&&t.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.displacementMap&&t.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",t.specularColorMap?"#define USE_SPECULARCOLORMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.sheenColorMap?"#define USE_SHEENCOLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",t.vertexTangents?"#define USE_TANGENT":"",t.vertexColors?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUvs?"#define USE_UV":"",t.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",t.flatShading?"#define FLAT_SHADED":"",t.skinning?"#define USE_SKINNING":"",t.useVertexTexture?"#define BONE_TEXTURE":"",t.morphTargets?"#define USE_MORPHTARGETS":"",t.morphNormals&&t.flatShading===!1?"#define USE_MORPHNORMALS":"",t.morphColors&&t.isWebGL2?"#define USE_MORPHCOLORS":"",t.morphTargetsCount>0&&t.isWebGL2?"#define MORPHTARGETS_TEXTURE":"",t.morphTargetsCount>0&&t.isWebGL2?"#define MORPHTARGETS_TEXTURE_STRIDE "+t.morphTextureStride:"",t.morphTargetsCount>0&&t.isWebGL2?"#define MORPHTARGETS_COUNT "+t.morphTargetsCount:"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+c:"",t.sizeAttenuation?"#define USE_SIZEATTENUATION":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.logarithmicDepthBuffer&&t.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","	attribute vec3 morphTarget0;","	attribute vec3 morphTarget1;","	attribute vec3 morphTarget2;","	attribute vec3 morphTarget3;","	#ifdef USE_MORPHNORMALS","		attribute vec3 morphNormal0;","		attribute vec3 morphNormal1;","		attribute vec3 morphNormal2;","		attribute vec3 morphNormal3;","	#else","		attribute vec3 morphTarget4;","		attribute vec3 morphTarget5;","		attribute vec3 morphTarget6;","		attribute vec3 morphTarget7;","	#endif","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(Fr).join(`
`),y=[p,Gh(t),"#define SHADER_NAME "+t.shaderName,g,t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.map?"#define USE_MAP":"",t.matcap?"#define USE_MATCAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+h:"",t.envMap?"#define "+u:"",t.envMap?"#define "+d:"",f?"#define CUBEUV_TEXEL_WIDTH "+f.texelWidth:"",f?"#define CUBEUV_TEXEL_HEIGHT "+f.texelHeight:"",f?"#define CUBEUV_MAX_MIP "+f.maxMip+".0":"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMap&&t.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",t.normalMap&&t.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",t.clearcoat?"#define USE_CLEARCOAT":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",t.specularColorMap?"#define USE_SPECULARCOLORMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.alphaTest?"#define USE_ALPHATEST":"",t.sheen?"#define USE_SHEEN":"",t.sheenColorMap?"#define USE_SHEENCOLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",t.vertexTangents?"#define USE_TANGENT":"",t.vertexColors||t.instancingColor?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUvs?"#define USE_UV":"",t.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",t.gradientMap?"#define USE_GRADIENTMAP":"",t.flatShading?"#define FLAT_SHADED":"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+c:"",t.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",t.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.logarithmicDepthBuffer&&t.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",t.toneMapping!==nn?"#define TONE_MAPPING":"",t.toneMapping!==nn?Be.tonemapping_pars_fragment:"",t.toneMapping!==nn?Fy("toneMapping",t.toneMapping):"",t.dithering?"#define DITHERING":"",t.opaque?"#define OPAQUE":"",Be.encodings_pars_fragment,Dy("linearToOutputTexel",t.outputEncoding),t.depthPacking?"#define DEPTH_PACKING "+t.depthPacking:"",`
`].filter(Fr).join(`
`)),o=Ga(o),o=Nh(o,t),o=Oh(o,t),a=Ga(a),a=Nh(a,t),a=Oh(a,t),o=zh(o),a=zh(a),t.isWebGL2&&t.isRawShaderMaterial!==!0&&(m=`#version 300 es
`,b=["precision mediump sampler2DArray;","#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+b,y=["#define varying in",t.glslVersion===ua?"":"layout(location = 0) out highp vec4 pc_fragColor;",t.glslVersion===ua?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+y);const T=m+b+o,E=m+y+a,S=Uh(i,i.VERTEX_SHADER,T),D=Uh(i,i.FRAGMENT_SHADER,E);if(i.attachShader(_,S),i.attachShader(_,D),t.index0AttributeName!==void 0?i.bindAttribLocation(_,0,t.index0AttributeName):t.morphTargets===!0&&i.bindAttribLocation(_,0,"position"),i.linkProgram(_),r.debug.checkShaderErrors){const Z=i.getProgramInfoLog(_).trim(),z=i.getShaderInfoLog(S).trim(),A=i.getShaderInfoLog(D).trim();let F=!0,G=!0;if(i.getProgramParameter(_,i.LINK_STATUS)===!1){F=!1;const W=Bh(i,S,"vertex"),q=Bh(i,D,"fragment");console.error("THREE.WebGLProgram: Shader Error "+i.getError()+" - VALIDATE_STATUS "+i.getProgramParameter(_,i.VALIDATE_STATUS)+`

Program Info Log: `+Z+`
`+W+`
`+q)}else Z!==""?console.warn("THREE.WebGLProgram: Program Info Log:",Z):(z===""||A==="")&&(G=!1);G&&(this.diagnostics={runnable:F,programLog:Z,vertexShader:{log:z,prefix:b},fragmentShader:{log:A,prefix:y}})}i.deleteShader(S),i.deleteShader(D);let U;this.getUniforms=function(){return U===void 0&&(U=new Dn(i,_)),U};let N;return this.getAttributes=function(){return N===void 0&&(N=Ny(i,_)),N},this.destroy=function(){n.releaseStatesOfProgram(this),i.deleteProgram(_),this.program=void 0},this.name=t.shaderName,this.id=Ly++,this.cacheKey=e,this.usedTimes=1,this.program=_,this.vertexShader=S,this.fragmentShader=D,this}let Jy=0;class $y{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(e){const t=e.vertexShader,n=e.fragmentShader,i=this._getShaderStage(t),s=this._getShaderStage(n),o=this._getShaderCacheForMaterial(e);return o.has(i)===!1&&(o.add(i),i.usedTimes++),o.has(s)===!1&&(o.add(s),s.usedTimes++),this}remove(e){const t=this.materialCache.get(e);for(const n of t)n.usedTimes--,n.usedTimes===0&&this.shaderCache.delete(n);return this.materialCache.delete(e),this}getVertexShaderID(e){return this._getShaderStage(e.vertexShader).id}getFragmentShaderID(e){return this._getShaderStage(e.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(e){const t=this.materialCache;return t.has(e)===!1&&t.set(e,new Set),t.get(e)}_getShaderStage(e){const t=this.shaderCache;if(t.has(e)===!1){const n=new Ky;t.set(e,n)}return t.get(e)}}class Ky{constructor(){this.id=Jy++,this.usedTimes=0}}function jy(r,e,t,n,i,s,o){const a=new Ts,c=new $y,h=[],u=i.isWebGL2,d=i.logarithmicDepthBuffer,f=i.floatVertexTextures,p=i.maxVertexUniforms,g=i.vertexTextures;let _=i.precision;const b={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function y(A){const G=A.skeleton.bones;if(f)return 1024;{const q=Math.floor((p-20)/4),X=Math.min(q,G.length);return X<G.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+G.length+" bones. This GPU supports "+X+"."),0):X}}function m(A,F,G,W,q){const X=W.fog,J=q.geometry,k=A.isMeshStandardMaterial?W.environment:null,Q=(A.isMeshStandardMaterial?t:e).get(A.envMap||k),re=!!Q&&(Q.mapping===bi||Q.mapping===yr)?Q.image.height:null,se=b[A.type],ae=q.isSkinnedMesh?y(q):0;A.precision!==null&&(_=i.getMaxPrecision(A.precision),_!==A.precision&&console.warn("THREE.WebGLProgram.getParameters:",A.precision,"not supported, using",_,"instead."));const Ee=J.morphAttributes.position||J.morphAttributes.normal||J.morphAttributes.color,ze=Ee!==void 0?Ee.length:0;let be=0;J.morphAttributes.position!==void 0&&(be=1),J.morphAttributes.normal!==void 0&&(be=2),J.morphAttributes.color!==void 0&&(be=3);let H,Oe,Re,M;if(se){const ce=Vt[se];H=ce.vertexShader,Oe=ce.fragmentShader}else H=A.vertexShader,Oe=A.fragmentShader,c.update(A),Re=c.getVertexShaderID(A),M=c.getFragmentShaderID(A);const ye=r.getRenderTarget(),De=A.alphaTest>0,$=A.clearcoat>0;return{isWebGL2:u,shaderID:se,shaderName:A.type,vertexShader:H,fragmentShader:Oe,defines:A.defines,customVertexShaderID:Re,customFragmentShaderID:M,isRawShaderMaterial:A.isRawShaderMaterial===!0,glslVersion:A.glslVersion,precision:_,instancing:q.isInstancedMesh===!0,instancingColor:q.isInstancedMesh===!0&&q.instanceColor!==null,supportsVertexTextures:g,outputEncoding:ye===null?r.outputEncoding:ye.isXRRenderTarget===!0?ye.texture.encoding:sn,map:!!A.map,matcap:!!A.matcap,envMap:!!Q,envMapMode:Q&&Q.mapping,envMapCubeUVHeight:re,lightMap:!!A.lightMap,aoMap:!!A.aoMap,emissiveMap:!!A.emissiveMap,bumpMap:!!A.bumpMap,normalMap:!!A.normalMap,objectSpaceNormalMap:A.normalMapType===Vc,tangentSpaceNormalMap:A.normalMapType===Jn,decodeVideoTexture:!!A.map&&A.map.isVideoTexture===!0&&A.map.encoding===je,clearcoat:$,clearcoatMap:$&&!!A.clearcoatMap,clearcoatRoughnessMap:$&&!!A.clearcoatRoughnessMap,clearcoatNormalMap:$&&!!A.clearcoatNormalMap,displacementMap:!!A.displacementMap,roughnessMap:!!A.roughnessMap,metalnessMap:!!A.metalnessMap,specularMap:!!A.specularMap,specularIntensityMap:!!A.specularIntensityMap,specularColorMap:!!A.specularColorMap,opaque:A.transparent===!1&&A.blending===Gn,alphaMap:!!A.alphaMap,alphaTest:De,gradientMap:!!A.gradientMap,sheen:A.sheen>0,sheenColorMap:!!A.sheenColorMap,sheenRoughnessMap:!!A.sheenRoughnessMap,transmission:A.transmission>0,transmissionMap:!!A.transmissionMap,thicknessMap:!!A.thicknessMap,combine:A.combine,vertexTangents:!!A.normalMap&&!!J.attributes.tangent,vertexColors:A.vertexColors,vertexAlphas:A.vertexColors===!0&&!!J.attributes.color&&J.attributes.color.itemSize===4,vertexUvs:!!A.map||!!A.bumpMap||!!A.normalMap||!!A.specularMap||!!A.alphaMap||!!A.emissiveMap||!!A.roughnessMap||!!A.metalnessMap||!!A.clearcoatMap||!!A.clearcoatRoughnessMap||!!A.clearcoatNormalMap||!!A.displacementMap||!!A.transmissionMap||!!A.thicknessMap||!!A.specularIntensityMap||!!A.specularColorMap||!!A.sheenColorMap||!!A.sheenRoughnessMap,uvsVertexOnly:!(!!A.map||!!A.bumpMap||!!A.normalMap||!!A.specularMap||!!A.alphaMap||!!A.emissiveMap||!!A.roughnessMap||!!A.metalnessMap||!!A.clearcoatNormalMap||A.transmission>0||!!A.transmissionMap||!!A.thicknessMap||!!A.specularIntensityMap||!!A.specularColorMap||A.sheen>0||!!A.sheenColorMap||!!A.sheenRoughnessMap)&&!!A.displacementMap,fog:!!X,useFog:A.fog,fogExp2:X&&X.isFogExp2,flatShading:!!A.flatShading,sizeAttenuation:A.sizeAttenuation,logarithmicDepthBuffer:d,skinning:q.isSkinnedMesh===!0&&ae>0,maxBones:ae,useVertexTexture:f,morphTargets:J.morphAttributes.position!==void 0,morphNormals:J.morphAttributes.normal!==void 0,morphColors:J.morphAttributes.color!==void 0,morphTargetsCount:ze,morphTextureStride:be,numDirLights:F.directional.length,numPointLights:F.point.length,numSpotLights:F.spot.length,numRectAreaLights:F.rectArea.length,numHemiLights:F.hemi.length,numDirLightShadows:F.directionalShadowMap.length,numPointLightShadows:F.pointShadowMap.length,numSpotLightShadows:F.spotShadowMap.length,numClippingPlanes:o.numPlanes,numClipIntersection:o.numIntersection,dithering:A.dithering,shadowMapEnabled:r.shadowMap.enabled&&G.length>0,shadowMapType:r.shadowMap.type,toneMapping:A.toneMapped?r.toneMapping:nn,physicallyCorrectLights:r.physicallyCorrectLights,premultipliedAlpha:A.premultipliedAlpha,doubleSided:A.side===Hn,flipSided:A.side===rt,depthPacking:A.depthPacking!==void 0?A.depthPacking:!1,index0AttributeName:A.index0AttributeName,extensionDerivatives:A.extensions&&A.extensions.derivatives,extensionFragDepth:A.extensions&&A.extensions.fragDepth,extensionDrawBuffers:A.extensions&&A.extensions.drawBuffers,extensionShaderTextureLOD:A.extensions&&A.extensions.shaderTextureLOD,rendererExtensionFragDepth:u||n.has("EXT_frag_depth"),rendererExtensionDrawBuffers:u||n.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:u||n.has("EXT_shader_texture_lod"),customProgramCacheKey:A.customProgramCacheKey()}}function T(A){const F=[];if(A.shaderID?F.push(A.shaderID):(F.push(A.customVertexShaderID),F.push(A.customFragmentShaderID)),A.defines!==void 0)for(const G in A.defines)F.push(G),F.push(A.defines[G]);return A.isRawShaderMaterial===!1&&(E(F,A),S(F,A),F.push(r.outputEncoding)),F.push(A.customProgramCacheKey),F.join()}function E(A,F){A.push(F.precision),A.push(F.outputEncoding),A.push(F.envMapMode),A.push(F.envMapCubeUVHeight),A.push(F.combine),A.push(F.vertexUvs),A.push(F.fogExp2),A.push(F.sizeAttenuation),A.push(F.maxBones),A.push(F.morphTargetsCount),A.push(F.morphAttributeCount),A.push(F.numDirLights),A.push(F.numPointLights),A.push(F.numSpotLights),A.push(F.numHemiLights),A.push(F.numRectAreaLights),A.push(F.numDirLightShadows),A.push(F.numPointLightShadows),A.push(F.numSpotLightShadows),A.push(F.shadowMapType),A.push(F.toneMapping),A.push(F.numClippingPlanes),A.push(F.numClipIntersection)}function S(A,F){a.disableAll(),F.isWebGL2&&a.enable(0),F.supportsVertexTextures&&a.enable(1),F.instancing&&a.enable(2),F.instancingColor&&a.enable(3),F.map&&a.enable(4),F.matcap&&a.enable(5),F.envMap&&a.enable(6),F.lightMap&&a.enable(7),F.aoMap&&a.enable(8),F.emissiveMap&&a.enable(9),F.bumpMap&&a.enable(10),F.normalMap&&a.enable(11),F.objectSpaceNormalMap&&a.enable(12),F.tangentSpaceNormalMap&&a.enable(13),F.clearcoat&&a.enable(14),F.clearcoatMap&&a.enable(15),F.clearcoatRoughnessMap&&a.enable(16),F.clearcoatNormalMap&&a.enable(17),F.displacementMap&&a.enable(18),F.specularMap&&a.enable(19),F.roughnessMap&&a.enable(20),F.metalnessMap&&a.enable(21),F.gradientMap&&a.enable(22),F.alphaMap&&a.enable(23),F.alphaTest&&a.enable(24),F.vertexColors&&a.enable(25),F.vertexAlphas&&a.enable(26),F.vertexUvs&&a.enable(27),F.vertexTangents&&a.enable(28),F.uvsVertexOnly&&a.enable(29),F.fog&&a.enable(30),A.push(a.mask),a.disableAll(),F.useFog&&a.enable(0),F.flatShading&&a.enable(1),F.logarithmicDepthBuffer&&a.enable(2),F.skinning&&a.enable(3),F.useVertexTexture&&a.enable(4),F.morphTargets&&a.enable(5),F.morphNormals&&a.enable(6),F.morphColors&&a.enable(7),F.premultipliedAlpha&&a.enable(8),F.shadowMapEnabled&&a.enable(9),F.physicallyCorrectLights&&a.enable(10),F.doubleSided&&a.enable(11),F.flipSided&&a.enable(12),F.depthPacking&&a.enable(13),F.dithering&&a.enable(14),F.specularIntensityMap&&a.enable(15),F.specularColorMap&&a.enable(16),F.transmission&&a.enable(17),F.transmissionMap&&a.enable(18),F.thicknessMap&&a.enable(19),F.sheen&&a.enable(20),F.sheenColorMap&&a.enable(21),F.sheenRoughnessMap&&a.enable(22),F.decodeVideoTexture&&a.enable(23),F.opaque&&a.enable(24),A.push(a.mask)}function D(A){const F=b[A.type];let G;if(F){const W=Vt[F];G=mh.clone(W.uniforms)}else G=A.uniforms;return G}function U(A,F){let G;for(let W=0,q=h.length;W<q;W++){const X=h[W];if(X.cacheKey===F){G=X,++G.usedTimes;break}}return G===void 0&&(G=new Zy(r,F,A,s),h.push(G)),G}function N(A){if(--A.usedTimes==0){const F=h.indexOf(A);h[F]=h[h.length-1],h.pop(),A.destroy()}}function Z(A){c.remove(A)}function z(){c.dispose()}return{getParameters:m,getProgramCacheKey:T,getUniforms:D,acquireProgram:U,releaseProgram:N,releaseShaderCache:Z,programs:h,dispose:z}}function Qy(){let r=new WeakMap;function e(s){let o=r.get(s);return o===void 0&&(o={},r.set(s,o)),o}function t(s){r.delete(s)}function n(s,o,a){r.get(s)[o]=a}function i(){r=new WeakMap}return{get:e,remove:t,update:n,dispose:i}}function ex(r,e){return r.groupOrder!==e.groupOrder?r.groupOrder-e.groupOrder:r.renderOrder!==e.renderOrder?r.renderOrder-e.renderOrder:r.material.id!==e.material.id?r.material.id-e.material.id:r.z!==e.z?r.z-e.z:r.id-e.id}function Vh(r,e){return r.groupOrder!==e.groupOrder?r.groupOrder-e.groupOrder:r.renderOrder!==e.renderOrder?r.renderOrder-e.renderOrder:r.z!==e.z?e.z-r.z:r.id-e.id}function kh(){const r=[];let e=0;const t=[],n=[],i=[];function s(){e=0,t.length=0,n.length=0,i.length=0}function o(d,f,p,g,_,b){let y=r[e];return y===void 0?(y={id:d.id,object:d,geometry:f,material:p,groupOrder:g,renderOrder:d.renderOrder,z:_,group:b},r[e]=y):(y.id=d.id,y.object=d,y.geometry=f,y.material=p,y.groupOrder=g,y.renderOrder=d.renderOrder,y.z=_,y.group=b),e++,y}function a(d,f,p,g,_,b){const y=o(d,f,p,g,_,b);p.transmission>0?n.push(y):p.transparent===!0?i.push(y):t.push(y)}function c(d,f,p,g,_,b){const y=o(d,f,p,g,_,b);p.transmission>0?n.unshift(y):p.transparent===!0?i.unshift(y):t.unshift(y)}function h(d,f){t.length>1&&t.sort(d||ex),n.length>1&&n.sort(f||Vh),i.length>1&&i.sort(f||Vh)}function u(){for(let d=e,f=r.length;d<f;d++){const p=r[d];if(p.id===null)break;p.id=null,p.object=null,p.geometry=null,p.material=null,p.group=null}}return{opaque:t,transmissive:n,transparent:i,init:s,push:a,unshift:c,finish:u,sort:h}}function tx(){let r=new WeakMap;function e(n,i){let s;return r.has(n)===!1?(s=new kh,r.set(n,[s])):i>=r.get(n).length?(s=new kh,r.get(n).push(s)):s=r.get(n)[i],s}function t(){r=new WeakMap}return{get:e,dispose:t}}function nx(){const r={};return{get:function(e){if(r[e.id]!==void 0)return r[e.id];let t;switch(e.type){case"DirectionalLight":t={direction:new L,color:new ge};break;case"SpotLight":t={position:new L,direction:new L,color:new ge,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":t={position:new L,color:new ge,distance:0,decay:0};break;case"HemisphereLight":t={direction:new L,skyColor:new ge,groundColor:new ge};break;case"RectAreaLight":t={color:new ge,position:new L,halfWidth:new L,halfHeight:new L};break}return r[e.id]=t,t}}}function ix(){const r={};return{get:function(e){if(r[e.id]!==void 0)return r[e.id];let t;switch(e.type){case"DirectionalLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new te};break;case"SpotLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new te};break;case"PointLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new te,shadowCameraNear:1,shadowCameraFar:1e3};break}return r[e.id]=t,t}}}let rx=0;function sx(r,e){return(e.castShadow?1:0)-(r.castShadow?1:0)}function ox(r,e){const t=new nx,n=ix(),i={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadow:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]};for(let u=0;u<9;u++)i.probe.push(new L);const s=new L,o=new Me,a=new Me;function c(u,d){let f=0,p=0,g=0;for(let Z=0;Z<9;Z++)i.probe[Z].set(0,0,0);let _=0,b=0,y=0,m=0,T=0,E=0,S=0,D=0;u.sort(sx);const U=d!==!0?Math.PI:1;for(let Z=0,z=u.length;Z<z;Z++){const A=u[Z],F=A.color,G=A.intensity,W=A.distance,q=A.shadow&&A.shadow.map?A.shadow.map.texture:null;if(A.isAmbientLight)f+=F.r*G*U,p+=F.g*G*U,g+=F.b*G*U;else if(A.isLightProbe)for(let X=0;X<9;X++)i.probe[X].addScaledVector(A.sh.coefficients[X],G);else if(A.isDirectionalLight){const X=t.get(A);if(X.color.copy(A.color).multiplyScalar(A.intensity*U),A.castShadow){const J=A.shadow,k=n.get(A);k.shadowBias=J.bias,k.shadowNormalBias=J.normalBias,k.shadowRadius=J.radius,k.shadowMapSize=J.mapSize,i.directionalShadow[_]=k,i.directionalShadowMap[_]=q,i.directionalShadowMatrix[_]=A.shadow.matrix,E++}i.directional[_]=X,_++}else if(A.isSpotLight){const X=t.get(A);if(X.position.setFromMatrixPosition(A.matrixWorld),X.color.copy(F).multiplyScalar(G*U),X.distance=W,X.coneCos=Math.cos(A.angle),X.penumbraCos=Math.cos(A.angle*(1-A.penumbra)),X.decay=A.decay,A.castShadow){const J=A.shadow,k=n.get(A);k.shadowBias=J.bias,k.shadowNormalBias=J.normalBias,k.shadowRadius=J.radius,k.shadowMapSize=J.mapSize,i.spotShadow[y]=k,i.spotShadowMap[y]=q,i.spotShadowMatrix[y]=A.shadow.matrix,D++}i.spot[y]=X,y++}else if(A.isRectAreaLight){const X=t.get(A);X.color.copy(F).multiplyScalar(G),X.halfWidth.set(A.width*.5,0,0),X.halfHeight.set(0,A.height*.5,0),i.rectArea[m]=X,m++}else if(A.isPointLight){const X=t.get(A);if(X.color.copy(A.color).multiplyScalar(A.intensity*U),X.distance=A.distance,X.decay=A.decay,A.castShadow){const J=A.shadow,k=n.get(A);k.shadowBias=J.bias,k.shadowNormalBias=J.normalBias,k.shadowRadius=J.radius,k.shadowMapSize=J.mapSize,k.shadowCameraNear=J.camera.near,k.shadowCameraFar=J.camera.far,i.pointShadow[b]=k,i.pointShadowMap[b]=q,i.pointShadowMatrix[b]=A.shadow.matrix,S++}i.point[b]=X,b++}else if(A.isHemisphereLight){const X=t.get(A);X.skyColor.copy(A.color).multiplyScalar(G*U),X.groundColor.copy(A.groundColor).multiplyScalar(G*U),i.hemi[T]=X,T++}}m>0&&(e.isWebGL2||r.has("OES_texture_float_linear")===!0?(i.rectAreaLTC1=pe.LTC_FLOAT_1,i.rectAreaLTC2=pe.LTC_FLOAT_2):r.has("OES_texture_half_float_linear")===!0?(i.rectAreaLTC1=pe.LTC_HALF_1,i.rectAreaLTC2=pe.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),i.ambient[0]=f,i.ambient[1]=p,i.ambient[2]=g;const N=i.hash;(N.directionalLength!==_||N.pointLength!==b||N.spotLength!==y||N.rectAreaLength!==m||N.hemiLength!==T||N.numDirectionalShadows!==E||N.numPointShadows!==S||N.numSpotShadows!==D)&&(i.directional.length=_,i.spot.length=y,i.rectArea.length=m,i.point.length=b,i.hemi.length=T,i.directionalShadow.length=E,i.directionalShadowMap.length=E,i.pointShadow.length=S,i.pointShadowMap.length=S,i.spotShadow.length=D,i.spotShadowMap.length=D,i.directionalShadowMatrix.length=E,i.pointShadowMatrix.length=S,i.spotShadowMatrix.length=D,N.directionalLength=_,N.pointLength=b,N.spotLength=y,N.rectAreaLength=m,N.hemiLength=T,N.numDirectionalShadows=E,N.numPointShadows=S,N.numSpotShadows=D,i.version=rx++)}function h(u,d){let f=0,p=0,g=0,_=0,b=0;const y=d.matrixWorldInverse;for(let m=0,T=u.length;m<T;m++){const E=u[m];if(E.isDirectionalLight){const S=i.directional[f];S.direction.setFromMatrixPosition(E.matrixWorld),s.setFromMatrixPosition(E.target.matrixWorld),S.direction.sub(s),S.direction.transformDirection(y),f++}else if(E.isSpotLight){const S=i.spot[g];S.position.setFromMatrixPosition(E.matrixWorld),S.position.applyMatrix4(y),S.direction.setFromMatrixPosition(E.matrixWorld),s.setFromMatrixPosition(E.target.matrixWorld),S.direction.sub(s),S.direction.transformDirection(y),g++}else if(E.isRectAreaLight){const S=i.rectArea[_];S.position.setFromMatrixPosition(E.matrixWorld),S.position.applyMatrix4(y),a.identity(),o.copy(E.matrixWorld),o.premultiply(y),a.extractRotation(o),S.halfWidth.set(E.width*.5,0,0),S.halfHeight.set(0,E.height*.5,0),S.halfWidth.applyMatrix4(a),S.halfHeight.applyMatrix4(a),_++}else if(E.isPointLight){const S=i.point[p];S.position.setFromMatrixPosition(E.matrixWorld),S.position.applyMatrix4(y),p++}else if(E.isHemisphereLight){const S=i.hemi[b];S.direction.setFromMatrixPosition(E.matrixWorld),S.direction.transformDirection(y),S.direction.normalize(),b++}}}return{setup:c,setupView:h,state:i}}function Wh(r,e){const t=new ox(r,e),n=[],i=[];function s(){n.length=0,i.length=0}function o(d){n.push(d)}function a(d){i.push(d)}function c(d){t.setup(n,d)}function h(d){t.setupView(n,d)}return{init:s,state:{lightsArray:n,shadowsArray:i,lights:t},setupLights:c,setupLightsView:h,pushLight:o,pushShadow:a}}function ax(r,e){let t=new WeakMap;function n(s,o=0){let a;return t.has(s)===!1?(a=new Wh(r,e),t.set(s,[a])):o>=t.get(s).length?(a=new Wh(r,e),t.get(s).push(a)):a=t.get(s)[o],a}function i(){t=new WeakMap}return{get:n,dispose:i}}class Ws extends ot{constructor(e){super();this.type="MeshDepthMaterial",this.depthPacking=Hc,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.setValues(e)}copy(e){return super.copy(e),this.depthPacking=e.depthPacking,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this}}Ws.prototype.isMeshDepthMaterial=!0;class Xs extends ot{constructor(e){super();this.type="MeshDistanceMaterial",this.referencePosition=new L,this.nearDistance=1,this.farDistance=1e3,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.setValues(e)}copy(e){return super.copy(e),this.referencePosition.copy(e.referencePosition),this.nearDistance=e.nearDistance,this.farDistance=e.farDistance,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this}}Xs.prototype.isMeshDistanceMaterial=!0;const lx=`void main() {
	gl_Position = vec4( position, 1.0 );
}`,cx=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;function Xh(r,e,t){let n=new Ir;const i=new te,s=new te,o=new qe,a=new Ws({depthPacking:Gc}),c=new Xs,h={},u=t.maxTextureSize,d={0:rt,1:zn,2:Hn},f=new Nt({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new te},radius:{value:4}},vertexShader:lx,fragmentShader:cx}),p=f.clone();p.defines.HORIZONTAL_PASS=1;const g=new Se;g.setAttribute("position",new He(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const _=new dt(g,f),b=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=Do,this.render=function(E,S,D){if(b.enabled===!1||b.autoUpdate===!1&&b.needsUpdate===!1||E.length===0)return;const U=r.getRenderTarget(),N=r.getActiveCubeFace(),Z=r.getActiveMipmapLevel(),z=r.state;z.setBlending(tn),z.buffers.color.setClear(1,1,1,1),z.buffers.depth.setTest(!0),z.setScissorTest(!1);for(let A=0,F=E.length;A<F;A++){const G=E[A],W=G.shadow;if(W===void 0){console.warn("THREE.WebGLShadowMap:",G,"has no shadow.");continue}if(W.autoUpdate===!1&&W.needsUpdate===!1)continue;i.copy(W.mapSize);const q=W.getFrameExtents();if(i.multiply(q),s.copy(W.mapSize),(i.x>u||i.y>u)&&(i.x>u&&(s.x=Math.floor(u/q.x),i.x=s.x*q.x,W.mapSize.x=s.x),i.y>u&&(s.y=Math.floor(u/q.y),i.y=s.y*q.y,W.mapSize.y=s.y)),W.map===null&&!W.isPointLightShadow&&this.type===wi){const J={minFilter:et,magFilter:et,format:wt};W.map=new At(i.x,i.y,J),W.map.texture.name=G.name+".shadowMap",W.mapPass=new At(i.x,i.y,J),W.camera.updateProjectionMatrix()}if(W.map===null){const J={minFilter:ht,magFilter:ht,format:wt};W.map=new At(i.x,i.y,J),W.map.texture.name=G.name+".shadowMap",W.camera.updateProjectionMatrix()}r.setRenderTarget(W.map),r.clear();const X=W.getViewportCount();for(let J=0;J<X;J++){const k=W.getViewport(J);o.set(s.x*k.x,s.y*k.y,s.x*k.z,s.y*k.w),z.viewport(o),W.updateMatrices(G,J),n=W.getFrustum(),T(S,D,W.camera,G,this.type)}!W.isPointLightShadow&&this.type===wi&&y(W,D),W.needsUpdate=!1}b.needsUpdate=!1,r.setRenderTarget(U,N,Z)};function y(E,S){const D=e.update(_);f.defines.VSM_SAMPLES!==E.blurSamples&&(f.defines.VSM_SAMPLES=E.blurSamples,p.defines.VSM_SAMPLES=E.blurSamples,f.needsUpdate=!0,p.needsUpdate=!0),f.uniforms.shadow_pass.value=E.map.texture,f.uniforms.resolution.value=E.mapSize,f.uniforms.radius.value=E.radius,r.setRenderTarget(E.mapPass),r.clear(),r.renderBufferDirect(S,null,D,f,_,null),p.uniforms.shadow_pass.value=E.mapPass.texture,p.uniforms.resolution.value=E.mapSize,p.uniforms.radius.value=E.radius,r.setRenderTarget(E.map),r.clear(),r.renderBufferDirect(S,null,D,p,_,null)}function m(E,S,D,U,N,Z){let z=null;const A=D.isPointLight===!0?E.customDistanceMaterial:E.customDepthMaterial;if(A!==void 0?z=A:z=D.isPointLight===!0?c:a,r.localClippingEnabled&&S.clipShadows===!0&&S.clippingPlanes.length!==0||S.displacementMap&&S.displacementScale!==0||S.alphaMap&&S.alphaTest>0){const F=z.uuid,G=S.uuid;let W=h[F];W===void 0&&(W={},h[F]=W);let q=W[G];q===void 0&&(q=z.clone(),W[G]=q),z=q}return z.visible=S.visible,z.wireframe=S.wireframe,Z===wi?z.side=S.shadowSide!==null?S.shadowSide:S.side:z.side=S.shadowSide!==null?S.shadowSide:d[S.side],z.alphaMap=S.alphaMap,z.alphaTest=S.alphaTest,z.clipShadows=S.clipShadows,z.clippingPlanes=S.clippingPlanes,z.clipIntersection=S.clipIntersection,z.displacementMap=S.displacementMap,z.displacementScale=S.displacementScale,z.displacementBias=S.displacementBias,z.wireframeLinewidth=S.wireframeLinewidth,z.linewidth=S.linewidth,D.isPointLight===!0&&z.isMeshDistanceMaterial===!0&&(z.referencePosition.setFromMatrixPosition(D.matrixWorld),z.nearDistance=U,z.farDistance=N),z}function T(E,S,D,U,N){if(E.visible===!1)return;if(E.layers.test(S.layers)&&(E.isMesh||E.isLine||E.isPoints)&&(E.castShadow||E.receiveShadow&&N===wi)&&(!E.frustumCulled||n.intersectsObject(E))){E.modelViewMatrix.multiplyMatrices(D.matrixWorldInverse,E.matrixWorld);const A=e.update(E),F=E.material;if(Array.isArray(F)){const G=A.groups;for(let W=0,q=G.length;W<q;W++){const X=G[W],J=F[X.materialIndex];if(J&&J.visible){const k=m(E,J,U,D.near,D.far,N);r.renderBufferDirect(D,null,A,k,E,X)}}}else if(F.visible){const G=m(E,F,U,D.near,D.far,N);r.renderBufferDirect(D,null,A,G,E,null)}}const z=E.children;for(let A=0,F=z.length;A<F;A++)T(z[A],S,D,U,N)}}function hx(r,e,t){const n=t.isWebGL2;function i(){let B=!1;const fe=new qe;let ue=null;const Ae=new qe(0,0,0,0);return{setMask:function(xe){ue!==xe&&!B&&(r.colorMask(xe,xe,xe,xe),ue=xe)},setLocked:function(xe){B=xe},setClear:function(xe,he,Le,Ge,St){St===!0&&(xe*=Ge,he*=Ge,Le*=Ge),fe.set(xe,he,Le,Ge),Ae.equals(fe)===!1&&(r.clearColor(xe,he,Le,Ge),Ae.copy(fe))},reset:function(){B=!1,ue=null,Ae.set(-1,0,0,0)}}}function s(){let B=!1,fe=null,ue=null,Ae=null;return{setTest:function(xe){xe?be(r.DEPTH_TEST):H(r.DEPTH_TEST)},setMask:function(xe){fe!==xe&&!B&&(r.depthMask(xe),fe=xe)},setFunc:function(xe){if(ue!==xe){if(xe)switch(xe){case ac:r.depthFunc(r.NEVER);break;case lc:r.depthFunc(r.ALWAYS);break;case cc:r.depthFunc(r.LESS);break;case ss:r.depthFunc(r.LEQUAL);break;case hc:r.depthFunc(r.EQUAL);break;case uc:r.depthFunc(r.GEQUAL);break;case dc:r.depthFunc(r.GREATER);break;case fc:r.depthFunc(r.NOTEQUAL);break;default:r.depthFunc(r.LEQUAL)}else r.depthFunc(r.LEQUAL);ue=xe}},setLocked:function(xe){B=xe},setClear:function(xe){Ae!==xe&&(r.clearDepth(xe),Ae=xe)},reset:function(){B=!1,fe=null,ue=null,Ae=null}}}function o(){let B=!1,fe=null,ue=null,Ae=null,xe=null,he=null,Le=null,Ge=null,St=null;return{setTest:function($e){B||($e?be(r.STENCIL_TEST):H(r.STENCIL_TEST))},setMask:function($e){fe!==$e&&!B&&(r.stencilMask($e),fe=$e)},setFunc:function($e,Xt,qt){(ue!==$e||Ae!==Xt||xe!==qt)&&(r.stencilFunc($e,Xt,qt),ue=$e,Ae=Xt,xe=qt)},setOp:function($e,Xt,qt){(he!==$e||Le!==Xt||Ge!==qt)&&(r.stencilOp($e,Xt,qt),he=$e,Le=Xt,Ge=qt)},setLocked:function($e){B=$e},setClear:function($e){St!==$e&&(r.clearStencil($e),St=$e)},reset:function(){B=!1,fe=null,ue=null,Ae=null,xe=null,he=null,Le=null,Ge=null,St=null}}}const a=new i,c=new s,h=new o;let u={},d={},f=new WeakMap,p=[],g=null,_=!1,b=null,y=null,m=null,T=null,E=null,S=null,D=null,U=!1,N=null,Z=null,z=null,A=null,F=null;const G=r.getParameter(r.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let W=!1,q=0;const X=r.getParameter(r.VERSION);X.indexOf("WebGL")!==-1?(q=parseFloat(/^WebGL (\d)/.exec(X)[1]),W=q>=1):X.indexOf("OpenGL ES")!==-1&&(q=parseFloat(/^OpenGL ES (\d)/.exec(X)[1]),W=q>=2);let J=null,k={};const Q=r.getParameter(r.SCISSOR_BOX),re=r.getParameter(r.VIEWPORT),se=new qe().fromArray(Q),ae=new qe().fromArray(re);function Ee(B,fe,ue){const Ae=new Uint8Array(4),xe=r.createTexture();r.bindTexture(B,xe),r.texParameteri(B,r.TEXTURE_MIN_FILTER,r.NEAREST),r.texParameteri(B,r.TEXTURE_MAG_FILTER,r.NEAREST);for(let he=0;he<ue;he++)r.texImage2D(fe+he,0,r.RGBA,1,1,0,r.RGBA,r.UNSIGNED_BYTE,Ae);return xe}const ze={};ze[r.TEXTURE_2D]=Ee(r.TEXTURE_2D,r.TEXTURE_2D,1),ze[r.TEXTURE_CUBE_MAP]=Ee(r.TEXTURE_CUBE_MAP,r.TEXTURE_CUBE_MAP_POSITIVE_X,6),a.setClear(0,0,0,1),c.setClear(1),h.setClear(0),be(r.DEPTH_TEST),c.setFunc(ss),ce(!1),_e(Io),be(r.CULL_FACE),$(tn);function be(B){u[B]!==!0&&(r.enable(B),u[B]=!0)}function H(B){u[B]!==!1&&(r.disable(B),u[B]=!1)}function Oe(B,fe){return d[B]!==fe?(r.bindFramebuffer(B,fe),d[B]=fe,n&&(B===r.DRAW_FRAMEBUFFER&&(d[r.FRAMEBUFFER]=fe),B===r.FRAMEBUFFER&&(d[r.DRAW_FRAMEBUFFER]=fe)),!0):!1}function Re(B,fe){let ue=p,Ae=!1;if(B)if(ue=f.get(fe),ue===void 0&&(ue=[],f.set(fe,ue)),B.isWebGLMultipleRenderTargets){const xe=B.texture;if(ue.length!==xe.length||ue[0]!==r.COLOR_ATTACHMENT0){for(let he=0,Le=xe.length;he<Le;he++)ue[he]=r.COLOR_ATTACHMENT0+he;ue.length=xe.length,Ae=!0}}else ue[0]!==r.COLOR_ATTACHMENT0&&(ue[0]=r.COLOR_ATTACHMENT0,Ae=!0);else ue[0]!==r.BACK&&(ue[0]=r.BACK,Ae=!0);Ae&&(t.isWebGL2?r.drawBuffers(ue):e.get("WEBGL_draw_buffers").drawBuffersWEBGL(ue))}function M(B){return g!==B?(r.useProgram(B),g=B,!0):!1}const ye={[Vn]:r.FUNC_ADD,[$l]:r.FUNC_SUBTRACT,[Kl]:r.FUNC_REVERSE_SUBTRACT};if(n)ye[Oo]=r.MIN,ye[zo]=r.MAX;else{const B=e.get("EXT_blend_minmax");B!==null&&(ye[Oo]=B.MIN_EXT,ye[zo]=B.MAX_EXT)}const De={[jl]:r.ZERO,[Ql]:r.ONE,[ec]:r.SRC_COLOR,[Ho]:r.SRC_ALPHA,[oc]:r.SRC_ALPHA_SATURATE,[rc]:r.DST_COLOR,[nc]:r.DST_ALPHA,[tc]:r.ONE_MINUS_SRC_COLOR,[Go]:r.ONE_MINUS_SRC_ALPHA,[sc]:r.ONE_MINUS_DST_COLOR,[ic]:r.ONE_MINUS_DST_ALPHA};function $(B,fe,ue,Ae,xe,he,Le,Ge){if(B===tn){_===!0&&(H(r.BLEND),_=!1);return}if(_===!1&&(be(r.BLEND),_=!0),B!==Jl){if(B!==b||Ge!==U){if((y!==Vn||E!==Vn)&&(r.blendEquation(r.FUNC_ADD),y=Vn,E=Vn),Ge)switch(B){case Gn:r.blendFuncSeparate(r.ONE,r.ONE_MINUS_SRC_ALPHA,r.ONE,r.ONE_MINUS_SRC_ALPHA);break;case Uo:r.blendFunc(r.ONE,r.ONE);break;case Bo:r.blendFuncSeparate(r.ZERO,r.ONE_MINUS_SRC_COLOR,r.ZERO,r.ONE);break;case No:r.blendFuncSeparate(r.ZERO,r.SRC_COLOR,r.ZERO,r.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",B);break}else switch(B){case Gn:r.blendFuncSeparate(r.SRC_ALPHA,r.ONE_MINUS_SRC_ALPHA,r.ONE,r.ONE_MINUS_SRC_ALPHA);break;case Uo:r.blendFunc(r.SRC_ALPHA,r.ONE);break;case Bo:r.blendFuncSeparate(r.ZERO,r.ONE_MINUS_SRC_COLOR,r.ZERO,r.ONE);break;case No:r.blendFunc(r.ZERO,r.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",B);break}m=null,T=null,S=null,D=null,b=B,U=Ge}return}xe=xe||fe,he=he||ue,Le=Le||Ae,(fe!==y||xe!==E)&&(r.blendEquationSeparate(ye[fe],ye[xe]),y=fe,E=xe),(ue!==m||Ae!==T||he!==S||Le!==D)&&(r.blendFuncSeparate(De[ue],De[Ae],De[he],De[Le]),m=ue,T=Ae,S=he,D=Le),b=B,U=null}function oe(B,fe){B.side===Hn?H(r.CULL_FACE):be(r.CULL_FACE);let ue=B.side===rt;fe&&(ue=!ue),ce(ue),B.blending===Gn&&B.transparent===!1?$(tn):$(B.blending,B.blendEquation,B.blendSrc,B.blendDst,B.blendEquationAlpha,B.blendSrcAlpha,B.blendDstAlpha,B.premultipliedAlpha),c.setFunc(B.depthFunc),c.setTest(B.depthTest),c.setMask(B.depthWrite),a.setMask(B.colorWrite);const Ae=B.stencilWrite;h.setTest(Ae),Ae&&(h.setMask(B.stencilWriteMask),h.setFunc(B.stencilFunc,B.stencilRef,B.stencilFuncMask),h.setOp(B.stencilFail,B.stencilZFail,B.stencilZPass)),Te(B.polygonOffset,B.polygonOffsetFactor,B.polygonOffsetUnits),B.alphaToCoverage===!0?be(r.SAMPLE_ALPHA_TO_COVERAGE):H(r.SAMPLE_ALPHA_TO_COVERAGE)}function ce(B){N!==B&&(B?r.frontFace(r.CW):r.frontFace(r.CCW),N=B)}function _e(B){B!==ql?(be(r.CULL_FACE),B!==Z&&(B===Io?r.cullFace(r.BACK):B===Yl?r.cullFace(r.FRONT):r.cullFace(r.FRONT_AND_BACK))):H(r.CULL_FACE),Z=B}function me(B){B!==z&&(W&&r.lineWidth(B),z=B)}function Te(B,fe,ue){B?(be(r.POLYGON_OFFSET_FILL),(A!==fe||F!==ue)&&(r.polygonOffset(fe,ue),A=fe,F=ue)):H(r.POLYGON_OFFSET_FILL)}function we(B){B?be(r.SCISSOR_TEST):H(r.SCISSOR_TEST)}function Pe(B){B===void 0&&(B=r.TEXTURE0+G-1),J!==B&&(r.activeTexture(B),J=B)}function Je(B,fe){J===null&&Pe();let ue=k[J];ue===void 0&&(ue={type:void 0,texture:void 0},k[J]=ue),(ue.type!==B||ue.texture!==fe)&&(r.bindTexture(B,fe||ze[B]),ue.type=B,ue.texture=fe)}function I(){const B=k[J];B!==void 0&&B.type!==void 0&&(r.bindTexture(B.type,null),B.type=void 0,B.texture=void 0)}function C(){try{r.compressedTexImage2D.apply(r,arguments)}catch(B){console.error("THREE.WebGLState:",B)}}function j(){try{r.texSubImage2D.apply(r,arguments)}catch(B){console.error("THREE.WebGLState:",B)}}function ie(){try{r.texSubImage3D.apply(r,arguments)}catch(B){console.error("THREE.WebGLState:",B)}}function l(){try{r.compressedTexSubImage2D.apply(r,arguments)}catch(B){console.error("THREE.WebGLState:",B)}}function x(){try{r.texStorage2D.apply(r,arguments)}catch(B){console.error("THREE.WebGLState:",B)}}function w(){try{r.texStorage3D.apply(r,arguments)}catch(B){console.error("THREE.WebGLState:",B)}}function R(){try{r.texImage2D.apply(r,arguments)}catch(B){console.error("THREE.WebGLState:",B)}}function O(){try{r.texImage3D.apply(r,arguments)}catch(B){console.error("THREE.WebGLState:",B)}}function ne(B){se.equals(B)===!1&&(r.scissor(B.x,B.y,B.z,B.w),se.copy(B))}function le(B){ae.equals(B)===!1&&(r.viewport(B.x,B.y,B.z,B.w),ae.copy(B))}function de(){r.disable(r.BLEND),r.disable(r.CULL_FACE),r.disable(r.DEPTH_TEST),r.disable(r.POLYGON_OFFSET_FILL),r.disable(r.SCISSOR_TEST),r.disable(r.STENCIL_TEST),r.disable(r.SAMPLE_ALPHA_TO_COVERAGE),r.blendEquation(r.FUNC_ADD),r.blendFunc(r.ONE,r.ZERO),r.blendFuncSeparate(r.ONE,r.ZERO,r.ONE,r.ZERO),r.colorMask(!0,!0,!0,!0),r.clearColor(0,0,0,0),r.depthMask(!0),r.depthFunc(r.LESS),r.clearDepth(1),r.stencilMask(4294967295),r.stencilFunc(r.ALWAYS,0,4294967295),r.stencilOp(r.KEEP,r.KEEP,r.KEEP),r.clearStencil(0),r.cullFace(r.BACK),r.frontFace(r.CCW),r.polygonOffset(0,0),r.activeTexture(r.TEXTURE0),r.bindFramebuffer(r.FRAMEBUFFER,null),n===!0&&(r.bindFramebuffer(r.DRAW_FRAMEBUFFER,null),r.bindFramebuffer(r.READ_FRAMEBUFFER,null)),r.useProgram(null),r.lineWidth(1),r.scissor(0,0,r.canvas.width,r.canvas.height),r.viewport(0,0,r.canvas.width,r.canvas.height),u={},J=null,k={},d={},f=new WeakMap,p=[],g=null,_=!1,b=null,y=null,m=null,T=null,E=null,S=null,D=null,U=!1,N=null,Z=null,z=null,A=null,F=null,se.set(0,0,r.canvas.width,r.canvas.height),ae.set(0,0,r.canvas.width,r.canvas.height),a.reset(),c.reset(),h.reset()}return{buffers:{color:a,depth:c,stencil:h},enable:be,disable:H,bindFramebuffer:Oe,drawBuffers:Re,useProgram:M,setBlending:$,setMaterial:oe,setFlipSided:ce,setCullFace:_e,setLineWidth:me,setPolygonOffset:Te,setScissorTest:we,activeTexture:Pe,bindTexture:Je,unbindTexture:I,compressedTexImage2D:C,texImage2D:R,texImage3D:O,texStorage2D:x,texStorage3D:w,texSubImage2D:j,texSubImage3D:ie,compressedTexSubImage2D:l,scissor:ne,viewport:le,reset:de}}function ux(r,e,t,n,i,s,o){const a=i.isWebGL2,c=i.maxTextures,h=i.maxCubemapSize,u=i.maxTextureSize,d=i.maxSamples,f=e.has("WEBGL_multisampled_render_to_texture")?e.get("WEBGL_multisampled_render_to_texture"):null,p=new WeakMap;let g;const _=new WeakMap;let b=!1;try{b=typeof OffscreenCanvas!="undefined"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function y(I,C){return b?new OffscreenCanvas(I,C):Tr("canvas")}function m(I,C,j,ie){let l=1;if((I.width>ie||I.height>ie)&&(l=ie/Math.max(I.width,I.height)),l<1||C===!0)if(typeof HTMLImageElement!="undefined"&&I instanceof HTMLImageElement||typeof HTMLCanvasElement!="undefined"&&I instanceof HTMLCanvasElement||typeof ImageBitmap!="undefined"&&I instanceof ImageBitmap){const x=C?xs:Math.floor,w=x(l*I.width),R=x(l*I.height);g===void 0&&(g=y(w,R));const O=j?y(w,R):g;return O.width=w,O.height=R,O.getContext("2d").drawImage(I,0,0,w,R),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+I.width+"x"+I.height+") to ("+w+"x"+R+")."),O}else return"data"in I&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+I.width+"x"+I.height+")."),I;return I}function T(I){return fa(I.width)&&fa(I.height)}function E(I){return a?!1:I.wrapS!==Tt||I.wrapT!==Tt||I.minFilter!==ht&&I.minFilter!==et}function S(I,C){return I.generateMipmaps&&C&&I.minFilter!==ht&&I.minFilter!==et}function D(I){r.generateMipmap(I)}function U(I,C,j,ie,l=!1){if(a===!1)return C;if(I!==null){if(r[I]!==void 0)return r[I];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+I+"'")}let x=C;return C===r.RED&&(j===r.FLOAT&&(x=r.R32F),j===r.HALF_FLOAT&&(x=r.R16F),j===r.UNSIGNED_BYTE&&(x=r.R8)),C===r.RG&&(j===r.FLOAT&&(x=r.RG32F),j===r.HALF_FLOAT&&(x=r.RG16F),j===r.UNSIGNED_BYTE&&(x=r.RG8)),C===r.RGBA&&(j===r.FLOAT&&(x=r.RGBA32F),j===r.HALF_FLOAT&&(x=r.RGBA16F),j===r.UNSIGNED_BYTE&&(x=ie===je&&l===!1?r.SRGB8_ALPHA8:r.RGBA8),j===r.UNSIGNED_SHORT_4_4_4_4&&(x=r.RGBA4),j===r.UNSIGNED_SHORT_5_5_5_1&&(x=r.RGB5_A1)),(x===r.R16F||x===r.R32F||x===r.RG16F||x===r.RG32F||x===r.RGBA16F||x===r.RGBA32F)&&e.get("EXT_color_buffer_float"),x}function N(I,C,j){return S(I,j)===!0||I.isFramebufferTexture&&I.minFilter!==ht&&I.minFilter!==et?Math.log2(Math.max(C.width,C.height))+1:I.mipmaps!==void 0&&I.mipmaps.length>0?I.mipmaps.length:I.isCompressedTexture&&Array.isArray(I.image)?C.mipmaps.length:1}function Z(I){return I===ht||I===as||I===ls?r.NEAREST:r.LINEAR}function z(I){const C=I.target;C.removeEventListener("dispose",z),F(C),C.isVideoTexture&&p.delete(C)}function A(I){const C=I.target;C.removeEventListener("dispose",A),W(C)}function F(I){const C=n.get(I);if(C.__webglInit===void 0)return;const j=I.source,ie=_.get(j);if(ie){const l=ie[C.__cacheKey];l.usedTimes--,l.usedTimes===0&&G(I),Object.keys(ie).length===0&&_.delete(j)}n.remove(I)}function G(I){const C=n.get(I);r.deleteTexture(C.__webglTexture);const j=I.source,ie=_.get(j);delete ie[C.__cacheKey],o.memory.textures--}function W(I){const C=I.texture,j=n.get(I),ie=n.get(C);if(ie.__webglTexture!==void 0&&(r.deleteTexture(ie.__webglTexture),o.memory.textures--),I.depthTexture&&I.depthTexture.dispose(),I.isWebGLCubeRenderTarget)for(let l=0;l<6;l++)r.deleteFramebuffer(j.__webglFramebuffer[l]),j.__webglDepthbuffer&&r.deleteRenderbuffer(j.__webglDepthbuffer[l]);else r.deleteFramebuffer(j.__webglFramebuffer),j.__webglDepthbuffer&&r.deleteRenderbuffer(j.__webglDepthbuffer),j.__webglMultisampledFramebuffer&&r.deleteFramebuffer(j.__webglMultisampledFramebuffer),j.__webglColorRenderbuffer&&r.deleteRenderbuffer(j.__webglColorRenderbuffer),j.__webglDepthRenderbuffer&&r.deleteRenderbuffer(j.__webglDepthRenderbuffer);if(I.isWebGLMultipleRenderTargets)for(let l=0,x=C.length;l<x;l++){const w=n.get(C[l]);w.__webglTexture&&(r.deleteTexture(w.__webglTexture),o.memory.textures--),n.remove(C[l])}n.remove(C),n.remove(I)}let q=0;function X(){q=0}function J(){const I=q;return I>=c&&console.warn("THREE.WebGLTextures: Trying to use "+I+" texture units while this GPU supports only "+c),q+=1,I}function k(I){const C=[];return C.push(I.wrapS),C.push(I.wrapT),C.push(I.magFilter),C.push(I.minFilter),C.push(I.anisotropy),C.push(I.internalFormat),C.push(I.format),C.push(I.type),C.push(I.generateMipmaps),C.push(I.premultiplyAlpha),C.push(I.flipY),C.push(I.unpackAlignment),C.push(I.encoding),C.join()}function Q(I,C){const j=n.get(I);if(I.isVideoTexture&&Pe(I),I.version>0&&j.__version!==I.version){const ie=I.image;if(ie===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(ie.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{Oe(j,I,C);return}}t.activeTexture(r.TEXTURE0+C),t.bindTexture(r.TEXTURE_2D,j.__webglTexture)}function re(I,C){const j=n.get(I);if(I.version>0&&j.__version!==I.version){Oe(j,I,C);return}t.activeTexture(r.TEXTURE0+C),t.bindTexture(r.TEXTURE_2D_ARRAY,j.__webglTexture)}function se(I,C){const j=n.get(I);if(I.version>0&&j.__version!==I.version){Oe(j,I,C);return}t.activeTexture(r.TEXTURE0+C),t.bindTexture(r.TEXTURE_3D,j.__webglTexture)}function ae(I,C){const j=n.get(I);if(I.version>0&&j.__version!==I.version){Re(j,I,C);return}t.activeTexture(r.TEXTURE0+C),t.bindTexture(r.TEXTURE_CUBE_MAP,j.__webglTexture)}const Ee={[xr]:r.REPEAT,[Tt]:r.CLAMP_TO_EDGE,[_r]:r.MIRRORED_REPEAT},ze={[ht]:r.NEAREST,[as]:r.NEAREST_MIPMAP_NEAREST,[ls]:r.NEAREST_MIPMAP_LINEAR,[et]:r.LINEAR,[Vo]:r.LINEAR_MIPMAP_NEAREST,[kn]:r.LINEAR_MIPMAP_LINEAR};function be(I,C,j){if(j?(r.texParameteri(I,r.TEXTURE_WRAP_S,Ee[C.wrapS]),r.texParameteri(I,r.TEXTURE_WRAP_T,Ee[C.wrapT]),(I===r.TEXTURE_3D||I===r.TEXTURE_2D_ARRAY)&&r.texParameteri(I,r.TEXTURE_WRAP_R,Ee[C.wrapR]),r.texParameteri(I,r.TEXTURE_MAG_FILTER,ze[C.magFilter]),r.texParameteri(I,r.TEXTURE_MIN_FILTER,ze[C.minFilter])):(r.texParameteri(I,r.TEXTURE_WRAP_S,r.CLAMP_TO_EDGE),r.texParameteri(I,r.TEXTURE_WRAP_T,r.CLAMP_TO_EDGE),(I===r.TEXTURE_3D||I===r.TEXTURE_2D_ARRAY)&&r.texParameteri(I,r.TEXTURE_WRAP_R,r.CLAMP_TO_EDGE),(C.wrapS!==Tt||C.wrapT!==Tt)&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),r.texParameteri(I,r.TEXTURE_MAG_FILTER,Z(C.magFilter)),r.texParameteri(I,r.TEXTURE_MIN_FILTER,Z(C.minFilter)),C.minFilter!==ht&&C.minFilter!==et&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),e.has("EXT_texture_filter_anisotropic")===!0){const ie=e.get("EXT_texture_filter_anisotropic");if(C.type===rn&&e.has("OES_texture_float_linear")===!1||a===!1&&C.type===Wn&&e.has("OES_texture_half_float_linear")===!1)return;(C.anisotropy>1||n.get(C).__currentAnisotropy)&&(r.texParameterf(I,ie.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(C.anisotropy,i.getMaxAnisotropy())),n.get(C).__currentAnisotropy=C.anisotropy)}}function H(I,C){let j=!1;I.__webglInit===void 0&&(I.__webglInit=!0,C.addEventListener("dispose",z));const ie=C.source;let l=_.get(ie);l===void 0&&(l={},_.set(ie,l));const x=k(C);if(x!==I.__cacheKey){l[x]===void 0&&(l[x]={texture:r.createTexture(),usedTimes:0},o.memory.textures++,j=!0),l[x].usedTimes++;const w=l[I.__cacheKey];w!==void 0&&(l[I.__cacheKey].usedTimes--,w.usedTimes===0&&G(C)),I.__cacheKey=x,I.__webglTexture=l[x].texture}return j}function Oe(I,C,j){let ie=r.TEXTURE_2D;C.isDataArrayTexture&&(ie=r.TEXTURE_2D_ARRAY),C.isData3DTexture&&(ie=r.TEXTURE_3D);const l=H(I,C),x=C.source;if(t.activeTexture(r.TEXTURE0+j),t.bindTexture(ie,I.__webglTexture),x.version!==x.__currentVersion||l===!0){r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,C.flipY),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,C.premultiplyAlpha),r.pixelStorei(r.UNPACK_ALIGNMENT,C.unpackAlignment),r.pixelStorei(r.UNPACK_COLORSPACE_CONVERSION_WEBGL,r.NONE);const w=E(C)&&T(C.image)===!1;let R=m(C.image,w,!1,u);R=Je(C,R);const O=T(R)||a,ne=s.convert(C.format,C.encoding);let le=s.convert(C.type),de=U(C.internalFormat,ne,le,C.encoding,C.isVideoTexture);be(ie,C,O);let B;const fe=C.mipmaps,ue=a&&C.isVideoTexture!==!0,Ae=I.__version===void 0,xe=N(C,R,O);if(C.isDepthTexture)de=r.DEPTH_COMPONENT,a?C.type===rn?de=r.DEPTH_COMPONENT32F:C.type===vr?de=r.DEPTH_COMPONENT24:C.type===Xn?de=r.DEPTH24_STENCIL8:de=r.DEPTH_COMPONENT16:C.type===rn&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),C.format===vn&&de===r.DEPTH_COMPONENT&&C.type!==Ei&&C.type!==vr&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),C.type=Ei,le=s.convert(C.type)),C.format===qn&&de===r.DEPTH_COMPONENT&&(de=r.DEPTH_STENCIL,C.type!==Xn&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),C.type=Xn,le=s.convert(C.type))),ue&&Ae?t.texStorage2D(r.TEXTURE_2D,1,de,R.width,R.height):t.texImage2D(r.TEXTURE_2D,0,de,R.width,R.height,0,ne,le,null);else if(C.isDataTexture)if(fe.length>0&&O){ue&&Ae&&t.texStorage2D(r.TEXTURE_2D,xe,de,fe[0].width,fe[0].height);for(let he=0,Le=fe.length;he<Le;he++)B=fe[he],ue?t.texSubImage2D(r.TEXTURE_2D,he,0,0,B.width,B.height,ne,le,B.data):t.texImage2D(r.TEXTURE_2D,he,de,B.width,B.height,0,ne,le,B.data);C.generateMipmaps=!1}else ue?(Ae&&t.texStorage2D(r.TEXTURE_2D,xe,de,R.width,R.height),t.texSubImage2D(r.TEXTURE_2D,0,0,0,R.width,R.height,ne,le,R.data)):t.texImage2D(r.TEXTURE_2D,0,de,R.width,R.height,0,ne,le,R.data);else if(C.isCompressedTexture){ue&&Ae&&t.texStorage2D(r.TEXTURE_2D,xe,de,fe[0].width,fe[0].height);for(let he=0,Le=fe.length;he<Le;he++)B=fe[he],C.format!==wt?ne!==null?ue?t.compressedTexSubImage2D(r.TEXTURE_2D,he,0,0,B.width,B.height,ne,B.data):t.compressedTexImage2D(r.TEXTURE_2D,he,de,B.width,B.height,0,B.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):ue?t.texSubImage2D(r.TEXTURE_2D,he,0,0,B.width,B.height,ne,le,B.data):t.texImage2D(r.TEXTURE_2D,he,de,B.width,B.height,0,ne,le,B.data)}else if(C.isDataArrayTexture)ue?(Ae&&t.texStorage3D(r.TEXTURE_2D_ARRAY,xe,de,R.width,R.height,R.depth),t.texSubImage3D(r.TEXTURE_2D_ARRAY,0,0,0,0,R.width,R.height,R.depth,ne,le,R.data)):t.texImage3D(r.TEXTURE_2D_ARRAY,0,de,R.width,R.height,R.depth,0,ne,le,R.data);else if(C.isData3DTexture)ue?(Ae&&t.texStorage3D(r.TEXTURE_3D,xe,de,R.width,R.height,R.depth),t.texSubImage3D(r.TEXTURE_3D,0,0,0,0,R.width,R.height,R.depth,ne,le,R.data)):t.texImage3D(r.TEXTURE_3D,0,de,R.width,R.height,R.depth,0,ne,le,R.data);else if(C.isFramebufferTexture)ue&&Ae?t.texStorage2D(r.TEXTURE_2D,xe,de,R.width,R.height):t.texImage2D(r.TEXTURE_2D,0,de,R.width,R.height,0,ne,le,null);else if(fe.length>0&&O){ue&&Ae&&t.texStorage2D(r.TEXTURE_2D,xe,de,fe[0].width,fe[0].height);for(let he=0,Le=fe.length;he<Le;he++)B=fe[he],ue?t.texSubImage2D(r.TEXTURE_2D,he,0,0,ne,le,B):t.texImage2D(r.TEXTURE_2D,he,de,ne,le,B);C.generateMipmaps=!1}else ue?(Ae&&t.texStorage2D(r.TEXTURE_2D,xe,de,R.width,R.height),t.texSubImage2D(r.TEXTURE_2D,0,0,0,ne,le,R)):t.texImage2D(r.TEXTURE_2D,0,de,ne,le,R);S(C,O)&&D(ie),x.__currentVersion=x.version,C.onUpdate&&C.onUpdate(C)}I.__version=C.version}function Re(I,C,j){if(C.image.length!==6)return;const ie=H(I,C),l=C.source;if(t.activeTexture(r.TEXTURE0+j),t.bindTexture(r.TEXTURE_CUBE_MAP,I.__webglTexture),l.version!==l.__currentVersion||ie===!0){r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,C.flipY),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,C.premultiplyAlpha),r.pixelStorei(r.UNPACK_ALIGNMENT,C.unpackAlignment),r.pixelStorei(r.UNPACK_COLORSPACE_CONVERSION_WEBGL,r.NONE);const x=C.isCompressedTexture||C.image[0].isCompressedTexture,w=C.image[0]&&C.image[0].isDataTexture,R=[];for(let he=0;he<6;he++)!x&&!w?R[he]=m(C.image[he],!1,!0,h):R[he]=w?C.image[he].image:C.image[he],R[he]=Je(C,R[he]);const O=R[0],ne=T(O)||a,le=s.convert(C.format,C.encoding),de=s.convert(C.type),B=U(C.internalFormat,le,de,C.encoding),fe=a&&C.isVideoTexture!==!0,ue=I.__version===void 0;let Ae=N(C,O,ne);be(r.TEXTURE_CUBE_MAP,C,ne);let xe;if(x){fe&&ue&&t.texStorage2D(r.TEXTURE_CUBE_MAP,Ae,B,O.width,O.height);for(let he=0;he<6;he++){xe=R[he].mipmaps;for(let Le=0;Le<xe.length;Le++){const Ge=xe[Le];C.format!==wt?le!==null?fe?t.compressedTexSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+he,Le,0,0,Ge.width,Ge.height,le,Ge.data):t.compressedTexImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+he,Le,B,Ge.width,Ge.height,0,Ge.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):fe?t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+he,Le,0,0,Ge.width,Ge.height,le,de,Ge.data):t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+he,Le,B,Ge.width,Ge.height,0,le,de,Ge.data)}}}else{xe=C.mipmaps,fe&&ue&&(xe.length>0&&Ae++,t.texStorage2D(r.TEXTURE_CUBE_MAP,Ae,B,R[0].width,R[0].height));for(let he=0;he<6;he++)if(w){fe?t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+he,0,0,0,R[he].width,R[he].height,le,de,R[he].data):t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+he,0,B,R[he].width,R[he].height,0,le,de,R[he].data);for(let Le=0;Le<xe.length;Le++){const St=xe[Le].image[he].image;fe?t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+he,Le+1,0,0,St.width,St.height,le,de,St.data):t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+he,Le+1,B,St.width,St.height,0,le,de,St.data)}}else{fe?t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+he,0,0,0,le,de,R[he]):t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+he,0,B,le,de,R[he]);for(let Le=0;Le<xe.length;Le++){const Ge=xe[Le];fe?t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+he,Le+1,0,0,le,de,Ge.image[he]):t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+he,Le+1,B,le,de,Ge.image[he])}}}S(C,ne)&&D(r.TEXTURE_CUBE_MAP),l.__currentVersion=l.version,C.onUpdate&&C.onUpdate(C)}I.__version=C.version}function M(I,C,j,ie,l){const x=s.convert(j.format,j.encoding),w=s.convert(j.type),R=U(j.internalFormat,x,w,j.encoding);n.get(C).__hasExternalTextures||(l===r.TEXTURE_3D||l===r.TEXTURE_2D_ARRAY?t.texImage3D(l,0,R,C.width,C.height,C.depth,0,x,w,null):t.texImage2D(l,0,R,C.width,C.height,0,x,w,null)),t.bindFramebuffer(r.FRAMEBUFFER,I),we(C)?f.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER,ie,l,n.get(j).__webglTexture,0,Te(C)):r.framebufferTexture2D(r.FRAMEBUFFER,ie,l,n.get(j).__webglTexture,0),t.bindFramebuffer(r.FRAMEBUFFER,null)}function ye(I,C,j){if(r.bindRenderbuffer(r.RENDERBUFFER,I),C.depthBuffer&&!C.stencilBuffer){let ie=r.DEPTH_COMPONENT16;if(j||we(C)){const l=C.depthTexture;l&&l.isDepthTexture&&(l.type===rn?ie=r.DEPTH_COMPONENT32F:l.type===vr&&(ie=r.DEPTH_COMPONENT24));const x=Te(C);we(C)?f.renderbufferStorageMultisampleEXT(r.RENDERBUFFER,x,ie,C.width,C.height):r.renderbufferStorageMultisample(r.RENDERBUFFER,x,ie,C.width,C.height)}else r.renderbufferStorage(r.RENDERBUFFER,ie,C.width,C.height);r.framebufferRenderbuffer(r.FRAMEBUFFER,r.DEPTH_ATTACHMENT,r.RENDERBUFFER,I)}else if(C.depthBuffer&&C.stencilBuffer){const ie=Te(C);j&&we(C)===!1?r.renderbufferStorageMultisample(r.RENDERBUFFER,ie,r.DEPTH24_STENCIL8,C.width,C.height):we(C)?f.renderbufferStorageMultisampleEXT(r.RENDERBUFFER,ie,r.DEPTH24_STENCIL8,C.width,C.height):r.renderbufferStorage(r.RENDERBUFFER,r.DEPTH_STENCIL,C.width,C.height),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.DEPTH_STENCIL_ATTACHMENT,r.RENDERBUFFER,I)}else{const ie=C.isWebGLMultipleRenderTargets===!0?C.texture[0]:C.texture,l=s.convert(ie.format,ie.encoding),x=s.convert(ie.type),w=U(ie.internalFormat,l,x,ie.encoding),R=Te(C);j&&we(C)===!1?r.renderbufferStorageMultisample(r.RENDERBUFFER,R,w,C.width,C.height):we(C)?f.renderbufferStorageMultisampleEXT(r.RENDERBUFFER,R,w,C.width,C.height):r.renderbufferStorage(r.RENDERBUFFER,w,C.width,C.height)}r.bindRenderbuffer(r.RENDERBUFFER,null)}function De(I,C){if(C&&C.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(t.bindFramebuffer(r.FRAMEBUFFER,I),!(C.depthTexture&&C.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");(!n.get(C.depthTexture).__webglTexture||C.depthTexture.image.width!==C.width||C.depthTexture.image.height!==C.height)&&(C.depthTexture.image.width=C.width,C.depthTexture.image.height=C.height,C.depthTexture.needsUpdate=!0),Q(C.depthTexture,0);const ie=n.get(C.depthTexture).__webglTexture,l=Te(C);if(C.depthTexture.format===vn)we(C)?f.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER,r.DEPTH_ATTACHMENT,r.TEXTURE_2D,ie,0,l):r.framebufferTexture2D(r.FRAMEBUFFER,r.DEPTH_ATTACHMENT,r.TEXTURE_2D,ie,0);else if(C.depthTexture.format===qn)we(C)?f.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER,r.DEPTH_STENCIL_ATTACHMENT,r.TEXTURE_2D,ie,0,l):r.framebufferTexture2D(r.FRAMEBUFFER,r.DEPTH_STENCIL_ATTACHMENT,r.TEXTURE_2D,ie,0);else throw new Error("Unknown depthTexture format")}function $(I){const C=n.get(I),j=I.isWebGLCubeRenderTarget===!0;if(I.depthTexture&&!C.__autoAllocateDepthBuffer){if(j)throw new Error("target.depthTexture not supported in Cube render targets");De(C.__webglFramebuffer,I)}else if(j){C.__webglDepthbuffer=[];for(let ie=0;ie<6;ie++)t.bindFramebuffer(r.FRAMEBUFFER,C.__webglFramebuffer[ie]),C.__webglDepthbuffer[ie]=r.createRenderbuffer(),ye(C.__webglDepthbuffer[ie],I,!1)}else t.bindFramebuffer(r.FRAMEBUFFER,C.__webglFramebuffer),C.__webglDepthbuffer=r.createRenderbuffer(),ye(C.__webglDepthbuffer,I,!1);t.bindFramebuffer(r.FRAMEBUFFER,null)}function oe(I,C,j){const ie=n.get(I);C!==void 0&&M(ie.__webglFramebuffer,I,I.texture,r.COLOR_ATTACHMENT0,r.TEXTURE_2D),j!==void 0&&$(I)}function ce(I){const C=I.texture,j=n.get(I),ie=n.get(C);I.addEventListener("dispose",A),I.isWebGLMultipleRenderTargets!==!0&&(ie.__webglTexture===void 0&&(ie.__webglTexture=r.createTexture()),ie.__version=C.version,o.memory.textures++);const l=I.isWebGLCubeRenderTarget===!0,x=I.isWebGLMultipleRenderTargets===!0,w=T(I)||a;if(l){j.__webglFramebuffer=[];for(let R=0;R<6;R++)j.__webglFramebuffer[R]=r.createFramebuffer()}else if(j.__webglFramebuffer=r.createFramebuffer(),x)if(i.drawBuffers){const R=I.texture;for(let O=0,ne=R.length;O<ne;O++){const le=n.get(R[O]);le.__webglTexture===void 0&&(le.__webglTexture=r.createTexture(),o.memory.textures++)}}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");else if(a&&I.samples>0&&we(I)===!1){j.__webglMultisampledFramebuffer=r.createFramebuffer(),j.__webglColorRenderbuffer=r.createRenderbuffer(),r.bindRenderbuffer(r.RENDERBUFFER,j.__webglColorRenderbuffer);const R=s.convert(C.format,C.encoding),O=s.convert(C.type),ne=U(C.internalFormat,R,O,C.encoding),le=Te(I);r.renderbufferStorageMultisample(r.RENDERBUFFER,le,ne,I.width,I.height),t.bindFramebuffer(r.FRAMEBUFFER,j.__webglMultisampledFramebuffer),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.RENDERBUFFER,j.__webglColorRenderbuffer),r.bindRenderbuffer(r.RENDERBUFFER,null),I.depthBuffer&&(j.__webglDepthRenderbuffer=r.createRenderbuffer(),ye(j.__webglDepthRenderbuffer,I,!0)),t.bindFramebuffer(r.FRAMEBUFFER,null)}if(l){t.bindTexture(r.TEXTURE_CUBE_MAP,ie.__webglTexture),be(r.TEXTURE_CUBE_MAP,C,w);for(let R=0;R<6;R++)M(j.__webglFramebuffer[R],I,C,r.COLOR_ATTACHMENT0,r.TEXTURE_CUBE_MAP_POSITIVE_X+R);S(C,w)&&D(r.TEXTURE_CUBE_MAP),t.unbindTexture()}else if(x){const R=I.texture;for(let O=0,ne=R.length;O<ne;O++){const le=R[O],de=n.get(le);t.bindTexture(r.TEXTURE_2D,de.__webglTexture),be(r.TEXTURE_2D,le,w),M(j.__webglFramebuffer,I,le,r.COLOR_ATTACHMENT0+O,r.TEXTURE_2D),S(le,w)&&D(r.TEXTURE_2D)}t.unbindTexture()}else{let R=r.TEXTURE_2D;(I.isWebGL3DRenderTarget||I.isWebGLArrayRenderTarget)&&(a?R=I.isWebGL3DRenderTarget?r.TEXTURE_3D:r.TEXTURE_2D_ARRAY:console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.")),t.bindTexture(R,ie.__webglTexture),be(R,C,w),M(j.__webglFramebuffer,I,C,r.COLOR_ATTACHMENT0,R),S(C,w)&&D(R),t.unbindTexture()}I.depthBuffer&&$(I)}function _e(I){const C=T(I)||a,j=I.isWebGLMultipleRenderTargets===!0?I.texture:[I.texture];for(let ie=0,l=j.length;ie<l;ie++){const x=j[ie];if(S(x,C)){const w=I.isWebGLCubeRenderTarget?r.TEXTURE_CUBE_MAP:r.TEXTURE_2D,R=n.get(x).__webglTexture;t.bindTexture(w,R),D(w),t.unbindTexture()}}}function me(I){if(a&&I.samples>0&&we(I)===!1){const C=I.width,j=I.height;let ie=r.COLOR_BUFFER_BIT;const l=[r.COLOR_ATTACHMENT0],x=I.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT;I.depthBuffer&&l.push(x);const w=n.get(I),R=w.__ignoreDepthValues!==void 0?w.__ignoreDepthValues:!1;R===!1&&(I.depthBuffer&&(ie|=r.DEPTH_BUFFER_BIT),I.stencilBuffer&&(ie|=r.STENCIL_BUFFER_BIT)),t.bindFramebuffer(r.READ_FRAMEBUFFER,w.__webglMultisampledFramebuffer),t.bindFramebuffer(r.DRAW_FRAMEBUFFER,w.__webglFramebuffer),R===!0&&(r.invalidateFramebuffer(r.READ_FRAMEBUFFER,[x]),r.invalidateFramebuffer(r.DRAW_FRAMEBUFFER,[x])),r.blitFramebuffer(0,0,C,j,0,0,C,j,ie,r.NEAREST),r.invalidateFramebuffer(r.READ_FRAMEBUFFER,l),t.bindFramebuffer(r.READ_FRAMEBUFFER,null),t.bindFramebuffer(r.DRAW_FRAMEBUFFER,w.__webglMultisampledFramebuffer)}}function Te(I){return Math.min(d,I.samples)}function we(I){const C=n.get(I);return a&&I.samples>0&&e.has("WEBGL_multisampled_render_to_texture")===!0&&C.__useRenderToTexture!==!1}function Pe(I){const C=o.render.frame;p.get(I)!==C&&(p.set(I,C),I.update())}function Je(I,C){const j=I.encoding,ie=I.format,l=I.type;return I.isCompressedTexture===!0||I.isVideoTexture===!0||I.format===gs||j!==sn&&(j===je?a===!1?e.has("EXT_sRGB")===!0&&ie===wt?(I.format=gs,I.minFilter=et,I.generateMipmaps=!1):C=wn.sRGBToLinear(C):(ie!==wt||l!==_n)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture encoding:",j)),C}this.allocateTextureUnit=J,this.resetTextureUnits=X,this.setTexture2D=Q,this.setTexture2DArray=re,this.setTexture3D=se,this.setTextureCube=ae,this.rebindTextures=oe,this.setupRenderTarget=ce,this.updateRenderTargetMipmap=_e,this.updateMultisampleRenderTarget=me,this.setupDepthRenderbuffer=$,this.setupFrameBufferTexture=M,this.useMultisampledRTT=we}function qh(r,e,t){const n=t.isWebGL2;function i(s,o=null){let a;if(s===_n)return r.UNSIGNED_BYTE;if(s===Ec)return r.UNSIGNED_SHORT_4_4_4_4;if(s===Sc)return r.UNSIGNED_SHORT_5_5_5_1;if(s===Mc)return r.BYTE;if(s===wc)return r.SHORT;if(s===Ei)return r.UNSIGNED_SHORT;if(s===bc)return r.INT;if(s===vr)return r.UNSIGNED_INT;if(s===rn)return r.FLOAT;if(s===Wn)return n?r.HALF_FLOAT:(a=e.get("OES_texture_half_float"),a!==null?a.HALF_FLOAT_OES:null);if(s===Tc)return r.ALPHA;if(s===wt)return r.RGBA;if(s===Rc)return r.LUMINANCE;if(s===Cc)return r.LUMINANCE_ALPHA;if(s===vn)return r.DEPTH_COMPONENT;if(s===qn)return r.DEPTH_STENCIL;if(s===Lc)return r.RED;if(s===Ac)return console.warn("THREE.WebGLRenderer: THREE.RGBFormat has been removed. Use THREE.RGBAFormat instead. https://github.com/mrdoob/three.js/pull/23228"),r.RGBA;if(s===gs)return a=e.get("EXT_sRGB"),a!==null?a.SRGB_ALPHA_EXT:null;if(s===Pc)return r.RED_INTEGER;if(s===Ic)return r.RG;if(s===Dc)return r.RG_INTEGER;if(s===Fc)return r.RGBA_INTEGER;if(s===cs||s===hs||s===us||s===ds)if(o===je)if(a=e.get("WEBGL_compressed_texture_s3tc_srgb"),a!==null){if(s===cs)return a.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(s===hs)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(s===us)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(s===ds)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(a=e.get("WEBGL_compressed_texture_s3tc"),a!==null){if(s===cs)return a.COMPRESSED_RGB_S3TC_DXT1_EXT;if(s===hs)return a.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(s===us)return a.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(s===ds)return a.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(s===ko||s===Wo||s===Xo||s===qo)if(a=e.get("WEBGL_compressed_texture_pvrtc"),a!==null){if(s===ko)return a.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(s===Wo)return a.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(s===Xo)return a.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(s===qo)return a.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(s===Uc)return a=e.get("WEBGL_compressed_texture_etc1"),a!==null?a.COMPRESSED_RGB_ETC1_WEBGL:null;if(s===Yo||s===Zo)if(a=e.get("WEBGL_compressed_texture_etc"),a!==null){if(s===Yo)return o===je?a.COMPRESSED_SRGB8_ETC2:a.COMPRESSED_RGB8_ETC2;if(s===Zo)return o===je?a.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:a.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(s===Jo||s===$o||s===Ko||s===jo||s===Qo||s===ea||s===ta||s===na||s===ia||s===ra||s===sa||s===oa||s===aa||s===la)if(a=e.get("WEBGL_compressed_texture_astc"),a!==null){if(s===Jo)return o===je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:a.COMPRESSED_RGBA_ASTC_4x4_KHR;if(s===$o)return o===je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:a.COMPRESSED_RGBA_ASTC_5x4_KHR;if(s===Ko)return o===je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:a.COMPRESSED_RGBA_ASTC_5x5_KHR;if(s===jo)return o===je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:a.COMPRESSED_RGBA_ASTC_6x5_KHR;if(s===Qo)return o===je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:a.COMPRESSED_RGBA_ASTC_6x6_KHR;if(s===ea)return o===je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:a.COMPRESSED_RGBA_ASTC_8x5_KHR;if(s===ta)return o===je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:a.COMPRESSED_RGBA_ASTC_8x6_KHR;if(s===na)return o===je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:a.COMPRESSED_RGBA_ASTC_8x8_KHR;if(s===ia)return o===je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:a.COMPRESSED_RGBA_ASTC_10x5_KHR;if(s===ra)return o===je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:a.COMPRESSED_RGBA_ASTC_10x6_KHR;if(s===sa)return o===je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:a.COMPRESSED_RGBA_ASTC_10x8_KHR;if(s===oa)return o===je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:a.COMPRESSED_RGBA_ASTC_10x10_KHR;if(s===aa)return o===je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:a.COMPRESSED_RGBA_ASTC_12x10_KHR;if(s===la)return o===je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:a.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(s===ca)if(a=e.get("EXT_texture_compression_bptc"),a!==null){if(s===ca)return o===je?a.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:a.COMPRESSED_RGBA_BPTC_UNORM_EXT}else return null;if(s===Xn)return n?r.UNSIGNED_INT_24_8:(a=e.get("WEBGL_depth_texture"),a!==null?a.UNSIGNED_INT_24_8_WEBGL:null)}return{convert:i}}class Va extends mt{constructor(e=[]){super();this.cameras=e}}Va.prototype.isArrayCamera=!0;class ii extends Ne{constructor(){super();this.type="Group"}}ii.prototype.isGroup=!0;const dx={type:"move"};class ka{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new ii,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new ii,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new L,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new L),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new ii,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new L,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new L),this._grip}dispatchEvent(e){return this._targetRay!==null&&this._targetRay.dispatchEvent(e),this._grip!==null&&this._grip.dispatchEvent(e),this._hand!==null&&this._hand.dispatchEvent(e),this}disconnect(e){return this.dispatchEvent({type:"disconnected",data:e}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(e,t,n){let i=null,s=null,o=null;const a=this._targetRay,c=this._grip,h=this._hand;if(e&&t.session.visibilityState!=="visible-blurred")if(a!==null&&(i=t.getPose(e.targetRaySpace,n),i!==null&&(a.matrix.fromArray(i.transform.matrix),a.matrix.decompose(a.position,a.rotation,a.scale),i.linearVelocity?(a.hasLinearVelocity=!0,a.linearVelocity.copy(i.linearVelocity)):a.hasLinearVelocity=!1,i.angularVelocity?(a.hasAngularVelocity=!0,a.angularVelocity.copy(i.angularVelocity)):a.hasAngularVelocity=!1,this.dispatchEvent(dx))),h&&e.hand){o=!0;for(const _ of e.hand.values()){const b=t.getJointPose(_,n);if(h.joints[_.jointName]===void 0){const m=new ii;m.matrixAutoUpdate=!1,m.visible=!1,h.joints[_.jointName]=m,h.add(m)}const y=h.joints[_.jointName];b!==null&&(y.matrix.fromArray(b.transform.matrix),y.matrix.decompose(y.position,y.rotation,y.scale),y.jointRadius=b.radius),y.visible=b!==null}const u=h.joints["index-finger-tip"],d=h.joints["thumb-tip"],f=u.position.distanceTo(d.position),p=.02,g=.005;h.inputState.pinching&&f>p+g?(h.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:e.handedness,target:this})):!h.inputState.pinching&&f<=p-g&&(h.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:e.handedness,target:this}))}else c!==null&&e.gripSpace&&(s=t.getPose(e.gripSpace,n),s!==null&&(c.matrix.fromArray(s.transform.matrix),c.matrix.decompose(c.position,c.rotation,c.scale),s.linearVelocity?(c.hasLinearVelocity=!0,c.linearVelocity.copy(s.linearVelocity)):c.hasLinearVelocity=!1,s.angularVelocity?(c.hasAngularVelocity=!0,c.angularVelocity.copy(s.angularVelocity)):c.hasAngularVelocity=!1));return a!==null&&(a.visible=i!==null),c!==null&&(c.visible=s!==null),h!==null&&(h.visible=o!==null),this}}class Wa extends ut{constructor(e,t,n,i,s,o,a,c,h,u){if(u=u!==void 0?u:vn,u!==vn&&u!==qn)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");n===void 0&&u===vn&&(n=Ei),n===void 0&&u===qn&&(n=Xn);super(null,i,s,o,a,c,u,n,h);this.image={width:e,height:t},this.magFilter=a!==void 0?a:ht,this.minFilter=c!==void 0?c:ht,this.flipY=!1,this.generateMipmaps=!1}}Wa.prototype.isDepthTexture=!0;class fx extends Mn{constructor(e,t){super();const n=this;let i=null,s=1,o=null,a="local-floor",c=null,h=null,u=null,d=null,f=null;const p=t.getContextAttributes();let g=null,_=null;const b=[],y=new Map,m=new mt;m.layers.enable(1),m.viewport=new qe;const T=new mt;T.layers.enable(2),T.viewport=new qe;const E=[m,T],S=new Va;S.layers.enable(1),S.layers.enable(2);let D=null,U=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(k){let Q=b[k];return Q===void 0&&(Q=new ka,b[k]=Q),Q.getTargetRaySpace()},this.getControllerGrip=function(k){let Q=b[k];return Q===void 0&&(Q=new ka,b[k]=Q),Q.getGripSpace()},this.getHand=function(k){let Q=b[k];return Q===void 0&&(Q=new ka,b[k]=Q),Q.getHandSpace()};function N(k){const Q=y.get(k.inputSource);Q&&Q.dispatchEvent({type:k.type,data:k.inputSource})}function Z(){y.forEach(function(k,Q){k.disconnect(Q)}),y.clear(),D=null,U=null,e.setRenderTarget(g),d=null,u=null,h=null,i=null,_=null,J.stop(),n.isPresenting=!1,n.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(k){s=k,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(k){a=k,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return o},this.getBaseLayer=function(){return u!==null?u:d},this.getBinding=function(){return h},this.getFrame=function(){return f},this.getSession=function(){return i},this.setSession=async function(k){if(i=k,i!==null){if(g=e.getRenderTarget(),i.addEventListener("select",N),i.addEventListener("selectstart",N),i.addEventListener("selectend",N),i.addEventListener("squeeze",N),i.addEventListener("squeezestart",N),i.addEventListener("squeezeend",N),i.addEventListener("end",Z),i.addEventListener("inputsourceschange",z),p.xrCompatible!==!0&&await t.makeXRCompatible(),i.renderState.layers===void 0||e.capabilities.isWebGL2===!1){const Q={antialias:i.renderState.layers===void 0?p.antialias:!0,alpha:p.alpha,depth:p.depth,stencil:p.stencil,framebufferScaleFactor:s};d=new XRWebGLLayer(i,t,Q),i.updateRenderState({baseLayer:d}),_=new At(d.framebufferWidth,d.framebufferHeight,{format:wt,type:_n,encoding:e.outputEncoding})}else{let Q=null,re=null,se=null;p.depth&&(se=p.stencil?t.DEPTH24_STENCIL8:t.DEPTH_COMPONENT24,Q=p.stencil?qn:vn,re=p.stencil?Xn:Ei);const ae={colorFormat:e.outputEncoding===je?t.SRGB8_ALPHA8:t.RGBA8,depthFormat:se,scaleFactor:s};h=new XRWebGLBinding(i,t),u=h.createProjectionLayer(ae),i.updateRenderState({layers:[u]}),_=new At(u.textureWidth,u.textureHeight,{format:wt,type:_n,depthTexture:new Wa(u.textureWidth,u.textureHeight,re,void 0,void 0,void 0,void 0,void 0,void 0,Q),stencilBuffer:p.stencil,encoding:e.outputEncoding,samples:p.antialias?4:0});const Ee=e.properties.get(_);Ee.__ignoreDepthValues=u.ignoreDepthValues}_.isXRRenderTarget=!0,this.setFoveation(1),o=await i.requestReferenceSpace(a),J.setContext(i),J.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}};function z(k){const Q=i.inputSources;for(let re=0;re<b.length;re++)y.set(Q[re],b[re]);for(let re=0;re<k.removed.length;re++){const se=k.removed[re],ae=y.get(se);ae&&(ae.dispatchEvent({type:"disconnected",data:se}),y.delete(se))}for(let re=0;re<k.added.length;re++){const se=k.added[re],ae=y.get(se);ae&&ae.dispatchEvent({type:"connected",data:se})}}const A=new L,F=new L;function G(k,Q,re){A.setFromMatrixPosition(Q.matrixWorld),F.setFromMatrixPosition(re.matrixWorld);const se=A.distanceTo(F),ae=Q.projectionMatrix.elements,Ee=re.projectionMatrix.elements,ze=ae[14]/(ae[10]-1),be=ae[14]/(ae[10]+1),H=(ae[9]+1)/ae[5],Oe=(ae[9]-1)/ae[5],Re=(ae[8]-1)/ae[0],M=(Ee[8]+1)/Ee[0],ye=ze*Re,De=ze*M,$=se/(-Re+M),oe=$*-Re;Q.matrixWorld.decompose(k.position,k.quaternion,k.scale),k.translateX(oe),k.translateZ($),k.matrixWorld.compose(k.position,k.quaternion,k.scale),k.matrixWorldInverse.copy(k.matrixWorld).invert();const ce=ze+$,_e=be+$,me=ye-oe,Te=De+(se-oe),we=H*be/_e*ce,Pe=Oe*be/_e*ce;k.projectionMatrix.makePerspective(me,Te,we,Pe,ce,_e)}function W(k,Q){Q===null?k.matrixWorld.copy(k.matrix):k.matrixWorld.multiplyMatrices(Q.matrixWorld,k.matrix),k.matrixWorldInverse.copy(k.matrixWorld).invert()}this.updateCamera=function(k){if(i===null)return;S.near=T.near=m.near=k.near,S.far=T.far=m.far=k.far,(D!==S.near||U!==S.far)&&(i.updateRenderState({depthNear:S.near,depthFar:S.far}),D=S.near,U=S.far);const Q=k.parent,re=S.cameras;W(S,Q);for(let ae=0;ae<re.length;ae++)W(re[ae],Q);S.matrixWorld.decompose(S.position,S.quaternion,S.scale),k.position.copy(S.position),k.quaternion.copy(S.quaternion),k.scale.copy(S.scale),k.matrix.copy(S.matrix),k.matrixWorld.copy(S.matrixWorld);const se=k.children;for(let ae=0,Ee=se.length;ae<Ee;ae++)se[ae].updateMatrixWorld(!0);re.length===2?G(S,m,T):S.projectionMatrix.copy(m.projectionMatrix)},this.getCamera=function(){return S},this.getFoveation=function(){if(u!==null)return u.fixedFoveation;if(d!==null)return d.fixedFoveation},this.setFoveation=function(k){u!==null&&(u.fixedFoveation=k),d!==null&&d.fixedFoveation!==void 0&&(d.fixedFoveation=k)};let q=null;function X(k,Q){if(c=Q.getViewerPose(o),f=Q,c!==null){const se=c.views;d!==null&&(e.setRenderTargetFramebuffer(_,d.framebuffer),e.setRenderTarget(_));let ae=!1;se.length!==S.cameras.length&&(S.cameras.length=0,ae=!0);for(let Ee=0;Ee<se.length;Ee++){const ze=se[Ee];let be=null;if(d!==null)be=d.getViewport(ze);else{const Oe=h.getViewSubImage(u,ze);be=Oe.viewport,Ee===0&&(e.setRenderTargetTextures(_,Oe.colorTexture,u.ignoreDepthValues?void 0:Oe.depthStencilTexture),e.setRenderTarget(_))}const H=E[Ee];H.matrix.fromArray(ze.transform.matrix),H.projectionMatrix.fromArray(ze.projectionMatrix),H.viewport.set(be.x,be.y,be.width,be.height),Ee===0&&S.matrix.copy(H.matrix),ae===!0&&S.cameras.push(H)}}const re=i.inputSources;for(let se=0;se<b.length;se++){const ae=b[se],Ee=re[se];ae.update(Ee,Q,o)}q&&q(k,Q),f=null}const J=new gh;J.setAnimationLoop(X),this.setAnimationLoop=function(k){q=k},this.dispose=function(){}}}function px(r){function e(y,m){y.fogColor.value.copy(m.color),m.isFog?(y.fogNear.value=m.near,y.fogFar.value=m.far):m.isFogExp2&&(y.fogDensity.value=m.density)}function t(y,m,T,E,S){m.isMeshBasicMaterial?n(y,m):m.isMeshLambertMaterial?(n(y,m),c(y,m)):m.isMeshToonMaterial?(n(y,m),u(y,m)):m.isMeshPhongMaterial?(n(y,m),h(y,m)):m.isMeshStandardMaterial?(n(y,m),m.isMeshPhysicalMaterial?f(y,m,S):d(y,m)):m.isMeshMatcapMaterial?(n(y,m),p(y,m)):m.isMeshDepthMaterial?(n(y,m),g(y,m)):m.isMeshDistanceMaterial?(n(y,m),_(y,m)):m.isMeshNormalMaterial?(n(y,m),b(y,m)):m.isLineBasicMaterial?(i(y,m),m.isLineDashedMaterial&&s(y,m)):m.isPointsMaterial?o(y,m,T,E):m.isSpriteMaterial?a(y,m):m.isShadowMaterial?(y.color.value.copy(m.color),y.opacity.value=m.opacity):m.isShaderMaterial&&(m.uniformsNeedUpdate=!1)}function n(y,m){y.opacity.value=m.opacity,m.color&&y.diffuse.value.copy(m.color),m.emissive&&y.emissive.value.copy(m.emissive).multiplyScalar(m.emissiveIntensity),m.map&&(y.map.value=m.map),m.alphaMap&&(y.alphaMap.value=m.alphaMap),m.specularMap&&(y.specularMap.value=m.specularMap),m.alphaTest>0&&(y.alphaTest.value=m.alphaTest);const T=r.get(m).envMap;T&&(y.envMap.value=T,y.flipEnvMap.value=T.isCubeTexture&&T.isRenderTargetTexture===!1?-1:1,y.reflectivity.value=m.reflectivity,y.ior.value=m.ior,y.refractionRatio.value=m.refractionRatio),m.lightMap&&(y.lightMap.value=m.lightMap,y.lightMapIntensity.value=m.lightMapIntensity),m.aoMap&&(y.aoMap.value=m.aoMap,y.aoMapIntensity.value=m.aoMapIntensity);let E;m.map?E=m.map:m.specularMap?E=m.specularMap:m.displacementMap?E=m.displacementMap:m.normalMap?E=m.normalMap:m.bumpMap?E=m.bumpMap:m.roughnessMap?E=m.roughnessMap:m.metalnessMap?E=m.metalnessMap:m.alphaMap?E=m.alphaMap:m.emissiveMap?E=m.emissiveMap:m.clearcoatMap?E=m.clearcoatMap:m.clearcoatNormalMap?E=m.clearcoatNormalMap:m.clearcoatRoughnessMap?E=m.clearcoatRoughnessMap:m.specularIntensityMap?E=m.specularIntensityMap:m.specularColorMap?E=m.specularColorMap:m.transmissionMap?E=m.transmissionMap:m.thicknessMap?E=m.thicknessMap:m.sheenColorMap?E=m.sheenColorMap:m.sheenRoughnessMap&&(E=m.sheenRoughnessMap),E!==void 0&&(E.isWebGLRenderTarget&&(E=E.texture),E.matrixAutoUpdate===!0&&E.updateMatrix(),y.uvTransform.value.copy(E.matrix));let S;m.aoMap?S=m.aoMap:m.lightMap&&(S=m.lightMap),S!==void 0&&(S.isWebGLRenderTarget&&(S=S.texture),S.matrixAutoUpdate===!0&&S.updateMatrix(),y.uv2Transform.value.copy(S.matrix))}function i(y,m){y.diffuse.value.copy(m.color),y.opacity.value=m.opacity}function s(y,m){y.dashSize.value=m.dashSize,y.totalSize.value=m.dashSize+m.gapSize,y.scale.value=m.scale}function o(y,m,T,E){y.diffuse.value.copy(m.color),y.opacity.value=m.opacity,y.size.value=m.size*T,y.scale.value=E*.5,m.map&&(y.map.value=m.map),m.alphaMap&&(y.alphaMap.value=m.alphaMap),m.alphaTest>0&&(y.alphaTest.value=m.alphaTest);let S;m.map?S=m.map:m.alphaMap&&(S=m.alphaMap),S!==void 0&&(S.matrixAutoUpdate===!0&&S.updateMatrix(),y.uvTransform.value.copy(S.matrix))}function a(y,m){y.diffuse.value.copy(m.color),y.opacity.value=m.opacity,y.rotation.value=m.rotation,m.map&&(y.map.value=m.map),m.alphaMap&&(y.alphaMap.value=m.alphaMap),m.alphaTest>0&&(y.alphaTest.value=m.alphaTest);let T;m.map?T=m.map:m.alphaMap&&(T=m.alphaMap),T!==void 0&&(T.matrixAutoUpdate===!0&&T.updateMatrix(),y.uvTransform.value.copy(T.matrix))}function c(y,m){m.emissiveMap&&(y.emissiveMap.value=m.emissiveMap)}function h(y,m){y.specular.value.copy(m.specular),y.shininess.value=Math.max(m.shininess,1e-4),m.emissiveMap&&(y.emissiveMap.value=m.emissiveMap),m.bumpMap&&(y.bumpMap.value=m.bumpMap,y.bumpScale.value=m.bumpScale,m.side===rt&&(y.bumpScale.value*=-1)),m.normalMap&&(y.normalMap.value=m.normalMap,y.normalScale.value.copy(m.normalScale),m.side===rt&&y.normalScale.value.negate()),m.displacementMap&&(y.displacementMap.value=m.displacementMap,y.displacementScale.value=m.displacementScale,y.displacementBias.value=m.displacementBias)}function u(y,m){m.gradientMap&&(y.gradientMap.value=m.gradientMap),m.emissiveMap&&(y.emissiveMap.value=m.emissiveMap),m.bumpMap&&(y.bumpMap.value=m.bumpMap,y.bumpScale.value=m.bumpScale,m.side===rt&&(y.bumpScale.value*=-1)),m.normalMap&&(y.normalMap.value=m.normalMap,y.normalScale.value.copy(m.normalScale),m.side===rt&&y.normalScale.value.negate()),m.displacementMap&&(y.displacementMap.value=m.displacementMap,y.displacementScale.value=m.displacementScale,y.displacementBias.value=m.displacementBias)}function d(y,m){y.roughness.value=m.roughness,y.metalness.value=m.metalness,m.roughnessMap&&(y.roughnessMap.value=m.roughnessMap),m.metalnessMap&&(y.metalnessMap.value=m.metalnessMap),m.emissiveMap&&(y.emissiveMap.value=m.emissiveMap),m.bumpMap&&(y.bumpMap.value=m.bumpMap,y.bumpScale.value=m.bumpScale,m.side===rt&&(y.bumpScale.value*=-1)),m.normalMap&&(y.normalMap.value=m.normalMap,y.normalScale.value.copy(m.normalScale),m.side===rt&&y.normalScale.value.negate()),m.displacementMap&&(y.displacementMap.value=m.displacementMap,y.displacementScale.value=m.displacementScale,y.displacementBias.value=m.displacementBias),r.get(m).envMap&&(y.envMapIntensity.value=m.envMapIntensity)}function f(y,m,T){d(y,m),y.ior.value=m.ior,m.sheen>0&&(y.sheenColor.value.copy(m.sheenColor).multiplyScalar(m.sheen),y.sheenRoughness.value=m.sheenRoughness,m.sheenColorMap&&(y.sheenColorMap.value=m.sheenColorMap),m.sheenRoughnessMap&&(y.sheenRoughnessMap.value=m.sheenRoughnessMap)),m.clearcoat>0&&(y.clearcoat.value=m.clearcoat,y.clearcoatRoughness.value=m.clearcoatRoughness,m.clearcoatMap&&(y.clearcoatMap.value=m.clearcoatMap),m.clearcoatRoughnessMap&&(y.clearcoatRoughnessMap.value=m.clearcoatRoughnessMap),m.clearcoatNormalMap&&(y.clearcoatNormalScale.value.copy(m.clearcoatNormalScale),y.clearcoatNormalMap.value=m.clearcoatNormalMap,m.side===rt&&y.clearcoatNormalScale.value.negate())),m.transmission>0&&(y.transmission.value=m.transmission,y.transmissionSamplerMap.value=T.texture,y.transmissionSamplerSize.value.set(T.width,T.height),m.transmissionMap&&(y.transmissionMap.value=m.transmissionMap),y.thickness.value=m.thickness,m.thicknessMap&&(y.thicknessMap.value=m.thicknessMap),y.attenuationDistance.value=m.attenuationDistance,y.attenuationColor.value.copy(m.attenuationColor)),y.specularIntensity.value=m.specularIntensity,y.specularColor.value.copy(m.specularColor),m.specularIntensityMap&&(y.specularIntensityMap.value=m.specularIntensityMap),m.specularColorMap&&(y.specularColorMap.value=m.specularColorMap)}function p(y,m){m.matcap&&(y.matcap.value=m.matcap),m.bumpMap&&(y.bumpMap.value=m.bumpMap,y.bumpScale.value=m.bumpScale,m.side===rt&&(y.bumpScale.value*=-1)),m.normalMap&&(y.normalMap.value=m.normalMap,y.normalScale.value.copy(m.normalScale),m.side===rt&&y.normalScale.value.negate()),m.displacementMap&&(y.displacementMap.value=m.displacementMap,y.displacementScale.value=m.displacementScale,y.displacementBias.value=m.displacementBias)}function g(y,m){m.displacementMap&&(y.displacementMap.value=m.displacementMap,y.displacementScale.value=m.displacementScale,y.displacementBias.value=m.displacementBias)}function _(y,m){m.displacementMap&&(y.displacementMap.value=m.displacementMap,y.displacementScale.value=m.displacementScale,y.displacementBias.value=m.displacementBias),y.referencePosition.value.copy(m.referencePosition),y.nearDistance.value=m.nearDistance,y.farDistance.value=m.farDistance}function b(y,m){m.bumpMap&&(y.bumpMap.value=m.bumpMap,y.bumpScale.value=m.bumpScale,m.side===rt&&(y.bumpScale.value*=-1)),m.normalMap&&(y.normalMap.value=m.normalMap,y.normalScale.value.copy(m.normalScale),m.side===rt&&y.normalScale.value.negate()),m.displacementMap&&(y.displacementMap.value=m.displacementMap,y.displacementScale.value=m.displacementScale,y.displacementBias.value=m.displacementBias)}return{refreshFogUniforms:e,refreshMaterialUniforms:t}}function mx(){const r=Tr("canvas");return r.style.display="block",r}function Ze(r={}){const e=r.canvas!==void 0?r.canvas:mx(),t=r.context!==void 0?r.context:null,n=r.depth!==void 0?r.depth:!0,i=r.stencil!==void 0?r.stencil:!0,s=r.antialias!==void 0?r.antialias:!1,o=r.premultipliedAlpha!==void 0?r.premultipliedAlpha:!0,a=r.preserveDrawingBuffer!==void 0?r.preserveDrawingBuffer:!1,c=r.powerPreference!==void 0?r.powerPreference:"default",h=r.failIfMajorPerformanceCaveat!==void 0?r.failIfMajorPerformanceCaveat:!1;let u;r.context!==void 0?u=t.getContextAttributes().alpha:u=r.alpha!==void 0?r.alpha:!1;let d=null,f=null;const p=[],g=[];this.domElement=e,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.outputEncoding=sn,this.physicallyCorrectLights=!1,this.toneMapping=nn,this.toneMappingExposure=1;const _=this;let b=!1,y=0,m=0,T=null,E=-1,S=null;const D=new qe,U=new qe;let N=null,Z=e.width,z=e.height,A=1,F=null,G=null;const W=new qe(0,0,Z,z),q=new qe(0,0,Z,z);let X=!1;const J=new Ir;let k=!1,Q=!1,re=null;const se=new Me,ae=new te,Ee=new L,ze={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function be(){return T===null?A:1}let H=t;function Oe(P,V){for(let K=0;K<P.length;K++){const Y=P[K],ee=e.getContext(Y,V);if(ee!==null)return ee}return null}try{const P={alpha:!0,depth:n,stencil:i,antialias:s,premultipliedAlpha:o,preserveDrawingBuffer:a,powerPreference:c,failIfMajorPerformanceCaveat:h};if("setAttribute"in e&&e.setAttribute("data-engine",`three.js r${rs}`),e.addEventListener("webglcontextlost",B,!1),e.addEventListener("webglcontextrestored",fe,!1),H===null){const V=["webgl2","webgl","experimental-webgl"];if(_.isWebGL1Renderer===!0&&V.shift(),H=Oe(V,P),H===null)throw Oe(V)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}H.getShaderPrecisionFormat===void 0&&(H.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(P){throw console.error("THREE.WebGLRenderer: "+P.message),P}let Re,M,ye,De,$,oe,ce,_e,me,Te,we,Pe,Je,I,C,j,ie,l,x,w,R,O,ne;function le(){Re=new Fg(H),M=new Rg(H,Re,r),Re.init(M),O=new qh(H,Re,M),ye=new hx(H,Re,M),De=new Ng(H),$=new Qy,oe=new ux(H,Re,ye,$,M,O,De),ce=new Lg(_),_e=new Dg(_),me=new Kf(H,M),ne=new Tg(H,Re,me,M),Te=new Ug(H,me,De,ne),we=new Gg(H,Te,me,De),x=new Hg(H,M,oe),j=new Cg($),Pe=new jy(_,ce,_e,Re,M,ne,j),Je=new px($),I=new tx,C=new ax(Re,M),l=new Sg(_,ce,ye,we,u,o),ie=new Xh(_,we,M),w=new Ag(H,Re,De,M),R=new Bg(H,Re,De,M),De.programs=Pe.programs,_.capabilities=M,_.extensions=Re,_.properties=$,_.renderLists=I,_.shadowMap=ie,_.state=ye,_.info=De}le();const de=new fx(_,H);this.xr=de,this.getContext=function(){return H},this.getContextAttributes=function(){return H.getContextAttributes()},this.forceContextLoss=function(){const P=Re.get("WEBGL_lose_context");P&&P.loseContext()},this.forceContextRestore=function(){const P=Re.get("WEBGL_lose_context");P&&P.restoreContext()},this.getPixelRatio=function(){return A},this.setPixelRatio=function(P){P!==void 0&&(A=P,this.setSize(Z,z,!1))},this.getSize=function(P){return P.set(Z,z)},this.setSize=function(P,V,K){if(de.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}Z=P,z=V,e.width=Math.floor(P*A),e.height=Math.floor(V*A),K!==!1&&(e.style.width=P+"px",e.style.height=V+"px"),this.setViewport(0,0,P,V)},this.getDrawingBufferSize=function(P){return P.set(Z*A,z*A).floor()},this.setDrawingBufferSize=function(P,V,K){Z=P,z=V,A=K,e.width=Math.floor(P*K),e.height=Math.floor(V*K),this.setViewport(0,0,P,V)},this.getCurrentViewport=function(P){return P.copy(D)},this.getViewport=function(P){return P.copy(W)},this.setViewport=function(P,V,K,Y){P.isVector4?W.set(P.x,P.y,P.z,P.w):W.set(P,V,K,Y),ye.viewport(D.copy(W).multiplyScalar(A).floor())},this.getScissor=function(P){return P.copy(q)},this.setScissor=function(P,V,K,Y){P.isVector4?q.set(P.x,P.y,P.z,P.w):q.set(P,V,K,Y),ye.scissor(U.copy(q).multiplyScalar(A).floor())},this.getScissorTest=function(){return X},this.setScissorTest=function(P){ye.setScissorTest(X=P)},this.setOpaqueSort=function(P){F=P},this.setTransparentSort=function(P){G=P},this.getClearColor=function(P){return P.copy(l.getClearColor())},this.setClearColor=function(){l.setClearColor.apply(l,arguments)},this.getClearAlpha=function(){return l.getClearAlpha()},this.setClearAlpha=function(){l.setClearAlpha.apply(l,arguments)},this.clear=function(P=!0,V=!0,K=!0){let Y=0;P&&(Y|=H.COLOR_BUFFER_BIT),V&&(Y|=H.DEPTH_BUFFER_BIT),K&&(Y|=H.STENCIL_BUFFER_BIT),H.clear(Y)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){e.removeEventListener("webglcontextlost",B,!1),e.removeEventListener("webglcontextrestored",fe,!1),I.dispose(),C.dispose(),$.dispose(),ce.dispose(),_e.dispose(),we.dispose(),ne.dispose(),Pe.dispose(),de.dispose(),de.removeEventListener("sessionstart",Ge),de.removeEventListener("sessionend",St),re&&(re.dispose(),re=null),$e.stop()};function B(P){P.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),b=!0}function fe(){console.log("THREE.WebGLRenderer: Context Restored."),b=!1;const P=De.autoReset,V=ie.enabled,K=ie.autoUpdate,Y=ie.needsUpdate,ee=ie.type;le(),De.autoReset=P,ie.enabled=V,ie.autoUpdate=K,ie.needsUpdate=Y,ie.type=ee}function ue(P){const V=P.target;V.removeEventListener("dispose",ue),Ae(V)}function Ae(P){xe(P),$.remove(P)}function xe(P){const V=$.get(P).programs;V!==void 0&&(V.forEach(function(K){Pe.releaseProgram(K)}),P.isShaderMaterial&&Pe.releaseShaderCache(P))}this.renderBufferDirect=function(P,V,K,Y,ee,Ce){V===null&&(V=ze);const Ie=ee.isMesh&&ee.matrixWorld.determinant()<0,Ue=Td(P,V,K,Y,ee);ye.setMaterial(Y,Ie);let Fe=K.index;const Ye=K.attributes.position;if(Fe===null){if(Ye===void 0||Ye.count===0)return}else if(Fe.count===0)return;let Ve=1;Y.wireframe===!0&&(Fe=Te.getWireframeAttribute(K),Ve=2),ne.setup(ee,Y,Ue,K,Fe);let We,nt=w;Fe!==null&&(We=me.get(Fe),nt=R,nt.setIndex(We));const On=Fe!==null?Fe.count:Ye.count,_i=K.drawRange.start*Ve,vi=K.drawRange.count*Ve,Yt=Ce!==null?Ce.start*Ve:0,Xe=Ce!==null?Ce.count*Ve:1/0,Mi=Math.max(_i,Yt),ct=Math.min(On,_i+vi,Yt+Xe)-1,Zt=Math.max(0,ct-Mi+1);if(Zt!==0){if(ee.isMesh)Y.wireframe===!0?(ye.setLineWidth(Y.wireframeLinewidth*be()),nt.setMode(H.LINES)):nt.setMode(H.TRIANGLES);else if(ee.isLine){let gn=Y.linewidth;gn===void 0&&(gn=1),ye.setLineWidth(gn*be()),ee.isLineSegments?nt.setMode(H.LINES):ee.isLineLoop?nt.setMode(H.LINE_LOOP):nt.setMode(H.LINE_STRIP)}else ee.isPoints?nt.setMode(H.POINTS):ee.isSprite&&nt.setMode(H.TRIANGLES);if(ee.isInstancedMesh)nt.renderInstances(Mi,Zt,ee.count);else if(K.isInstancedBufferGeometry){const gn=Math.min(K.instanceCount,K._maxInstanceCount);nt.renderInstances(Mi,Zt,gn)}else nt.render(Mi,Zt)}},this.compile=function(P,V){f=C.get(P),f.init(),g.push(f),P.traverseVisible(function(K){K.isLight&&K.layers.test(V.layers)&&(f.pushLight(K),K.castShadow&&f.pushShadow(K))}),f.setupLights(_.physicallyCorrectLights),P.traverse(function(K){const Y=K.material;if(Y)if(Array.isArray(Y))for(let ee=0;ee<Y.length;ee++){const Ce=Y[ee];Ro(Ce,P,K)}else Ro(Y,P,K)}),g.pop(),f=null};let he=null;function Le(P){he&&he(P)}function Ge(){$e.stop()}function St(){$e.start()}const $e=new gh;$e.setAnimationLoop(Le),typeof window!="undefined"&&$e.setContext(window),this.setAnimationLoop=function(P){he=P,de.setAnimationLoop(P),P===null?$e.stop():$e.start()},de.addEventListener("sessionstart",Ge),de.addEventListener("sessionend",St),this.render=function(P,V){if(V!==void 0&&V.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(b===!0)return;P.autoUpdate===!0&&P.updateMatrixWorld(),V.parent===null&&V.updateMatrixWorld(),de.enabled===!0&&de.isPresenting===!0&&(de.cameraAutoUpdate===!0&&de.updateCamera(V),V=de.getCamera()),P.isScene===!0&&P.onBeforeRender(_,P,V,T),f=C.get(P,g.length),f.init(),g.push(f),se.multiplyMatrices(V.projectionMatrix,V.matrixWorldInverse),J.setFromProjectionMatrix(se),Q=this.localClippingEnabled,k=j.init(this.clippingPlanes,Q,V),d=I.get(P,p.length),d.init(),p.push(d),Xt(P,V,0,_.sortObjects),d.finish(),_.sortObjects===!0&&d.sort(F,G),k===!0&&j.beginShadows();const K=f.state.shadowsArray;if(ie.render(K,P,V),k===!0&&j.endShadows(),this.info.autoReset===!0&&this.info.reset(),l.render(d,P),f.setupLights(_.physicallyCorrectLights),V.isArrayCamera){const Y=V.cameras;for(let ee=0,Ce=Y.length;ee<Ce;ee++){const Ie=Y[ee];qt(d,P,Ie,Ie.viewport)}}else qt(d,P,V);T!==null&&(oe.updateMultisampleRenderTarget(T),oe.updateRenderTargetMipmap(T)),P.isScene===!0&&P.onAfterRender(_,P,V),ne.resetDefaultState(),E=-1,S=null,g.pop(),g.length>0?f=g[g.length-1]:f=null,p.pop(),p.length>0?d=p[p.length-1]:d=null};function Xt(P,V,K,Y){if(P.visible===!1)return;if(P.layers.test(V.layers)){if(P.isGroup)K=P.renderOrder;else if(P.isLOD)P.autoUpdate===!0&&P.update(V);else if(P.isLight)f.pushLight(P),P.castShadow&&f.pushShadow(P);else if(P.isSprite){if(!P.frustumCulled||J.intersectsSprite(P)){Y&&Ee.setFromMatrixPosition(P.matrixWorld).applyMatrix4(se);const Ie=we.update(P),Ue=P.material;Ue.visible&&d.push(P,Ie,Ue,K,Ee.z,null)}}else if((P.isMesh||P.isLine||P.isPoints)&&(P.isSkinnedMesh&&P.skeleton.frame!==De.render.frame&&(P.skeleton.update(),P.skeleton.frame=De.render.frame),!P.frustumCulled||J.intersectsObject(P))){Y&&Ee.setFromMatrixPosition(P.matrixWorld).applyMatrix4(se);const Ie=we.update(P),Ue=P.material;if(Array.isArray(Ue)){const Fe=Ie.groups;for(let Ye=0,Ve=Fe.length;Ye<Ve;Ye++){const We=Fe[Ye],nt=Ue[We.materialIndex];nt&&nt.visible&&d.push(P,Ie,nt,K,Ee.z,We)}}else Ue.visible&&d.push(P,Ie,Ue,K,Ee.z,null)}}const Ce=P.children;for(let Ie=0,Ue=Ce.length;Ie<Ue;Ie++)Xt(Ce[Ie],V,K,Y)}function qt(P,V,K,Y){const ee=P.opaque,Ce=P.transmissive,Ie=P.transparent;f.setupLightsView(K),Ce.length>0&&Ed(ee,V,K),Y&&ye.viewport(D.copy(Y)),ee.length>0&&is(ee,V,K),Ce.length>0&&is(Ce,V,K),Ie.length>0&&is(Ie,V,K),ye.buffers.depth.setTest(!0),ye.buffers.depth.setMask(!0),ye.buffers.color.setMask(!0),ye.setPolygonOffset(!1)}function Ed(P,V,K){const Y=M.isWebGL2;re===null&&(re=new At(1,1,{generateMipmaps:!0,type:O.convert(Wn)!==null?Wn:_n,minFilter:kn,samples:Y&&s===!0?4:0})),_.getDrawingBufferSize(ae),Y?re.setSize(ae.x,ae.y):re.setSize(xs(ae.x),xs(ae.y));const ee=_.getRenderTarget();_.setRenderTarget(re),_.clear();const Ce=_.toneMapping;_.toneMapping=nn,is(P,V,K),_.toneMapping=Ce,oe.updateMultisampleRenderTarget(re),oe.updateRenderTargetMipmap(re),_.setRenderTarget(ee)}function is(P,V,K){const Y=V.isScene===!0?V.overrideMaterial:null;for(let ee=0,Ce=P.length;ee<Ce;ee++){const Ie=P[ee],Ue=Ie.object,Fe=Ie.geometry,Ye=Y===null?Ie.material:Y,Ve=Ie.group;Ue.layers.test(K.layers)&&Sd(Ue,V,K,Fe,Ye,Ve)}}function Sd(P,V,K,Y,ee,Ce){P.onBeforeRender(_,V,K,Y,ee,Ce),P.modelViewMatrix.multiplyMatrices(K.matrixWorldInverse,P.matrixWorld),P.normalMatrix.getNormalMatrix(P.modelViewMatrix),ee.onBeforeRender(_,V,K,Y,P,Ce),ee.transparent===!0&&ee.side===Hn?(ee.side=rt,ee.needsUpdate=!0,_.renderBufferDirect(K,V,Y,ee,P,Ce),ee.side=zn,ee.needsUpdate=!0,_.renderBufferDirect(K,V,Y,ee,P,Ce),ee.side=Hn):_.renderBufferDirect(K,V,Y,ee,P,Ce),P.onAfterRender(_,V,K,Y,ee,Ce)}function Ro(P,V,K){V.isScene!==!0&&(V=ze);const Y=$.get(P),ee=f.state.lights,Ce=f.state.shadowsArray,Ie=ee.state.version,Ue=Pe.getParameters(P,ee.state,Ce,V,K),Fe=Pe.getProgramCacheKey(Ue);let Ye=Y.programs;Y.environment=P.isMeshStandardMaterial?V.environment:null,Y.fog=V.fog,Y.envMap=(P.isMeshStandardMaterial?_e:ce).get(P.envMap||Y.environment),Ye===void 0&&(P.addEventListener("dispose",ue),Ye=new Map,Y.programs=Ye);let Ve=Ye.get(Fe);if(Ve!==void 0){if(Y.currentProgram===Ve&&Y.lightsStateVersion===Ie)return zl(P,Ue),Ve}else Ue.uniforms=Pe.getUniforms(P),P.onBuild(K,Ue,_),P.onBeforeCompile(Ue,_),Ve=Pe.acquireProgram(Ue,Fe),Ye.set(Fe,Ve),Y.uniforms=Ue.uniforms;const We=Y.uniforms;(!P.isShaderMaterial&&!P.isRawShaderMaterial||P.clipping===!0)&&(We.clippingPlanes=j.uniform),zl(P,Ue),Y.needsLights=Rd(P),Y.lightsStateVersion=Ie,Y.needsLights&&(We.ambientLightColor.value=ee.state.ambient,We.lightProbe.value=ee.state.probe,We.directionalLights.value=ee.state.directional,We.directionalLightShadows.value=ee.state.directionalShadow,We.spotLights.value=ee.state.spot,We.spotLightShadows.value=ee.state.spotShadow,We.rectAreaLights.value=ee.state.rectArea,We.ltc_1.value=ee.state.rectAreaLTC1,We.ltc_2.value=ee.state.rectAreaLTC2,We.pointLights.value=ee.state.point,We.pointLightShadows.value=ee.state.pointShadow,We.hemisphereLights.value=ee.state.hemi,We.directionalShadowMap.value=ee.state.directionalShadowMap,We.directionalShadowMatrix.value=ee.state.directionalShadowMatrix,We.spotShadowMap.value=ee.state.spotShadowMap,We.spotShadowMatrix.value=ee.state.spotShadowMatrix,We.pointShadowMap.value=ee.state.pointShadowMap,We.pointShadowMatrix.value=ee.state.pointShadowMatrix);const nt=Ve.getUniforms(),On=Dn.seqWithValue(nt.seq,We);return Y.currentProgram=Ve,Y.uniformsList=On,Ve}function zl(P,V){const K=$.get(P);K.outputEncoding=V.outputEncoding,K.instancing=V.instancing,K.skinning=V.skinning,K.morphTargets=V.morphTargets,K.morphNormals=V.morphNormals,K.morphColors=V.morphColors,K.morphTargetsCount=V.morphTargetsCount,K.numClippingPlanes=V.numClippingPlanes,K.numIntersection=V.numClipIntersection,K.vertexAlphas=V.vertexAlphas,K.vertexTangents=V.vertexTangents,K.toneMapping=V.toneMapping}function Td(P,V,K,Y,ee){V.isScene!==!0&&(V=ze),oe.resetTextureUnits();const Ce=V.fog,Ie=Y.isMeshStandardMaterial?V.environment:null,Ue=T===null?_.outputEncoding:T.isXRRenderTarget===!0?T.texture.encoding:sn,Fe=(Y.isMeshStandardMaterial?_e:ce).get(Y.envMap||Ie),Ye=Y.vertexColors===!0&&!!K.attributes.color&&K.attributes.color.itemSize===4,Ve=!!Y.normalMap&&!!K.attributes.tangent,We=!!K.morphAttributes.position,nt=!!K.morphAttributes.normal,On=!!K.morphAttributes.color,_i=Y.toneMapped?_.toneMapping:nn,vi=K.morphAttributes.position||K.morphAttributes.normal||K.morphAttributes.color,Yt=vi!==void 0?vi.length:0,Xe=$.get(Y),Mi=f.state.lights;if(k===!0&&(Q===!0||P!==S)){const Ot=P===S&&Y.id===E;j.setState(Y,P,Ot)}let ct=!1;Y.version===Xe.__version?(Xe.needsLights&&Xe.lightsStateVersion!==Mi.state.version||Xe.outputEncoding!==Ue||ee.isInstancedMesh&&Xe.instancing===!1||!ee.isInstancedMesh&&Xe.instancing===!0||ee.isSkinnedMesh&&Xe.skinning===!1||!ee.isSkinnedMesh&&Xe.skinning===!0||Xe.envMap!==Fe||Y.fog&&Xe.fog!==Ce||Xe.numClippingPlanes!==void 0&&(Xe.numClippingPlanes!==j.numPlanes||Xe.numIntersection!==j.numIntersection)||Xe.vertexAlphas!==Ye||Xe.vertexTangents!==Ve||Xe.morphTargets!==We||Xe.morphNormals!==nt||Xe.morphColors!==On||Xe.toneMapping!==_i||M.isWebGL2===!0&&Xe.morphTargetsCount!==Yt)&&(ct=!0):(ct=!0,Xe.__version=Y.version);let Zt=Xe.currentProgram;ct===!0&&(Zt=Ro(Y,V,ee));let gn=!1,dr=!1,Co=!1;const Mt=Zt.getUniforms(),fr=Xe.uniforms;if(ye.useProgram(Zt.program)&&(gn=!0,dr=!0,Co=!0),Y.id!==E&&(E=Y.id,dr=!0),gn||S!==P){if(Mt.setValue(H,"projectionMatrix",P.projectionMatrix),M.logarithmicDepthBuffer&&Mt.setValue(H,"logDepthBufFC",2/(Math.log(P.far+1)/Math.LN2)),S!==P&&(S=P,dr=!0,Co=!0),Y.isShaderMaterial||Y.isMeshPhongMaterial||Y.isMeshToonMaterial||Y.isMeshStandardMaterial||Y.envMap){const Ot=Mt.map.cameraPosition;Ot!==void 0&&Ot.setValue(H,Ee.setFromMatrixPosition(P.matrixWorld))}(Y.isMeshPhongMaterial||Y.isMeshToonMaterial||Y.isMeshLambertMaterial||Y.isMeshBasicMaterial||Y.isMeshStandardMaterial||Y.isShaderMaterial)&&Mt.setValue(H,"isOrthographic",P.isOrthographicCamera===!0),(Y.isMeshPhongMaterial||Y.isMeshToonMaterial||Y.isMeshLambertMaterial||Y.isMeshBasicMaterial||Y.isMeshStandardMaterial||Y.isShaderMaterial||Y.isShadowMaterial||ee.isSkinnedMesh)&&Mt.setValue(H,"viewMatrix",P.matrixWorldInverse)}if(ee.isSkinnedMesh){Mt.setOptional(H,ee,"bindMatrix"),Mt.setOptional(H,ee,"bindMatrixInverse");const Ot=ee.skeleton;Ot&&(M.floatVertexTextures?(Ot.boneTexture===null&&Ot.computeBoneTexture(),Mt.setValue(H,"boneTexture",Ot.boneTexture,oe),Mt.setValue(H,"boneTextureSize",Ot.boneTextureSize)):Mt.setOptional(H,Ot,"boneMatrices"))}const Lo=K.morphAttributes;return(Lo.position!==void 0||Lo.normal!==void 0||Lo.color!==void 0&&M.isWebGL2===!0)&&x.update(ee,K,Y,Zt),(dr||Xe.receiveShadow!==ee.receiveShadow)&&(Xe.receiveShadow=ee.receiveShadow,Mt.setValue(H,"receiveShadow",ee.receiveShadow)),dr&&(Mt.setValue(H,"toneMappingExposure",_.toneMappingExposure),Xe.needsLights&&Ad(fr,Co),Ce&&Y.fog&&Je.refreshFogUniforms(fr,Ce),Je.refreshMaterialUniforms(fr,Y,A,z,re),Dn.upload(H,Xe.uniformsList,fr,oe)),Y.isShaderMaterial&&Y.uniformsNeedUpdate===!0&&(Dn.upload(H,Xe.uniformsList,fr,oe),Y.uniformsNeedUpdate=!1),Y.isSpriteMaterial&&Mt.setValue(H,"center",ee.center),Mt.setValue(H,"modelViewMatrix",ee.modelViewMatrix),Mt.setValue(H,"normalMatrix",ee.normalMatrix),Mt.setValue(H,"modelMatrix",ee.matrixWorld),Zt}function Ad(P,V){P.ambientLightColor.needsUpdate=V,P.lightProbe.needsUpdate=V,P.directionalLights.needsUpdate=V,P.directionalLightShadows.needsUpdate=V,P.pointLights.needsUpdate=V,P.pointLightShadows.needsUpdate=V,P.spotLights.needsUpdate=V,P.spotLightShadows.needsUpdate=V,P.rectAreaLights.needsUpdate=V,P.hemisphereLights.needsUpdate=V,P.directionalShadowMap.needsUpdate=V,P.directionalShadowMatrix.needsUpdate=V,P.spotShadowMap.needsUpdate=V,P.spotShadowMatrix.needsUpdate=V,P.pointShadowMap.needsUpdate=V,P.pointShadowMatrix.needsUpdate=V}function Rd(P){return P.isMeshLambertMaterial||P.isMeshToonMaterial||P.isMeshPhongMaterial||P.isMeshStandardMaterial||P.isShadowMaterial||P.isShaderMaterial&&P.lights===!0}this.getActiveCubeFace=function(){return y},this.getActiveMipmapLevel=function(){return m},this.getRenderTarget=function(){return T},this.setRenderTargetTextures=function(P,V,K){$.get(P.texture).__webglTexture=V,$.get(P.depthTexture).__webglTexture=K;const Y=$.get(P);Y.__hasExternalTextures=!0,Y.__hasExternalTextures&&(Y.__autoAllocateDepthBuffer=K===void 0,Y.__autoAllocateDepthBuffer||Re.has("WEBGL_multisampled_render_to_texture")===!0&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),P.useRenderToTexture=!1,P.useRenderbuffer=!0))},this.setRenderTargetFramebuffer=function(P,V){const K=$.get(P);K.__webglFramebuffer=V,K.__useDefaultFramebuffer=V===void 0},this.setRenderTarget=function(P,V=0,K=0){T=P,y=V,m=K;let Y=!0;if(P){const Fe=$.get(P);Fe.__useDefaultFramebuffer!==void 0?(ye.bindFramebuffer(H.FRAMEBUFFER,null),Y=!1):Fe.__webglFramebuffer===void 0?oe.setupRenderTarget(P):Fe.__hasExternalTextures&&oe.rebindTextures(P,$.get(P.texture).__webglTexture,$.get(P.depthTexture).__webglTexture)}let ee=null,Ce=!1,Ie=!1;if(P){const Fe=P.texture;(Fe.isData3DTexture||Fe.isDataArrayTexture)&&(Ie=!0);const Ye=$.get(P).__webglFramebuffer;P.isWebGLCubeRenderTarget?(ee=Ye[V],Ce=!0):M.isWebGL2&&P.samples>0&&oe.useMultisampledRTT(P)===!1?ee=$.get(P).__webglMultisampledFramebuffer:ee=Ye,D.copy(P.viewport),U.copy(P.scissor),N=P.scissorTest}else D.copy(W).multiplyScalar(A).floor(),U.copy(q).multiplyScalar(A).floor(),N=X;if(ye.bindFramebuffer(H.FRAMEBUFFER,ee)&&M.drawBuffers&&Y&&ye.drawBuffers(P,ee),ye.viewport(D),ye.scissor(U),ye.setScissorTest(N),Ce){const Fe=$.get(P.texture);H.framebufferTexture2D(H.FRAMEBUFFER,H.COLOR_ATTACHMENT0,H.TEXTURE_CUBE_MAP_POSITIVE_X+V,Fe.__webglTexture,K)}else if(Ie){const Fe=$.get(P.texture),Ye=V||0;H.framebufferTextureLayer(H.FRAMEBUFFER,H.COLOR_ATTACHMENT0,Fe.__webglTexture,K||0,Ye)}E=-1},this.readRenderTargetPixels=function(P,V,K,Y,ee,Ce,Ie){if(!(P&&P.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let Ue=$.get(P).__webglFramebuffer;if(P.isWebGLCubeRenderTarget&&Ie!==void 0&&(Ue=Ue[Ie]),Ue){ye.bindFramebuffer(H.FRAMEBUFFER,Ue);try{const Fe=P.texture,Ye=Fe.format,Ve=Fe.type;if(Ye!==wt&&O.convert(Ye)!==H.getParameter(H.IMPLEMENTATION_COLOR_READ_FORMAT)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}const We=Ve===Wn&&(Re.has("EXT_color_buffer_half_float")||M.isWebGL2&&Re.has("EXT_color_buffer_float"));if(Ve!==_n&&O.convert(Ve)!==H.getParameter(H.IMPLEMENTATION_COLOR_READ_TYPE)&&!(Ve===rn&&(M.isWebGL2||Re.has("OES_texture_float")||Re.has("WEBGL_color_buffer_float")))&&!We){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}H.checkFramebufferStatus(H.FRAMEBUFFER)===H.FRAMEBUFFER_COMPLETE?V>=0&&V<=P.width-Y&&K>=0&&K<=P.height-ee&&H.readPixels(V,K,Y,ee,O.convert(Ye),O.convert(Ve),Ce):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{const Fe=T!==null?$.get(T).__webglFramebuffer:null;ye.bindFramebuffer(H.FRAMEBUFFER,Fe)}}},this.copyFramebufferToTexture=function(P,V,K=0){if(V.isFramebufferTexture!==!0){console.error("THREE.WebGLRenderer: copyFramebufferToTexture() can only be used with FramebufferTexture.");return}const Y=Math.pow(2,-K),ee=Math.floor(V.image.width*Y),Ce=Math.floor(V.image.height*Y);oe.setTexture2D(V,0),H.copyTexSubImage2D(H.TEXTURE_2D,K,0,0,P.x,P.y,ee,Ce),ye.unbindTexture()},this.copyTextureToTexture=function(P,V,K,Y=0){const ee=V.image.width,Ce=V.image.height,Ie=O.convert(K.format),Ue=O.convert(K.type);oe.setTexture2D(K,0),H.pixelStorei(H.UNPACK_FLIP_Y_WEBGL,K.flipY),H.pixelStorei(H.UNPACK_PREMULTIPLY_ALPHA_WEBGL,K.premultiplyAlpha),H.pixelStorei(H.UNPACK_ALIGNMENT,K.unpackAlignment),V.isDataTexture?H.texSubImage2D(H.TEXTURE_2D,Y,P.x,P.y,ee,Ce,Ie,Ue,V.image.data):V.isCompressedTexture?H.compressedTexSubImage2D(H.TEXTURE_2D,Y,P.x,P.y,V.mipmaps[0].width,V.mipmaps[0].height,Ie,V.mipmaps[0].data):H.texSubImage2D(H.TEXTURE_2D,Y,P.x,P.y,Ie,Ue,V.image),Y===0&&K.generateMipmaps&&H.generateMipmap(H.TEXTURE_2D),ye.unbindTexture()},this.copyTextureToTexture3D=function(P,V,K,Y,ee=0){if(_.isWebGL1Renderer){console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");return}const Ce=P.max.x-P.min.x+1,Ie=P.max.y-P.min.y+1,Ue=P.max.z-P.min.z+1,Fe=O.convert(Y.format),Ye=O.convert(Y.type);let Ve;if(Y.isData3DTexture)oe.setTexture3D(Y,0),Ve=H.TEXTURE_3D;else if(Y.isDataArrayTexture)oe.setTexture2DArray(Y,0),Ve=H.TEXTURE_2D_ARRAY;else{console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");return}H.pixelStorei(H.UNPACK_FLIP_Y_WEBGL,Y.flipY),H.pixelStorei(H.UNPACK_PREMULTIPLY_ALPHA_WEBGL,Y.premultiplyAlpha),H.pixelStorei(H.UNPACK_ALIGNMENT,Y.unpackAlignment);const We=H.getParameter(H.UNPACK_ROW_LENGTH),nt=H.getParameter(H.UNPACK_IMAGE_HEIGHT),On=H.getParameter(H.UNPACK_SKIP_PIXELS),_i=H.getParameter(H.UNPACK_SKIP_ROWS),vi=H.getParameter(H.UNPACK_SKIP_IMAGES),Yt=K.isCompressedTexture?K.mipmaps[0]:K.image;H.pixelStorei(H.UNPACK_ROW_LENGTH,Yt.width),H.pixelStorei(H.UNPACK_IMAGE_HEIGHT,Yt.height),H.pixelStorei(H.UNPACK_SKIP_PIXELS,P.min.x),H.pixelStorei(H.UNPACK_SKIP_ROWS,P.min.y),H.pixelStorei(H.UNPACK_SKIP_IMAGES,P.min.z),K.isDataTexture||K.isData3DTexture?H.texSubImage3D(Ve,ee,V.x,V.y,V.z,Ce,Ie,Ue,Fe,Ye,Yt.data):K.isCompressedTexture?(console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."),H.compressedTexSubImage3D(Ve,ee,V.x,V.y,V.z,Ce,Ie,Ue,Fe,Yt.data)):H.texSubImage3D(Ve,ee,V.x,V.y,V.z,Ce,Ie,Ue,Fe,Ye,Yt),H.pixelStorei(H.UNPACK_ROW_LENGTH,We),H.pixelStorei(H.UNPACK_IMAGE_HEIGHT,nt),H.pixelStorei(H.UNPACK_SKIP_PIXELS,On),H.pixelStorei(H.UNPACK_SKIP_ROWS,_i),H.pixelStorei(H.UNPACK_SKIP_IMAGES,vi),ee===0&&Y.generateMipmaps&&H.generateMipmap(Ve),ye.unbindTexture()},this.initTexture=function(P){oe.setTexture2D(P,0),ye.unbindTexture()},this.resetState=function(){y=0,m=0,T=null,ye.reset(),ne.reset()},typeof __THREE_DEVTOOLS__!="undefined"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}Ze.prototype.isWebGLRenderer=!0;class Yh extends Ze{}Yh.prototype.isWebGL1Renderer=!0;class Ur{constructor(e,t=25e-5){this.name="",this.color=new ge(e),this.density=t}clone(){return new Ur(this.color,this.density)}toJSON(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}}}Ur.prototype.isFogExp2=!0;class Br{constructor(e,t=1,n=1e3){this.name="",this.color=new ge(e),this.near=t,this.far=n}clone(){return new Br(this.color,this.near,this.far)}toJSON(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}}}Br.prototype.isFog=!0;class qs extends Ne{constructor(){super();this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0,typeof __THREE_DEVTOOLS__!="undefined"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(e,t){return super.copy(e,t),e.background!==null&&(this.background=e.background.clone()),e.environment!==null&&(this.environment=e.environment.clone()),e.fog!==null&&(this.fog=e.fog.clone()),e.overrideMaterial!==null&&(this.overrideMaterial=e.overrideMaterial.clone()),this.autoUpdate=e.autoUpdate,this.matrixAutoUpdate=e.matrixAutoUpdate,this}toJSON(e){const t=super.toJSON(e);return this.fog!==null&&(t.object.fog=this.fog.toJSON()),t}}qs.prototype.isScene=!0;class ri{constructor(e,t){this.array=e,this.stride=t,this.count=e!==void 0?e.length/t:0,this.usage=Si,this.updateRange={offset:0,count:-1},this.version=0,this.uuid=Pt()}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}copy(e){return this.array=new e.array.constructor(e.array),this.count=e.count,this.stride=e.stride,this.usage=e.usage,this}copyAt(e,t,n){e*=this.stride,n*=t.stride;for(let i=0,s=this.stride;i<s;i++)this.array[e+i]=t.array[n+i];return this}set(e,t=0){return this.array.set(e,t),this}clone(e){e.arrayBuffers===void 0&&(e.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Pt()),e.arrayBuffers[this.array.buffer._uuid]===void 0&&(e.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const t=new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]),n=new this.constructor(t,this.stride);return n.setUsage(this.usage),n}onUpload(e){return this.onUploadCallback=e,this}toJSON(e){return e.arrayBuffers===void 0&&(e.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Pt()),e.arrayBuffers[this.array.buffer._uuid]===void 0&&(e.arrayBuffers[this.array.buffer._uuid]=Array.prototype.slice.call(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}ri.prototype.isInterleavedBuffer=!0;const at=new L;class Fn{constructor(e,t,n,i=!1){this.name="",this.data=e,this.itemSize=t,this.offset=n,this.normalized=i===!0}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(e){this.data.needsUpdate=e}applyMatrix4(e){for(let t=0,n=this.data.count;t<n;t++)at.x=this.getX(t),at.y=this.getY(t),at.z=this.getZ(t),at.applyMatrix4(e),this.setXYZ(t,at.x,at.y,at.z);return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++)at.x=this.getX(t),at.y=this.getY(t),at.z=this.getZ(t),at.applyNormalMatrix(e),this.setXYZ(t,at.x,at.y,at.z);return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++)at.x=this.getX(t),at.y=this.getY(t),at.z=this.getZ(t),at.transformDirection(e),this.setXYZ(t,at.x,at.y,at.z);return this}setX(e,t){return this.data.array[e*this.data.stride+this.offset]=t,this}setY(e,t){return this.data.array[e*this.data.stride+this.offset+1]=t,this}setZ(e,t){return this.data.array[e*this.data.stride+this.offset+2]=t,this}setW(e,t){return this.data.array[e*this.data.stride+this.offset+3]=t,this}getX(e){return this.data.array[e*this.data.stride+this.offset]}getY(e){return this.data.array[e*this.data.stride+this.offset+1]}getZ(e){return this.data.array[e*this.data.stride+this.offset+2]}getW(e){return this.data.array[e*this.data.stride+this.offset+3]}setXY(e,t,n){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=n,this}setXYZ(e,t,n,i){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=i,this}setXYZW(e,t,n,i,s){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=i,this.data.array[e+3]=s,this}clone(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.");const t=[];for(let n=0;n<this.count;n++){const i=n*this.data.stride+this.offset;for(let s=0;s<this.itemSize;s++)t.push(this.data.array[i+s])}return new He(new this.array.constructor(t),this.itemSize,this.normalized)}else return e.interleavedBuffers===void 0&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===void 0&&(e.interleavedBuffers[this.data.uuid]=this.data.clone(e)),new Fn(e.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.");const t=[];for(let n=0;n<this.count;n++){const i=n*this.data.stride+this.offset;for(let s=0;s<this.itemSize;s++)t.push(this.data.array[i+s])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:t,normalized:this.normalized}}else return e.interleavedBuffers===void 0&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===void 0&&(e.interleavedBuffers[this.data.uuid]=this.data.toJSON(e)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}Fn.prototype.isInterleavedBufferAttribute=!0;class Ys extends ot{constructor(e){super();this.type="SpriteMaterial",this.color=new ge(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.rotation=e.rotation,this.sizeAttenuation=e.sizeAttenuation,this}}Ys.prototype.isSpriteMaterial=!0;let Ji;const Nr=new L,$i=new L,Ki=new L,ji=new te,Or=new te,Zh=new Me,Zs=new L,zr=new L,Js=new L,Jh=new te,Xa=new te,$h=new te;class $s extends Ne{constructor(e){super();if(this.type="Sprite",Ji===void 0){Ji=new Se;const t=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),n=new ri(t,5);Ji.setIndex([0,1,2,0,2,3]),Ji.setAttribute("position",new Fn(n,3,0,!1)),Ji.setAttribute("uv",new Fn(n,2,3,!1))}this.geometry=Ji,this.material=e!==void 0?e:new Ys,this.center=new te(.5,.5)}raycast(e,t){e.camera===null&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),$i.setFromMatrixScale(this.matrixWorld),Zh.copy(e.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(e.camera.matrixWorldInverse,this.matrixWorld),Ki.setFromMatrixPosition(this.modelViewMatrix),e.camera.isPerspectiveCamera&&this.material.sizeAttenuation===!1&&$i.multiplyScalar(-Ki.z);const n=this.material.rotation;let i,s;n!==0&&(s=Math.cos(n),i=Math.sin(n));const o=this.center;Ks(Zs.set(-.5,-.5,0),Ki,o,$i,i,s),Ks(zr.set(.5,-.5,0),Ki,o,$i,i,s),Ks(Js.set(.5,.5,0),Ki,o,$i,i,s),Jh.set(0,0),Xa.set(1,0),$h.set(1,1);let a=e.ray.intersectTriangle(Zs,zr,Js,!1,Nr);if(a===null&&(Ks(zr.set(-.5,.5,0),Ki,o,$i,i,s),Xa.set(0,1),a=e.ray.intersectTriangle(Zs,Js,zr,!1,Nr),a===null))return;const c=e.ray.origin.distanceTo(Nr);c<e.near||c>e.far||t.push({distance:c,point:Nr.clone(),uv:st.getUV(Nr,Zs,zr,Js,Jh,Xa,$h,new te),face:null,object:this})}copy(e){return super.copy(e),e.center!==void 0&&this.center.copy(e.center),this.material=e.material,this}}$s.prototype.isSprite=!0;function Ks(r,e,t,n,i,s){ji.subVectors(r,t).addScalar(.5).multiply(n),i!==void 0?(Or.x=s*ji.x-i*ji.y,Or.y=i*ji.x+s*ji.y):Or.copy(ji),r.copy(e),r.x+=Or.x,r.y+=Or.y,r.applyMatrix4(Zh)}const js=new L,Kh=new L;class jh extends Ne{constructor(){super();this._currentLevel=0,this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]},isLOD:{value:!0}}),this.autoUpdate=!0}copy(e){super.copy(e,!1);const t=e.levels;for(let n=0,i=t.length;n<i;n++){const s=t[n];this.addLevel(s.object.clone(),s.distance)}return this.autoUpdate=e.autoUpdate,this}addLevel(e,t=0){t=Math.abs(t);const n=this.levels;let i;for(i=0;i<n.length&&!(t<n[i].distance);i++);return n.splice(i,0,{distance:t,object:e}),this.add(e),this}getCurrentLevel(){return this._currentLevel}getObjectForDistance(e){const t=this.levels;if(t.length>0){let n,i;for(n=1,i=t.length;n<i&&!(e<t[n].distance);n++);return t[n-1].object}return null}raycast(e,t){if(this.levels.length>0){js.setFromMatrixPosition(this.matrixWorld);const i=e.ray.origin.distanceTo(js);this.getObjectForDistance(i).raycast(e,t)}}update(e){const t=this.levels;if(t.length>1){js.setFromMatrixPosition(e.matrixWorld),Kh.setFromMatrixPosition(this.matrixWorld);const n=js.distanceTo(Kh)/e.zoom;t[0].object.visible=!0;let i,s;for(i=1,s=t.length;i<s&&n>=t[i].distance;i++)t[i-1].object.visible=!1,t[i].object.visible=!0;for(this._currentLevel=i-1;i<s;i++)t[i].object.visible=!1}}toJSON(e){const t=super.toJSON(e);this.autoUpdate===!1&&(t.object.autoUpdate=!1),t.object.levels=[];const n=this.levels;for(let i=0,s=n.length;i<s;i++){const o=n[i];t.object.levels.push({object:o.object.uuid,distance:o.distance})}return t}}const Qh=new L,eu=new qe,tu=new qe,gx=new L,nu=new Me;class Qs extends dt{constructor(e,t){super(e,t);this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new Me,this.bindMatrixInverse=new Me}copy(e){return super.copy(e),this.bindMode=e.bindMode,this.bindMatrix.copy(e.bindMatrix),this.bindMatrixInverse.copy(e.bindMatrixInverse),this.skeleton=e.skeleton,this}bind(e,t){this.skeleton=e,t===void 0&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),t=this.matrixWorld),this.bindMatrix.copy(t),this.bindMatrixInverse.copy(t).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const e=new qe,t=this.geometry.attributes.skinWeight;for(let n=0,i=t.count;n<i;n++){e.x=t.getX(n),e.y=t.getY(n),e.z=t.getZ(n),e.w=t.getW(n);const s=1/e.manhattanLength();s!==1/0?e.multiplyScalar(s):e.set(1,0,0,0),t.setXYZW(n,e.x,e.y,e.z,e.w)}}updateMatrixWorld(e){super.updateMatrixWorld(e),this.bindMode==="attached"?this.bindMatrixInverse.copy(this.matrixWorld).invert():this.bindMode==="detached"?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}boneTransform(e,t){const n=this.skeleton,i=this.geometry;eu.fromBufferAttribute(i.attributes.skinIndex,e),tu.fromBufferAttribute(i.attributes.skinWeight,e),Qh.copy(t).applyMatrix4(this.bindMatrix),t.set(0,0,0);for(let s=0;s<4;s++){const o=tu.getComponent(s);if(o!==0){const a=eu.getComponent(s);nu.multiplyMatrices(n.bones[a].matrixWorld,n.boneInverses[a]),t.addScaledVector(gx.copy(Qh).applyMatrix4(nu),o)}}return t.applyMatrix4(this.bindMatrixInverse)}}Qs.prototype.isSkinnedMesh=!0;class eo extends Ne{constructor(){super();this.type="Bone"}}eo.prototype.isBone=!0;class si extends ut{constructor(e=null,t=1,n=1,i,s,o,a,c,h=ht,u=ht,d,f){super(null,o,a,c,h,u,i,s,d,f);this.image={data:e,width:t,height:n},this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}si.prototype.isDataTexture=!0;const iu=new Me,yx=new Me;class to{constructor(e=[],t=[]){this.uuid=Pt(),this.bones=e.slice(0),this.boneInverses=t,this.boneMatrices=null,this.boneTexture=null,this.boneTextureSize=0,this.frame=-1,this.init()}init(){const e=this.bones,t=this.boneInverses;if(this.boneMatrices=new Float32Array(e.length*16),t.length===0)this.calculateInverses();else if(e.length!==t.length){console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."),this.boneInverses=[];for(let n=0,i=this.bones.length;n<i;n++)this.boneInverses.push(new Me)}}calculateInverses(){this.boneInverses.length=0;for(let e=0,t=this.bones.length;e<t;e++){const n=new Me;this.bones[e]&&n.copy(this.bones[e].matrixWorld).invert(),this.boneInverses.push(n)}}pose(){for(let e=0,t=this.bones.length;e<t;e++){const n=this.bones[e];n&&n.matrixWorld.copy(this.boneInverses[e]).invert()}for(let e=0,t=this.bones.length;e<t;e++){const n=this.bones[e];n&&(n.parent&&n.parent.isBone?(n.matrix.copy(n.parent.matrixWorld).invert(),n.matrix.multiply(n.matrixWorld)):n.matrix.copy(n.matrixWorld),n.matrix.decompose(n.position,n.quaternion,n.scale))}}update(){const e=this.bones,t=this.boneInverses,n=this.boneMatrices,i=this.boneTexture;for(let s=0,o=e.length;s<o;s++){const a=e[s]?e[s].matrixWorld:yx;iu.multiplyMatrices(a,t[s]),iu.toArray(n,s*16)}i!==null&&(i.needsUpdate=!0)}clone(){return new to(this.bones,this.boneInverses)}computeBoneTexture(){let e=Math.sqrt(this.bones.length*4);e=Wc(e),e=Math.max(e,4);const t=new Float32Array(e*e*4);t.set(this.boneMatrices);const n=new si(t,e,e,wt,rn);return n.needsUpdate=!0,this.boneMatrices=t,this.boneTexture=n,this.boneTextureSize=e,this}getBoneByName(e){for(let t=0,n=this.bones.length;t<n;t++){const i=this.bones[t];if(i.name===e)return i}}dispose(){this.boneTexture!==null&&(this.boneTexture.dispose(),this.boneTexture=null)}fromJSON(e,t){this.uuid=e.uuid;for(let n=0,i=e.bones.length;n<i;n++){const s=e.bones[n];let o=t[s];o===void 0&&(console.warn("THREE.Skeleton: No bone found with UUID:",s),o=new eo),this.bones.push(o),this.boneInverses.push(new Me().fromArray(e.boneInverses[n]))}return this.init(),this}toJSON(){const e={metadata:{version:4.5,type:"Skeleton",generator:"Skeleton.toJSON"},bones:[],boneInverses:[]};e.uuid=this.uuid;const t=this.bones,n=this.boneInverses;for(let i=0,s=t.length;i<s;i++){const o=t[i];e.bones.push(o.uuid);const a=n[i];e.boneInverses.push(a.toArray())}return e}}class oi extends He{constructor(e,t,n,i=1){typeof n=="number"&&(i=n,n=!1,console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument."));super(e,t,n);this.meshPerAttribute=i}copy(e){return super.copy(e),this.meshPerAttribute=e.meshPerAttribute,this}toJSON(){const e=super.toJSON();return e.meshPerAttribute=this.meshPerAttribute,e.isInstancedBufferAttribute=!0,e}}oi.prototype.isInstancedBufferAttribute=!0;const ru=new Me,su=new Me,no=[],Hr=new dt;class qa extends dt{constructor(e,t,n){super(e,t);this.instanceMatrix=new oi(new Float32Array(n*16),16),this.instanceColor=null,this.count=n,this.frustumCulled=!1}copy(e){return super.copy(e),this.instanceMatrix.copy(e.instanceMatrix),e.instanceColor!==null&&(this.instanceColor=e.instanceColor.clone()),this.count=e.count,this}getColorAt(e,t){t.fromArray(this.instanceColor.array,e*3)}getMatrixAt(e,t){t.fromArray(this.instanceMatrix.array,e*16)}raycast(e,t){const n=this.matrixWorld,i=this.count;if(Hr.geometry=this.geometry,Hr.material=this.material,Hr.material!==void 0)for(let s=0;s<i;s++){this.getMatrixAt(s,ru),su.multiplyMatrices(n,ru),Hr.matrixWorld=su,Hr.raycast(e,no);for(let o=0,a=no.length;o<a;o++){const c=no[o];c.instanceId=s,c.object=this,t.push(c)}no.length=0}}setColorAt(e,t){this.instanceColor===null&&(this.instanceColor=new oi(new Float32Array(this.instanceMatrix.count*3),3)),t.toArray(this.instanceColor.array,e*3)}setMatrixAt(e,t){t.toArray(this.instanceMatrix.array,e*16)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:"dispose"})}}qa.prototype.isInstancedMesh=!0;class gt extends ot{constructor(e){super();this.type="LineBasicMaterial",this.color=new ge(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.linewidth=e.linewidth,this.linecap=e.linecap,this.linejoin=e.linejoin,this}}gt.prototype.isLineBasicMaterial=!0;const ou=new L,au=new L,lu=new Me,Ya=new An,io=new Sn;class fn extends Ne{constructor(e=new Se,t=new gt){super();this.type="Line",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e){return super.copy(e),this.material=e.material,this.geometry=e.geometry,this}computeLineDistances(){const e=this.geometry;if(e.isBufferGeometry)if(e.index===null){const t=e.attributes.position,n=[0];for(let i=1,s=t.count;i<s;i++)ou.fromBufferAttribute(t,i-1),au.fromBufferAttribute(t,i),n[i]=n[i-1],n[i]+=ou.distanceTo(au);e.setAttribute("lineDistance",new ve(n,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else e.isGeometry&&console.error("THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return this}raycast(e,t){const n=this.geometry,i=this.matrixWorld,s=e.params.Line.threshold,o=n.drawRange;if(n.boundingSphere===null&&n.computeBoundingSphere(),io.copy(n.boundingSphere),io.applyMatrix4(i),io.radius+=s,e.ray.intersectsSphere(io)===!1)return;lu.copy(i).invert(),Ya.copy(e.ray).applyMatrix4(lu);const a=s/((this.scale.x+this.scale.y+this.scale.z)/3),c=a*a,h=new L,u=new L,d=new L,f=new L,p=this.isLineSegments?2:1;if(n.isBufferGeometry){const g=n.index,b=n.attributes.position;if(g!==null){const y=Math.max(0,o.start),m=Math.min(g.count,o.start+o.count);for(let T=y,E=m-1;T<E;T+=p){const S=g.getX(T),D=g.getX(T+1);if(h.fromBufferAttribute(b,S),u.fromBufferAttribute(b,D),Ya.distanceSqToSegment(h,u,f,d)>c)continue;f.applyMatrix4(this.matrixWorld);const N=e.ray.origin.distanceTo(f);N<e.near||N>e.far||t.push({distance:N,point:d.clone().applyMatrix4(this.matrixWorld),index:T,face:null,faceIndex:null,object:this})}}else{const y=Math.max(0,o.start),m=Math.min(b.count,o.start+o.count);for(let T=y,E=m-1;T<E;T+=p){if(h.fromBufferAttribute(b,T),u.fromBufferAttribute(b,T+1),Ya.distanceSqToSegment(h,u,f,d)>c)continue;f.applyMatrix4(this.matrixWorld);const D=e.ray.origin.distanceTo(f);D<e.near||D>e.far||t.push({distance:D,point:d.clone().applyMatrix4(this.matrixWorld),index:T,face:null,faceIndex:null,object:this})}}}else n.isGeometry&&console.error("THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}updateMorphTargets(){const e=this.geometry;if(e.isBufferGeometry){const t=e.morphAttributes,n=Object.keys(t);if(n.length>0){const i=t[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let s=0,o=i.length;s<o;s++){const a=i[s].name||String(s);this.morphTargetInfluences.push(0),this.morphTargetDictionary[a]=s}}}}else{const t=e.morphTargets;t!==void 0&&t.length>0&&console.error("THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}fn.prototype.isLine=!0;const cu=new L,hu=new L;class Lt extends fn{constructor(e,t){super(e,t);this.type="LineSegments"}computeLineDistances(){const e=this.geometry;if(e.isBufferGeometry)if(e.index===null){const t=e.attributes.position,n=[];for(let i=0,s=t.count;i<s;i+=2)cu.fromBufferAttribute(t,i),hu.fromBufferAttribute(t,i+1),n[i]=i===0?0:n[i-1],n[i+1]=n[i]+cu.distanceTo(hu);e.setAttribute("lineDistance",new ve(n,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else e.isGeometry&&console.error("THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return this}}Lt.prototype.isLineSegments=!0;class Za extends fn{constructor(e,t){super(e,t);this.type="LineLoop"}}Za.prototype.isLineLoop=!0;class ai extends ot{constructor(e){super();this.type="PointsMaterial",this.color=new ge(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.size=e.size,this.sizeAttenuation=e.sizeAttenuation,this}}ai.prototype.isPointsMaterial=!0;const uu=new Me,Ja=new An,ro=new Sn,so=new L;class Gr extends Ne{constructor(e=new Se,t=new ai){super();this.type="Points",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e){return super.copy(e),this.material=e.material,this.geometry=e.geometry,this}raycast(e,t){const n=this.geometry,i=this.matrixWorld,s=e.params.Points.threshold,o=n.drawRange;if(n.boundingSphere===null&&n.computeBoundingSphere(),ro.copy(n.boundingSphere),ro.applyMatrix4(i),ro.radius+=s,e.ray.intersectsSphere(ro)===!1)return;uu.copy(i).invert(),Ja.copy(e.ray).applyMatrix4(uu);const a=s/((this.scale.x+this.scale.y+this.scale.z)/3),c=a*a;if(n.isBufferGeometry){const h=n.index,d=n.attributes.position;if(h!==null){const f=Math.max(0,o.start),p=Math.min(h.count,o.start+o.count);for(let g=f,_=p;g<_;g++){const b=h.getX(g);so.fromBufferAttribute(d,b),du(so,b,c,i,e,t,this)}}else{const f=Math.max(0,o.start),p=Math.min(d.count,o.start+o.count);for(let g=f,_=p;g<_;g++)so.fromBufferAttribute(d,g),du(so,g,c,i,e,t,this)}}else console.error("THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}updateMorphTargets(){const e=this.geometry;if(e.isBufferGeometry){const t=e.morphAttributes,n=Object.keys(t);if(n.length>0){const i=t[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let s=0,o=i.length;s<o;s++){const a=i[s].name||String(s);this.morphTargetInfluences.push(0),this.morphTargetDictionary[a]=s}}}}else{const t=e.morphTargets;t!==void 0&&t.length>0&&console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}Gr.prototype.isPoints=!0;function du(r,e,t,n,i,s,o){const a=Ja.distanceSqToPoint(r);if(a<t){const c=new L;Ja.closestPointToPoint(r,c),c.applyMatrix4(n);const h=i.ray.origin.distanceTo(c);if(h<i.near||h>i.far)return;s.push({distance:h,distanceToRay:Math.sqrt(a),point:c,index:e,face:null,object:o})}}class fu extends ut{constructor(e,t,n,i,s,o,a,c,h){super(e,t,n,i,s,o,a,c,h);this.minFilter=o!==void 0?o:et,this.magFilter=s!==void 0?s:et,this.generateMipmaps=!1;const u=this;function d(){u.needsUpdate=!0,e.requestVideoFrameCallback(d)}"requestVideoFrameCallback"in e&&e.requestVideoFrameCallback(d)}clone(){return new this.constructor(this.image).copy(this)}update(){const e=this.image;"requestVideoFrameCallback"in e===!1&&e.readyState>=e.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}fu.prototype.isVideoTexture=!0;class pu extends ut{constructor(e,t,n){super({width:e,height:t});this.format=n,this.magFilter=ht,this.minFilter=ht,this.generateMipmaps=!1,this.needsUpdate=!0}}pu.prototype.isFramebufferTexture=!0;class $a extends ut{constructor(e,t,n,i,s,o,a,c,h,u,d,f){super(null,o,a,c,h,u,i,s,d,f);this.image={width:t,height:n},this.mipmaps=e,this.flipY=!1,this.generateMipmaps=!1}}$a.prototype.isCompressedTexture=!0;class mu extends ut{constructor(e,t,n,i,s,o,a,c,h){super(e,t,n,i,s,o,a,c,h);this.needsUpdate=!0}}mu.prototype.isCanvasTexture=!0;class Qi extends Se{constructor(e=1,t=8,n=0,i=Math.PI*2){super();this.type="CircleGeometry",this.parameters={radius:e,segments:t,thetaStart:n,thetaLength:i},t=Math.max(3,t);const s=[],o=[],a=[],c=[],h=new L,u=new te;o.push(0,0,0),a.push(0,0,1),c.push(.5,.5);for(let d=0,f=3;d<=t;d++,f+=3){const p=n+d/t*i;h.x=e*Math.cos(p),h.y=e*Math.sin(p),o.push(h.x,h.y,h.z),a.push(0,0,1),u.x=(o[f]/e+1)/2,u.y=(o[f+1]/e+1)/2,c.push(u.x,u.y)}for(let d=1;d<=t;d++)s.push(d,d+1,0);this.setIndex(s),this.setAttribute("position",new ve(o,3)),this.setAttribute("normal",new ve(a,3)),this.setAttribute("uv",new ve(c,2))}static fromJSON(e){return new Qi(e.radius,e.segments,e.thetaStart,e.thetaLength)}}class Un extends Se{constructor(e=1,t=1,n=1,i=8,s=1,o=!1,a=0,c=Math.PI*2){super();this.type="CylinderGeometry",this.parameters={radiusTop:e,radiusBottom:t,height:n,radialSegments:i,heightSegments:s,openEnded:o,thetaStart:a,thetaLength:c};const h=this;i=Math.floor(i),s=Math.floor(s);const u=[],d=[],f=[],p=[];let g=0;const _=[],b=n/2;let y=0;m(),o===!1&&(e>0&&T(!0),t>0&&T(!1)),this.setIndex(u),this.setAttribute("position",new ve(d,3)),this.setAttribute("normal",new ve(f,3)),this.setAttribute("uv",new ve(p,2));function m(){const E=new L,S=new L;let D=0;const U=(t-e)/n;for(let N=0;N<=s;N++){const Z=[],z=N/s,A=z*(t-e)+e;for(let F=0;F<=i;F++){const G=F/i,W=G*c+a,q=Math.sin(W),X=Math.cos(W);S.x=A*q,S.y=-z*n+b,S.z=A*X,d.push(S.x,S.y,S.z),E.set(q,U,X).normalize(),f.push(E.x,E.y,E.z),p.push(G,1-z),Z.push(g++)}_.push(Z)}for(let N=0;N<i;N++)for(let Z=0;Z<s;Z++){const z=_[Z][N],A=_[Z+1][N],F=_[Z+1][N+1],G=_[Z][N+1];u.push(z,A,G),u.push(A,F,G),D+=6}h.addGroup(y,D,0),y+=D}function T(E){const S=g,D=new te,U=new L;let N=0;const Z=E===!0?e:t,z=E===!0?1:-1;for(let F=1;F<=i;F++)d.push(0,b*z,0),f.push(0,z,0),p.push(.5,.5),g++;const A=g;for(let F=0;F<=i;F++){const W=F/i*c+a,q=Math.cos(W),X=Math.sin(W);U.x=Z*X,U.y=b*z,U.z=Z*q,d.push(U.x,U.y,U.z),f.push(0,z,0),D.x=q*.5+.5,D.y=X*.5*z+.5,p.push(D.x,D.y),g++}for(let F=0;F<i;F++){const G=S+F,W=A+F;E===!0?u.push(W,W+1,G):u.push(W+1,W,G),N+=3}h.addGroup(y,N,E===!0?1:2),y+=N}}static fromJSON(e){return new Un(e.radiusTop,e.radiusBottom,e.height,e.radialSegments,e.heightSegments,e.openEnded,e.thetaStart,e.thetaLength)}}class er extends Un{constructor(e=1,t=1,n=8,i=1,s=!1,o=0,a=Math.PI*2){super(0,e,t,n,i,s,o,a);this.type="ConeGeometry",this.parameters={radius:e,height:t,radialSegments:n,heightSegments:i,openEnded:s,thetaStart:o,thetaLength:a}}static fromJSON(e){return new er(e.radius,e.height,e.radialSegments,e.heightSegments,e.openEnded,e.thetaStart,e.thetaLength)}}class $t extends Se{constructor(e=[],t=[],n=1,i=0){super();this.type="PolyhedronGeometry",this.parameters={vertices:e,indices:t,radius:n,detail:i};const s=[],o=[];a(i),h(n),u(),this.setAttribute("position",new ve(s,3)),this.setAttribute("normal",new ve(s.slice(),3)),this.setAttribute("uv",new ve(o,2)),i===0?this.computeVertexNormals():this.normalizeNormals();function a(m){const T=new L,E=new L,S=new L;for(let D=0;D<t.length;D+=3)p(t[D+0],T),p(t[D+1],E),p(t[D+2],S),c(T,E,S,m)}function c(m,T,E,S){const D=S+1,U=[];for(let N=0;N<=D;N++){U[N]=[];const Z=m.clone().lerp(E,N/D),z=T.clone().lerp(E,N/D),A=D-N;for(let F=0;F<=A;F++)F===0&&N===D?U[N][F]=Z:U[N][F]=Z.clone().lerp(z,F/A)}for(let N=0;N<D;N++)for(let Z=0;Z<2*(D-N)-1;Z++){const z=Math.floor(Z/2);Z%2==0?(f(U[N][z+1]),f(U[N+1][z]),f(U[N][z])):(f(U[N][z+1]),f(U[N+1][z+1]),f(U[N+1][z]))}}function h(m){const T=new L;for(let E=0;E<s.length;E+=3)T.x=s[E+0],T.y=s[E+1],T.z=s[E+2],T.normalize().multiplyScalar(m),s[E+0]=T.x,s[E+1]=T.y,s[E+2]=T.z}function u(){const m=new L;for(let T=0;T<s.length;T+=3){m.x=s[T+0],m.y=s[T+1],m.z=s[T+2];const E=b(m)/2/Math.PI+.5,S=y(m)/Math.PI+.5;o.push(E,1-S)}g(),d()}function d(){for(let m=0;m<o.length;m+=6){const T=o[m+0],E=o[m+2],S=o[m+4],D=Math.max(T,E,S),U=Math.min(T,E,S);D>.9&&U<.1&&(T<.2&&(o[m+0]+=1),E<.2&&(o[m+2]+=1),S<.2&&(o[m+4]+=1))}}function f(m){s.push(m.x,m.y,m.z)}function p(m,T){const E=m*3;T.x=e[E+0],T.y=e[E+1],T.z=e[E+2]}function g(){const m=new L,T=new L,E=new L,S=new L,D=new te,U=new te,N=new te;for(let Z=0,z=0;Z<s.length;Z+=9,z+=6){m.set(s[Z+0],s[Z+1],s[Z+2]),T.set(s[Z+3],s[Z+4],s[Z+5]),E.set(s[Z+6],s[Z+7],s[Z+8]),D.set(o[z+0],o[z+1]),U.set(o[z+2],o[z+3]),N.set(o[z+4],o[z+5]),S.copy(m).add(T).add(E).divideScalar(3);const A=b(S);_(D,z+0,m,A),_(U,z+2,T,A),_(N,z+4,E,A)}}function _(m,T,E,S){S<0&&m.x===1&&(o[T]=m.x-1),E.x===0&&E.z===0&&(o[T]=S/2/Math.PI+.5)}function b(m){return Math.atan2(m.z,-m.x)}function y(m){return Math.atan2(-m.y,Math.sqrt(m.x*m.x+m.z*m.z))}}static fromJSON(e){return new $t(e.vertices,e.indices,e.radius,e.details)}}class tr extends $t{constructor(e=1,t=0){const n=(1+Math.sqrt(5))/2,i=1/n,s=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-i,-n,0,-i,n,0,i,-n,0,i,n,-i,-n,0,-i,n,0,i,-n,0,i,n,0,-n,0,-i,n,0,-i,-n,0,i,n,0,i],o=[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9];super(s,o,e,t);this.type="DodecahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new tr(e.radius,e.detail)}}const oo=new L,ao=new L,Ka=new L,lo=new st;class ja extends Se{constructor(e=null,t=1){super();if(this.type="EdgesGeometry",this.parameters={geometry:e,thresholdAngle:t},e!==null){const i=Math.pow(10,4),s=Math.cos($n*t),o=e.getIndex(),a=e.getAttribute("position"),c=o?o.count:a.count,h=[0,0,0],u=["a","b","c"],d=new Array(3),f={},p=[];for(let g=0;g<c;g+=3){o?(h[0]=o.getX(g),h[1]=o.getX(g+1),h[2]=o.getX(g+2)):(h[0]=g,h[1]=g+1,h[2]=g+2);const{a:_,b,c:y}=lo;if(_.fromBufferAttribute(a,h[0]),b.fromBufferAttribute(a,h[1]),y.fromBufferAttribute(a,h[2]),lo.getNormal(Ka),d[0]=`${Math.round(_.x*i)},${Math.round(_.y*i)},${Math.round(_.z*i)}`,d[1]=`${Math.round(b.x*i)},${Math.round(b.y*i)},${Math.round(b.z*i)}`,d[2]=`${Math.round(y.x*i)},${Math.round(y.y*i)},${Math.round(y.z*i)}`,!(d[0]===d[1]||d[1]===d[2]||d[2]===d[0]))for(let m=0;m<3;m++){const T=(m+1)%3,E=d[m],S=d[T],D=lo[u[m]],U=lo[u[T]],N=`${E}_${S}`,Z=`${S}_${E}`;Z in f&&f[Z]?(Ka.dot(f[Z].normal)<=s&&(p.push(D.x,D.y,D.z),p.push(U.x,U.y,U.z)),f[Z]=null):N in f||(f[N]={index0:h[m],index1:h[T],normal:Ka.clone()})}}for(const g in f)if(f[g]){const{index0:_,index1:b}=f[g];oo.fromBufferAttribute(a,_),ao.fromBufferAttribute(a,b),p.push(oo.x,oo.y,oo.z),p.push(ao.x,ao.y,ao.z)}this.setAttribute("position",new ve(p,3))}}}class Ut{constructor(){this.type="Curve",this.arcLengthDivisions=200}getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}getPointAt(e,t){const n=this.getUtoTmapping(e);return this.getPoint(n,t)}getPoints(e=5){const t=[];for(let n=0;n<=e;n++)t.push(this.getPoint(n/e));return t}getSpacedPoints(e=5){const t=[];for(let n=0;n<=e;n++)t.push(this.getPointAt(n/e));return t}getLength(){const e=this.getLengths();return e[e.length-1]}getLengths(e=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===e+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const t=[];let n,i=this.getPoint(0),s=0;t.push(0);for(let o=1;o<=e;o++)n=this.getPoint(o/e),s+=n.distanceTo(i),t.push(s),i=n;return this.cacheArcLengths=t,t}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(e,t){const n=this.getLengths();let i=0;const s=n.length;let o;t?o=t:o=e*n[s-1];let a=0,c=s-1,h;for(;a<=c;)if(i=Math.floor(a+(c-a)/2),h=n[i]-o,h<0)a=i+1;else if(h>0)c=i-1;else{c=i;break}if(i=c,n[i]===o)return i/(s-1);const u=n[i],f=n[i+1]-u,p=(o-u)/f;return(i+p)/(s-1)}getTangent(e,t){const n=1e-4;let i=e-n,s=e+n;i<0&&(i=0),s>1&&(s=1);const o=this.getPoint(i),a=this.getPoint(s),c=t||(o.isVector2?new te:new L);return c.copy(a).sub(o).normalize(),c}getTangentAt(e,t){const n=this.getUtoTmapping(e);return this.getTangent(n,t)}computeFrenetFrames(e,t){const n=new L,i=[],s=[],o=[],a=new L,c=new Me;for(let p=0;p<=e;p++){const g=p/e;i[p]=this.getTangentAt(g,new L)}s[0]=new L,o[0]=new L;let h=Number.MAX_VALUE;const u=Math.abs(i[0].x),d=Math.abs(i[0].y),f=Math.abs(i[0].z);u<=h&&(h=u,n.set(1,0,0)),d<=h&&(h=d,n.set(0,1,0)),f<=h&&n.set(0,0,1),a.crossVectors(i[0],n).normalize(),s[0].crossVectors(i[0],a),o[0].crossVectors(i[0],s[0]);for(let p=1;p<=e;p++){if(s[p]=s[p-1].clone(),o[p]=o[p-1].clone(),a.crossVectors(i[p-1],i[p]),a.length()>Number.EPSILON){a.normalize();const g=Math.acos(_t(i[p-1].dot(i[p]),-1,1));s[p].applyMatrix4(c.makeRotationAxis(a,g))}o[p].crossVectors(i[p],s[p])}if(t===!0){let p=Math.acos(_t(s[0].dot(s[e]),-1,1));p/=e,i[0].dot(a.crossVectors(s[0],s[e]))>0&&(p=-p);for(let g=1;g<=e;g++)s[g].applyMatrix4(c.makeRotationAxis(i[g],p*g)),o[g].crossVectors(i[g],s[g])}return{tangents:i,normals:s,binormals:o}}clone(){return new this.constructor().copy(this)}copy(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}toJSON(){const e={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return e.arcLengthDivisions=this.arcLengthDivisions,e.type=this.type,e}fromJSON(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}}class Vr extends Ut{constructor(e=0,t=0,n=1,i=1,s=0,o=Math.PI*2,a=!1,c=0){super();this.type="EllipseCurve",this.aX=e,this.aY=t,this.xRadius=n,this.yRadius=i,this.aStartAngle=s,this.aEndAngle=o,this.aClockwise=a,this.aRotation=c}getPoint(e,t){const n=t||new te,i=Math.PI*2;let s=this.aEndAngle-this.aStartAngle;const o=Math.abs(s)<Number.EPSILON;for(;s<0;)s+=i;for(;s>i;)s-=i;s<Number.EPSILON&&(o?s=0:s=i),this.aClockwise===!0&&!o&&(s===i?s=-i:s=s-i);const a=this.aStartAngle+e*s;let c=this.aX+this.xRadius*Math.cos(a),h=this.aY+this.yRadius*Math.sin(a);if(this.aRotation!==0){const u=Math.cos(this.aRotation),d=Math.sin(this.aRotation),f=c-this.aX,p=h-this.aY;c=f*u-p*d+this.aX,h=f*d+p*u+this.aY}return n.set(c,h)}copy(e){return super.copy(e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this}toJSON(){const e=super.toJSON();return e.aX=this.aX,e.aY=this.aY,e.xRadius=this.xRadius,e.yRadius=this.yRadius,e.aStartAngle=this.aStartAngle,e.aEndAngle=this.aEndAngle,e.aClockwise=this.aClockwise,e.aRotation=this.aRotation,e}fromJSON(e){return super.fromJSON(e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this}}Vr.prototype.isEllipseCurve=!0;class Qa extends Vr{constructor(e,t,n,i,s,o){super(e,t,n,n,i,s,o);this.type="ArcCurve"}}Qa.prototype.isArcCurve=!0;function el(){let r=0,e=0,t=0,n=0;function i(s,o,a,c){r=s,e=a,t=-3*s+3*o-2*a-c,n=2*s-2*o+a+c}return{initCatmullRom:function(s,o,a,c,h){i(o,a,h*(a-s),h*(c-o))},initNonuniformCatmullRom:function(s,o,a,c,h,u,d){let f=(o-s)/h-(a-s)/(h+u)+(a-o)/u,p=(a-o)/u-(c-o)/(u+d)+(c-a)/d;f*=u,p*=u,i(o,a,f,p)},calc:function(s){const o=s*s,a=o*s;return r+e*s+t*o+n*a}}}const co=new L,tl=new el,nl=new el,il=new el;class rl extends Ut{constructor(e=[],t=!1,n="centripetal",i=.5){super();this.type="CatmullRomCurve3",this.points=e,this.closed=t,this.curveType=n,this.tension=i}getPoint(e,t=new L){const n=t,i=this.points,s=i.length,o=(s-(this.closed?0:1))*e;let a=Math.floor(o),c=o-a;this.closed?a+=a>0?0:(Math.floor(Math.abs(a)/s)+1)*s:c===0&&a===s-1&&(a=s-2,c=1);let h,u;this.closed||a>0?h=i[(a-1)%s]:(co.subVectors(i[0],i[1]).add(i[0]),h=co);const d=i[a%s],f=i[(a+1)%s];if(this.closed||a+2<s?u=i[(a+2)%s]:(co.subVectors(i[s-1],i[s-2]).add(i[s-1]),u=co),this.curveType==="centripetal"||this.curveType==="chordal"){const p=this.curveType==="chordal"?.5:.25;let g=Math.pow(h.distanceToSquared(d),p),_=Math.pow(d.distanceToSquared(f),p),b=Math.pow(f.distanceToSquared(u),p);_<1e-4&&(_=1),g<1e-4&&(g=_),b<1e-4&&(b=_),tl.initNonuniformCatmullRom(h.x,d.x,f.x,u.x,g,_,b),nl.initNonuniformCatmullRom(h.y,d.y,f.y,u.y,g,_,b),il.initNonuniformCatmullRom(h.z,d.z,f.z,u.z,g,_,b)}else this.curveType==="catmullrom"&&(tl.initCatmullRom(h.x,d.x,f.x,u.x,this.tension),nl.initCatmullRom(h.y,d.y,f.y,u.y,this.tension),il.initCatmullRom(h.z,d.z,f.z,u.z,this.tension));return n.set(tl.calc(c),nl.calc(c),il.calc(c)),n}copy(e){super.copy(e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const i=e.points[t];this.points.push(i.clone())}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this}toJSON(){const e=super.toJSON();e.points=[];for(let t=0,n=this.points.length;t<n;t++){const i=this.points[t];e.points.push(i.toArray())}return e.closed=this.closed,e.curveType=this.curveType,e.tension=this.tension,e}fromJSON(e){super.fromJSON(e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const i=e.points[t];this.points.push(new L().fromArray(i))}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this}}rl.prototype.isCatmullRomCurve3=!0;function gu(r,e,t,n,i){const s=(n-e)*.5,o=(i-t)*.5,a=r*r,c=r*a;return(2*t-2*n+s+o)*c+(-3*t+3*n-2*s-o)*a+s*r+t}function xx(r,e){const t=1-r;return t*t*e}function _x(r,e){return 2*(1-r)*r*e}function vx(r,e){return r*r*e}function kr(r,e,t,n){return xx(r,e)+_x(r,t)+vx(r,n)}function Mx(r,e){const t=1-r;return t*t*t*e}function wx(r,e){const t=1-r;return 3*t*t*r*e}function bx(r,e){return 3*(1-r)*r*r*e}function Ex(r,e){return r*r*r*e}function Wr(r,e,t,n,i){return Mx(r,e)+wx(r,t)+bx(r,n)+Ex(r,i)}class ho extends Ut{constructor(e=new te,t=new te,n=new te,i=new te){super();this.type="CubicBezierCurve",this.v0=e,this.v1=t,this.v2=n,this.v3=i}getPoint(e,t=new te){const n=t,i=this.v0,s=this.v1,o=this.v2,a=this.v3;return n.set(Wr(e,i.x,s.x,o.x,a.x),Wr(e,i.y,s.y,o.y,a.y)),n}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this}}ho.prototype.isCubicBezierCurve=!0;class sl extends Ut{constructor(e=new L,t=new L,n=new L,i=new L){super();this.type="CubicBezierCurve3",this.v0=e,this.v1=t,this.v2=n,this.v3=i}getPoint(e,t=new L){const n=t,i=this.v0,s=this.v1,o=this.v2,a=this.v3;return n.set(Wr(e,i.x,s.x,o.x,a.x),Wr(e,i.y,s.y,o.y,a.y),Wr(e,i.z,s.z,o.z,a.z)),n}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this}}sl.prototype.isCubicBezierCurve3=!0;class Xr extends Ut{constructor(e=new te,t=new te){super();this.type="LineCurve",this.v1=e,this.v2=t}getPoint(e,t=new te){const n=t;return e===1?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(e).add(this.v1)),n}getPointAt(e,t){return this.getPoint(e,t)}getTangent(e,t){const n=t||new te;return n.copy(this.v2).sub(this.v1).normalize(),n}copy(e){return super.copy(e),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}Xr.prototype.isLineCurve=!0;class yu extends Ut{constructor(e=new L,t=new L){super();this.type="LineCurve3",this.isLineCurve3=!0,this.v1=e,this.v2=t}getPoint(e,t=new L){const n=t;return e===1?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(e).add(this.v1)),n}getPointAt(e,t){return this.getPoint(e,t)}copy(e){return super.copy(e),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class uo extends Ut{constructor(e=new te,t=new te,n=new te){super();this.type="QuadraticBezierCurve",this.v0=e,this.v1=t,this.v2=n}getPoint(e,t=new te){const n=t,i=this.v0,s=this.v1,o=this.v2;return n.set(kr(e,i.x,s.x,o.x),kr(e,i.y,s.y,o.y)),n}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}uo.prototype.isQuadraticBezierCurve=!0;class fo extends Ut{constructor(e=new L,t=new L,n=new L){super();this.type="QuadraticBezierCurve3",this.v0=e,this.v1=t,this.v2=n}getPoint(e,t=new L){const n=t,i=this.v0,s=this.v1,o=this.v2;return n.set(kr(e,i.x,s.x,o.x),kr(e,i.y,s.y,o.y),kr(e,i.z,s.z,o.z)),n}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}fo.prototype.isQuadraticBezierCurve3=!0;class po extends Ut{constructor(e=[]){super();this.type="SplineCurve",this.points=e}getPoint(e,t=new te){const n=t,i=this.points,s=(i.length-1)*e,o=Math.floor(s),a=s-o,c=i[o===0?o:o-1],h=i[o],u=i[o>i.length-2?i.length-1:o+1],d=i[o>i.length-3?i.length-1:o+2];return n.set(gu(a,c.x,h.x,u.x,d.x),gu(a,c.y,h.y,u.y,d.y)),n}copy(e){super.copy(e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const i=e.points[t];this.points.push(i.clone())}return this}toJSON(){const e=super.toJSON();e.points=[];for(let t=0,n=this.points.length;t<n;t++){const i=this.points[t];e.points.push(i.toArray())}return e}fromJSON(e){super.fromJSON(e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const i=e.points[t];this.points.push(new te().fromArray(i))}return this}}po.prototype.isSplineCurve=!0;var ol=Object.freeze({__proto__:null,ArcCurve:Qa,CatmullRomCurve3:rl,CubicBezierCurve:ho,CubicBezierCurve3:sl,EllipseCurve:Vr,LineCurve:Xr,LineCurve3:yu,QuadraticBezierCurve:uo,QuadraticBezierCurve3:fo,SplineCurve:po});class xu extends Ut{constructor(){super();this.type="CurvePath",this.curves=[],this.autoClose=!1}add(e){this.curves.push(e)}closePath(){const e=this.curves[0].getPoint(0),t=this.curves[this.curves.length-1].getPoint(1);e.equals(t)||this.curves.push(new Xr(t,e))}getPoint(e,t){const n=e*this.getLength(),i=this.getCurveLengths();let s=0;for(;s<i.length;){if(i[s]>=n){const o=i[s]-n,a=this.curves[s],c=a.getLength(),h=c===0?0:1-o/c;return a.getPointAt(h,t)}s++}return null}getLength(){const e=this.getCurveLengths();return e[e.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const e=[];let t=0;for(let n=0,i=this.curves.length;n<i;n++)t+=this.curves[n].getLength(),e.push(t);return this.cacheLengths=e,e}getSpacedPoints(e=40){const t=[];for(let n=0;n<=e;n++)t.push(this.getPoint(n/e));return this.autoClose&&t.push(t[0]),t}getPoints(e=12){const t=[];let n;for(let i=0,s=this.curves;i<s.length;i++){const o=s[i],a=o.isEllipseCurve?e*2:o.isLineCurve||o.isLineCurve3?1:o.isSplineCurve?e*o.points.length:e,c=o.getPoints(a);for(let h=0;h<c.length;h++){const u=c[h];n&&n.equals(u)||(t.push(u),n=u)}}return this.autoClose&&t.length>1&&!t[t.length-1].equals(t[0])&&t.push(t[0]),t}copy(e){super.copy(e),this.curves=[];for(let t=0,n=e.curves.length;t<n;t++){const i=e.curves[t];this.curves.push(i.clone())}return this.autoClose=e.autoClose,this}toJSON(){const e=super.toJSON();e.autoClose=this.autoClose,e.curves=[];for(let t=0,n=this.curves.length;t<n;t++){const i=this.curves[t];e.curves.push(i.toJSON())}return e}fromJSON(e){super.fromJSON(e),this.autoClose=e.autoClose,this.curves=[];for(let t=0,n=e.curves.length;t<n;t++){const i=e.curves[t];this.curves.push(new ol[i.type]().fromJSON(i))}return this}}class qr extends xu{constructor(e){super();this.type="Path",this.currentPoint=new te,e&&this.setFromPoints(e)}setFromPoints(e){this.moveTo(e[0].x,e[0].y);for(let t=1,n=e.length;t<n;t++)this.lineTo(e[t].x,e[t].y);return this}moveTo(e,t){return this.currentPoint.set(e,t),this}lineTo(e,t){const n=new Xr(this.currentPoint.clone(),new te(e,t));return this.curves.push(n),this.currentPoint.set(e,t),this}quadraticCurveTo(e,t,n,i){const s=new uo(this.currentPoint.clone(),new te(e,t),new te(n,i));return this.curves.push(s),this.currentPoint.set(n,i),this}bezierCurveTo(e,t,n,i,s,o){const a=new ho(this.currentPoint.clone(),new te(e,t),new te(n,i),new te(s,o));return this.curves.push(a),this.currentPoint.set(s,o),this}splineThru(e){const t=[this.currentPoint.clone()].concat(e),n=new po(t);return this.curves.push(n),this.currentPoint.copy(e[e.length-1]),this}arc(e,t,n,i,s,o){const a=this.currentPoint.x,c=this.currentPoint.y;return this.absarc(e+a,t+c,n,i,s,o),this}absarc(e,t,n,i,s,o){return this.absellipse(e,t,n,n,i,s,o),this}ellipse(e,t,n,i,s,o,a,c){const h=this.currentPoint.x,u=this.currentPoint.y;return this.absellipse(e+h,t+u,n,i,s,o,a,c),this}absellipse(e,t,n,i,s,o,a,c){const h=new Vr(e,t,n,i,s,o,a,c);if(this.curves.length>0){const d=h.getPoint(0);d.equals(this.currentPoint)||this.lineTo(d.x,d.y)}this.curves.push(h);const u=h.getPoint(1);return this.currentPoint.copy(u),this}copy(e){return super.copy(e),this.currentPoint.copy(e.currentPoint),this}toJSON(){const e=super.toJSON();return e.currentPoint=this.currentPoint.toArray(),e}fromJSON(e){return super.fromJSON(e),this.currentPoint.fromArray(e.currentPoint),this}}class Kt extends qr{constructor(e){super(e);this.uuid=Pt(),this.type="Shape",this.holes=[]}getPointsHoles(e){const t=[];for(let n=0,i=this.holes.length;n<i;n++)t[n]=this.holes[n].getPoints(e);return t}extractPoints(e){return{shape:this.getPoints(e),holes:this.getPointsHoles(e)}}copy(e){super.copy(e),this.holes=[];for(let t=0,n=e.holes.length;t<n;t++){const i=e.holes[t];this.holes.push(i.clone())}return this}toJSON(){const e=super.toJSON();e.uuid=this.uuid,e.holes=[];for(let t=0,n=this.holes.length;t<n;t++){const i=this.holes[t];e.holes.push(i.toJSON())}return e}fromJSON(e){super.fromJSON(e),this.uuid=e.uuid,this.holes=[];for(let t=0,n=e.holes.length;t<n;t++){const i=e.holes[t];this.holes.push(new qr().fromJSON(i))}return this}}const Sx={triangulate:function(r,e,t=2){const n=e&&e.length,i=n?e[0]*t:r.length;let s=_u(r,0,i,t,!0);const o=[];if(!s||s.next===s.prev)return o;let a,c,h,u,d,f,p;if(n&&(s=Lx(r,e,s,t)),r.length>80*t){a=h=r[0],c=u=r[1];for(let g=t;g<i;g+=t)d=r[g],f=r[g+1],d<a&&(a=d),f<c&&(c=f),d>h&&(h=d),f>u&&(u=f);p=Math.max(h-a,u-c),p=p!==0?1/p:0}return Yr(s,o,t,a,c,p),o}};function _u(r,e,t,n,i){let s,o;if(i===Gx(r,e,t,n)>0)for(s=e;s<t;s+=n)o=wu(s,r[s],r[s+1],o);else for(s=t-n;s>=e;s-=n)o=wu(s,r[s],r[s+1],o);return o&&mo(o,o.next)&&(Jr(o),o=o.next),o}function Bn(r,e){if(!r)return r;e||(e=r);let t=r,n;do if(n=!1,!t.steiner&&(mo(t,t.next)||tt(t.prev,t,t.next)===0)){if(Jr(t),t=e=t.prev,t===t.next)break;n=!0}else t=t.next;while(n||t!==e);return e}function Yr(r,e,t,n,i,s,o){if(!r)return;!o&&s&&Ux(r,n,i,s);let a=r,c,h;for(;r.prev!==r.next;){if(c=r.prev,h=r.next,s?Ax(r,n,i,s):Tx(r)){e.push(c.i/t),e.push(r.i/t),e.push(h.i/t),Jr(r),r=h.next,a=h.next;continue}if(r=h,r===a){o?o===1?(r=Rx(Bn(r),e,t),Yr(r,e,t,n,i,s,2)):o===2&&Cx(r,e,t,n,i,s):Yr(Bn(r),e,t,n,i,s,1);break}}}function Tx(r){const e=r.prev,t=r,n=r.next;if(tt(e,t,n)>=0)return!1;let i=r.next.next;for(;i!==r.prev;){if(nr(e.x,e.y,t.x,t.y,n.x,n.y,i.x,i.y)&&tt(i.prev,i,i.next)>=0)return!1;i=i.next}return!0}function Ax(r,e,t,n){const i=r.prev,s=r,o=r.next;if(tt(i,s,o)>=0)return!1;const a=i.x<s.x?i.x<o.x?i.x:o.x:s.x<o.x?s.x:o.x,c=i.y<s.y?i.y<o.y?i.y:o.y:s.y<o.y?s.y:o.y,h=i.x>s.x?i.x>o.x?i.x:o.x:s.x>o.x?s.x:o.x,u=i.y>s.y?i.y>o.y?i.y:o.y:s.y>o.y?s.y:o.y,d=al(a,c,e,t,n),f=al(h,u,e,t,n);let p=r.prevZ,g=r.nextZ;for(;p&&p.z>=d&&g&&g.z<=f;){if(p!==r.prev&&p!==r.next&&nr(i.x,i.y,s.x,s.y,o.x,o.y,p.x,p.y)&&tt(p.prev,p,p.next)>=0||(p=p.prevZ,g!==r.prev&&g!==r.next&&nr(i.x,i.y,s.x,s.y,o.x,o.y,g.x,g.y)&&tt(g.prev,g,g.next)>=0))return!1;g=g.nextZ}for(;p&&p.z>=d;){if(p!==r.prev&&p!==r.next&&nr(i.x,i.y,s.x,s.y,o.x,o.y,p.x,p.y)&&tt(p.prev,p,p.next)>=0)return!1;p=p.prevZ}for(;g&&g.z<=f;){if(g!==r.prev&&g!==r.next&&nr(i.x,i.y,s.x,s.y,o.x,o.y,g.x,g.y)&&tt(g.prev,g,g.next)>=0)return!1;g=g.nextZ}return!0}function Rx(r,e,t){let n=r;do{const i=n.prev,s=n.next.next;!mo(i,s)&&vu(i,n,n.next,s)&&Zr(i,s)&&Zr(s,i)&&(e.push(i.i/t),e.push(n.i/t),e.push(s.i/t),Jr(n),Jr(n.next),n=r=s),n=n.next}while(n!==r);return Bn(n)}function Cx(r,e,t,n,i,s){let o=r;do{let a=o.next.next;for(;a!==o.prev;){if(o.i!==a.i&&Ox(o,a)){let c=Mu(o,a);o=Bn(o,o.next),c=Bn(c,c.next),Yr(o,e,t,n,i,s),Yr(c,e,t,n,i,s);return}a=a.next}o=o.next}while(o!==r)}function Lx(r,e,t,n){const i=[];let s,o,a,c,h;for(s=0,o=e.length;s<o;s++)a=e[s]*n,c=s<o-1?e[s+1]*n:r.length,h=_u(r,a,c,n,!1),h===h.next&&(h.steiner=!0),i.push(Nx(h));for(i.sort(Px),s=0;s<i.length;s++)Ix(i[s],t),t=Bn(t,t.next);return t}function Px(r,e){return r.x-e.x}function Ix(r,e){if(e=Dx(r,e),e){const t=Mu(e,r);Bn(e,e.next),Bn(t,t.next)}}function Dx(r,e){let t=e;const n=r.x,i=r.y;let s=-1/0,o;do{if(i<=t.y&&i>=t.next.y&&t.next.y!==t.y){const f=t.x+(i-t.y)*(t.next.x-t.x)/(t.next.y-t.y);if(f<=n&&f>s){if(s=f,f===n){if(i===t.y)return t;if(i===t.next.y)return t.next}o=t.x<t.next.x?t:t.next}}t=t.next}while(t!==e);if(!o)return null;if(n===s)return o;const a=o,c=o.x,h=o.y;let u=1/0,d;t=o;do n>=t.x&&t.x>=c&&n!==t.x&&nr(i<h?n:s,i,c,h,i<h?s:n,i,t.x,t.y)&&(d=Math.abs(i-t.y)/(n-t.x),Zr(t,r)&&(d<u||d===u&&(t.x>o.x||t.x===o.x&&Fx(o,t)))&&(o=t,u=d)),t=t.next;while(t!==a);return o}function Fx(r,e){return tt(r.prev,r,e.prev)<0&&tt(e.next,r,r.next)<0}function Ux(r,e,t,n){let i=r;do i.z===null&&(i.z=al(i.x,i.y,e,t,n)),i.prevZ=i.prev,i.nextZ=i.next,i=i.next;while(i!==r);i.prevZ.nextZ=null,i.prevZ=null,Bx(i)}function Bx(r){let e,t,n,i,s,o,a,c,h=1;do{for(t=r,r=null,s=null,o=0;t;){for(o++,n=t,a=0,e=0;e<h&&(a++,n=n.nextZ,!!n);e++);for(c=h;a>0||c>0&&n;)a!==0&&(c===0||!n||t.z<=n.z)?(i=t,t=t.nextZ,a--):(i=n,n=n.nextZ,c--),s?s.nextZ=i:r=i,i.prevZ=s,s=i;t=n}s.nextZ=null,h*=2}while(o>1);return r}function al(r,e,t,n,i){return r=32767*(r-t)*i,e=32767*(e-n)*i,r=(r|r<<8)&16711935,r=(r|r<<4)&252645135,r=(r|r<<2)&858993459,r=(r|r<<1)&1431655765,e=(e|e<<8)&16711935,e=(e|e<<4)&252645135,e=(e|e<<2)&858993459,e=(e|e<<1)&1431655765,r|e<<1}function Nx(r){let e=r,t=r;do(e.x<t.x||e.x===t.x&&e.y<t.y)&&(t=e),e=e.next;while(e!==r);return t}function nr(r,e,t,n,i,s,o,a){return(i-o)*(e-a)-(r-o)*(s-a)>=0&&(r-o)*(n-a)-(t-o)*(e-a)>=0&&(t-o)*(s-a)-(i-o)*(n-a)>=0}function Ox(r,e){return r.next.i!==e.i&&r.prev.i!==e.i&&!zx(r,e)&&(Zr(r,e)&&Zr(e,r)&&Hx(r,e)&&(tt(r.prev,r,e.prev)||tt(r,e.prev,e))||mo(r,e)&&tt(r.prev,r,r.next)>0&&tt(e.prev,e,e.next)>0)}function tt(r,e,t){return(e.y-r.y)*(t.x-e.x)-(e.x-r.x)*(t.y-e.y)}function mo(r,e){return r.x===e.x&&r.y===e.y}function vu(r,e,t,n){const i=yo(tt(r,e,t)),s=yo(tt(r,e,n)),o=yo(tt(t,n,r)),a=yo(tt(t,n,e));return!!(i!==s&&o!==a||i===0&&go(r,t,e)||s===0&&go(r,n,e)||o===0&&go(t,r,n)||a===0&&go(t,e,n))}function go(r,e,t){return e.x<=Math.max(r.x,t.x)&&e.x>=Math.min(r.x,t.x)&&e.y<=Math.max(r.y,t.y)&&e.y>=Math.min(r.y,t.y)}function yo(r){return r>0?1:r<0?-1:0}function zx(r,e){let t=r;do{if(t.i!==r.i&&t.next.i!==r.i&&t.i!==e.i&&t.next.i!==e.i&&vu(t,t.next,r,e))return!0;t=t.next}while(t!==r);return!1}function Zr(r,e){return tt(r.prev,r,r.next)<0?tt(r,e,r.next)>=0&&tt(r,r.prev,e)>=0:tt(r,e,r.prev)<0||tt(r,r.next,e)<0}function Hx(r,e){let t=r,n=!1;const i=(r.x+e.x)/2,s=(r.y+e.y)/2;do t.y>s!=t.next.y>s&&t.next.y!==t.y&&i<(t.next.x-t.x)*(s-t.y)/(t.next.y-t.y)+t.x&&(n=!n),t=t.next;while(t!==r);return n}function Mu(r,e){const t=new ll(r.i,r.x,r.y),n=new ll(e.i,e.x,e.y),i=r.next,s=e.prev;return r.next=e,e.prev=r,t.next=i,i.prev=t,n.next=t,t.prev=n,s.next=n,n.prev=s,n}function wu(r,e,t,n){const i=new ll(r,e,t);return n?(i.next=n.next,i.prev=n,n.next.prev=i,n.next=i):(i.prev=i,i.next=i),i}function Jr(r){r.next.prev=r.prev,r.prev.next=r.next,r.prevZ&&(r.prevZ.nextZ=r.nextZ),r.nextZ&&(r.nextZ.prevZ=r.prevZ)}function ll(r,e,t){this.i=r,this.x=e,this.y=t,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}function Gx(r,e,t,n){let i=0;for(let s=e,o=t-n;s<t;s+=n)i+=(r[o]-r[s])*(r[s+1]+r[o+1]),o=s;return i}class jt{static area(e){const t=e.length;let n=0;for(let i=t-1,s=0;s<t;i=s++)n+=e[i].x*e[s].y-e[s].x*e[i].y;return n*.5}static isClockWise(e){return jt.area(e)<0}static triangulateShape(e,t){const n=[],i=[],s=[];bu(e),Eu(n,e);let o=e.length;t.forEach(bu);for(let c=0;c<t.length;c++)i.push(o),o+=t[c].length,Eu(n,t[c]);const a=Sx.triangulate(n,i);for(let c=0;c<a.length;c+=3)s.push(a.slice(c,c+3));return s}}function bu(r){const e=r.length;e>2&&r[e-1].equals(r[0])&&r.pop()}function Eu(r,e){for(let t=0;t<e.length;t++)r.push(e[t].x),r.push(e[t].y)}class Qt extends Se{constructor(e=new Kt([new te(.5,.5),new te(-.5,.5),new te(-.5,-.5),new te(.5,-.5)]),t={}){super();this.type="ExtrudeGeometry",this.parameters={shapes:e,options:t},e=Array.isArray(e)?e:[e];const n=this,i=[],s=[];for(let a=0,c=e.length;a<c;a++){const h=e[a];o(h)}this.setAttribute("position",new ve(i,3)),this.setAttribute("uv",new ve(s,2)),this.computeVertexNormals();function o(a){const c=[],h=t.curveSegments!==void 0?t.curveSegments:12,u=t.steps!==void 0?t.steps:1;let d=t.depth!==void 0?t.depth:1,f=t.bevelEnabled!==void 0?t.bevelEnabled:!0,p=t.bevelThickness!==void 0?t.bevelThickness:.2,g=t.bevelSize!==void 0?t.bevelSize:p-.1,_=t.bevelOffset!==void 0?t.bevelOffset:0,b=t.bevelSegments!==void 0?t.bevelSegments:3;const y=t.extrudePath,m=t.UVGenerator!==void 0?t.UVGenerator:Vx;t.amount!==void 0&&(console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."),d=t.amount);let T,E=!1,S,D,U,N;y&&(T=y.getSpacedPoints(u),E=!0,f=!1,S=y.computeFrenetFrames(u,!1),D=new L,U=new L,N=new L),f||(b=0,p=0,g=0,_=0);const Z=a.extractPoints(h);let z=Z.shape;const A=Z.holes;if(!jt.isClockWise(z)){z=z.reverse();for(let $=0,oe=A.length;$<oe;$++){const ce=A[$];jt.isClockWise(ce)&&(A[$]=ce.reverse())}}const G=jt.triangulateShape(z,A),W=z;for(let $=0,oe=A.length;$<oe;$++){const ce=A[$];z=z.concat(ce)}function q($,oe,ce){return oe||console.error("THREE.ExtrudeGeometry: vec does not exist"),oe.clone().multiplyScalar(ce).add($)}const X=z.length,J=G.length;function k($,oe,ce){let _e,me,Te;const we=$.x-oe.x,Pe=$.y-oe.y,Je=ce.x-$.x,I=ce.y-$.y,C=we*we+Pe*Pe,j=we*I-Pe*Je;if(Math.abs(j)>Number.EPSILON){const ie=Math.sqrt(C),l=Math.sqrt(Je*Je+I*I),x=oe.x-Pe/ie,w=oe.y+we/ie,R=ce.x-I/l,O=ce.y+Je/l,ne=((R-x)*I-(O-w)*Je)/(we*I-Pe*Je);_e=x+we*ne-$.x,me=w+Pe*ne-$.y;const le=_e*_e+me*me;if(le<=2)return new te(_e,me);Te=Math.sqrt(le/2)}else{let ie=!1;we>Number.EPSILON?Je>Number.EPSILON&&(ie=!0):we<-Number.EPSILON?Je<-Number.EPSILON&&(ie=!0):Math.sign(Pe)===Math.sign(I)&&(ie=!0),ie?(_e=-Pe,me=we,Te=Math.sqrt(C)):(_e=we,me=Pe,Te=Math.sqrt(C/2))}return new te(_e/Te,me/Te)}const Q=[];for(let $=0,oe=W.length,ce=oe-1,_e=$+1;$<oe;$++,ce++,_e++)ce===oe&&(ce=0),_e===oe&&(_e=0),Q[$]=k(W[$],W[ce],W[_e]);const re=[];let se,ae=Q.concat();for(let $=0,oe=A.length;$<oe;$++){const ce=A[$];se=[];for(let _e=0,me=ce.length,Te=me-1,we=_e+1;_e<me;_e++,Te++,we++)Te===me&&(Te=0),we===me&&(we=0),se[_e]=k(ce[_e],ce[Te],ce[we]);re.push(se),ae=ae.concat(se)}for(let $=0;$<b;$++){const oe=$/b,ce=p*Math.cos(oe*Math.PI/2),_e=g*Math.sin(oe*Math.PI/2)+_;for(let me=0,Te=W.length;me<Te;me++){const we=q(W[me],Q[me],_e);Oe(we.x,we.y,-ce)}for(let me=0,Te=A.length;me<Te;me++){const we=A[me];se=re[me];for(let Pe=0,Je=we.length;Pe<Je;Pe++){const I=q(we[Pe],se[Pe],_e);Oe(I.x,I.y,-ce)}}}const Ee=g+_;for(let $=0;$<X;$++){const oe=f?q(z[$],ae[$],Ee):z[$];E?(U.copy(S.normals[0]).multiplyScalar(oe.x),D.copy(S.binormals[0]).multiplyScalar(oe.y),N.copy(T[0]).add(U).add(D),Oe(N.x,N.y,N.z)):Oe(oe.x,oe.y,0)}for(let $=1;$<=u;$++)for(let oe=0;oe<X;oe++){const ce=f?q(z[oe],ae[oe],Ee):z[oe];E?(U.copy(S.normals[$]).multiplyScalar(ce.x),D.copy(S.binormals[$]).multiplyScalar(ce.y),N.copy(T[$]).add(U).add(D),Oe(N.x,N.y,N.z)):Oe(ce.x,ce.y,d/u*$)}for(let $=b-1;$>=0;$--){const oe=$/b,ce=p*Math.cos(oe*Math.PI/2),_e=g*Math.sin(oe*Math.PI/2)+_;for(let me=0,Te=W.length;me<Te;me++){const we=q(W[me],Q[me],_e);Oe(we.x,we.y,d+ce)}for(let me=0,Te=A.length;me<Te;me++){const we=A[me];se=re[me];for(let Pe=0,Je=we.length;Pe<Je;Pe++){const I=q(we[Pe],se[Pe],_e);E?Oe(I.x,I.y+T[u-1].y,T[u-1].x+ce):Oe(I.x,I.y,d+ce)}}}ze(),be();function ze(){const $=i.length/3;if(f){let oe=0,ce=X*oe;for(let _e=0;_e<J;_e++){const me=G[_e];Re(me[2]+ce,me[1]+ce,me[0]+ce)}oe=u+b*2,ce=X*oe;for(let _e=0;_e<J;_e++){const me=G[_e];Re(me[0]+ce,me[1]+ce,me[2]+ce)}}else{for(let oe=0;oe<J;oe++){const ce=G[oe];Re(ce[2],ce[1],ce[0])}for(let oe=0;oe<J;oe++){const ce=G[oe];Re(ce[0]+X*u,ce[1]+X*u,ce[2]+X*u)}}n.addGroup($,i.length/3-$,0)}function be(){const $=i.length/3;let oe=0;H(W,oe),oe+=W.length;for(let ce=0,_e=A.length;ce<_e;ce++){const me=A[ce];H(me,oe),oe+=me.length}n.addGroup($,i.length/3-$,1)}function H($,oe){let ce=$.length;for(;--ce>=0;){const _e=ce;let me=ce-1;me<0&&(me=$.length-1);for(let Te=0,we=u+b*2;Te<we;Te++){const Pe=X*Te,Je=X*(Te+1),I=oe+_e+Pe,C=oe+me+Pe,j=oe+me+Je,ie=oe+_e+Je;M(I,C,j,ie)}}}function Oe($,oe,ce){c.push($),c.push(oe),c.push(ce)}function Re($,oe,ce){ye($),ye(oe),ye(ce);const _e=i.length/3,me=m.generateTopUV(n,i,_e-3,_e-2,_e-1);De(me[0]),De(me[1]),De(me[2])}function M($,oe,ce,_e){ye($),ye(oe),ye(_e),ye(oe),ye(ce),ye(_e);const me=i.length/3,Te=m.generateSideWallUV(n,i,me-6,me-3,me-2,me-1);De(Te[0]),De(Te[1]),De(Te[3]),De(Te[1]),De(Te[2]),De(Te[3])}function ye($){i.push(c[$*3+0]),i.push(c[$*3+1]),i.push(c[$*3+2])}function De($){s.push($.x),s.push($.y)}}}toJSON(){const e=super.toJSON(),t=this.parameters.shapes,n=this.parameters.options;return kx(t,n,e)}static fromJSON(e,t){const n=[];for(let s=0,o=e.shapes.length;s<o;s++){const a=t[e.shapes[s]];n.push(a)}const i=e.options.extrudePath;return i!==void 0&&(e.options.extrudePath=new ol[i.type]().fromJSON(i)),new Qt(n,e.options)}}const Vx={generateTopUV:function(r,e,t,n,i){const s=e[t*3],o=e[t*3+1],a=e[n*3],c=e[n*3+1],h=e[i*3],u=e[i*3+1];return[new te(s,o),new te(a,c),new te(h,u)]},generateSideWallUV:function(r,e,t,n,i,s){const o=e[t*3],a=e[t*3+1],c=e[t*3+2],h=e[n*3],u=e[n*3+1],d=e[n*3+2],f=e[i*3],p=e[i*3+1],g=e[i*3+2],_=e[s*3],b=e[s*3+1],y=e[s*3+2];return Math.abs(a-u)<Math.abs(o-h)?[new te(o,1-c),new te(h,1-d),new te(f,1-g),new te(_,1-y)]:[new te(a,1-c),new te(u,1-d),new te(p,1-g),new te(b,1-y)]}};function kx(r,e,t){if(t.shapes=[],Array.isArray(r))for(let n=0,i=r.length;n<i;n++){const s=r[n];t.shapes.push(s.uuid)}else t.shapes.push(r.uuid);return e.extrudePath!==void 0&&(t.options.extrudePath=e.extrudePath.toJSON()),t}class ir extends $t{constructor(e=1,t=0){const n=(1+Math.sqrt(5))/2,i=[-1,n,0,1,n,0,-1,-n,0,1,-n,0,0,-1,n,0,1,n,0,-1,-n,0,1,-n,n,0,-1,n,0,1,-n,0,-1,-n,0,1],s=[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1];super(i,s,e,t);this.type="IcosahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new ir(e.radius,e.detail)}}class rr extends Se{constructor(e=[new te(0,.5),new te(.5,0),new te(0,-.5)],t=12,n=0,i=Math.PI*2){super();this.type="LatheGeometry",this.parameters={points:e,segments:t,phiStart:n,phiLength:i},t=Math.floor(t),i=_t(i,0,Math.PI*2);const s=[],o=[],a=[],c=[],h=[],u=1/t,d=new L,f=new te,p=new L,g=new L,_=new L;let b=0,y=0;for(let m=0;m<=e.length-1;m++)switch(m){case 0:b=e[m+1].x-e[m].x,y=e[m+1].y-e[m].y,p.x=y*1,p.y=-b,p.z=y*0,_.copy(p),p.normalize(),c.push(p.x,p.y,p.z);break;case e.length-1:c.push(_.x,_.y,_.z);break;default:b=e[m+1].x-e[m].x,y=e[m+1].y-e[m].y,p.x=y*1,p.y=-b,p.z=y*0,g.copy(p),p.x+=_.x,p.y+=_.y,p.z+=_.z,p.normalize(),c.push(p.x,p.y,p.z),_.copy(g)}for(let m=0;m<=t;m++){const T=n+m*u*i,E=Math.sin(T),S=Math.cos(T);for(let D=0;D<=e.length-1;D++){d.x=e[D].x*E,d.y=e[D].y,d.z=e[D].x*S,o.push(d.x,d.y,d.z),f.x=m/t,f.y=D/(e.length-1),a.push(f.x,f.y);const U=c[3*D+0]*E,N=c[3*D+1],Z=c[3*D+0]*S;h.push(U,N,Z)}}for(let m=0;m<t;m++)for(let T=0;T<e.length-1;T++){const E=T+m*e.length,S=E,D=E+e.length,U=E+e.length+1,N=E+1;s.push(S,D,N),s.push(U,N,D)}this.setIndex(s),this.setAttribute("position",new ve(o,3)),this.setAttribute("uv",new ve(a,2)),this.setAttribute("normal",new ve(h,3))}static fromJSON(e){return new rr(e.points,e.segments,e.phiStart,e.phiLength)}}class li extends $t{constructor(e=1,t=0){const n=[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],i=[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2];super(n,i,e,t);this.type="OctahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new li(e.radius,e.detail)}}class sr extends Se{constructor(e=.5,t=1,n=8,i=1,s=0,o=Math.PI*2){super();this.type="RingGeometry",this.parameters={innerRadius:e,outerRadius:t,thetaSegments:n,phiSegments:i,thetaStart:s,thetaLength:o},n=Math.max(3,n),i=Math.max(1,i);const a=[],c=[],h=[],u=[];let d=e;const f=(t-e)/i,p=new L,g=new te;for(let _=0;_<=i;_++){for(let b=0;b<=n;b++){const y=s+b/n*o;p.x=d*Math.cos(y),p.y=d*Math.sin(y),c.push(p.x,p.y,p.z),h.push(0,0,1),g.x=(p.x/t+1)/2,g.y=(p.y/t+1)/2,u.push(g.x,g.y)}d+=f}for(let _=0;_<i;_++){const b=_*(n+1);for(let y=0;y<n;y++){const m=y+b,T=m,E=m+n+1,S=m+n+2,D=m+1;a.push(T,E,D),a.push(E,S,D)}}this.setIndex(a),this.setAttribute("position",new ve(c,3)),this.setAttribute("normal",new ve(h,3)),this.setAttribute("uv",new ve(u,2))}static fromJSON(e){return new sr(e.innerRadius,e.outerRadius,e.thetaSegments,e.phiSegments,e.thetaStart,e.thetaLength)}}class ci extends Se{constructor(e=new Kt([new te(0,.5),new te(-.5,-.5),new te(.5,-.5)]),t=12){super();this.type="ShapeGeometry",this.parameters={shapes:e,curveSegments:t};const n=[],i=[],s=[],o=[];let a=0,c=0;if(Array.isArray(e)===!1)h(e);else for(let u=0;u<e.length;u++)h(e[u]),this.addGroup(a,c,u),a+=c,c=0;this.setIndex(n),this.setAttribute("position",new ve(i,3)),this.setAttribute("normal",new ve(s,3)),this.setAttribute("uv",new ve(o,2));function h(u){const d=i.length/3,f=u.extractPoints(t);let p=f.shape;const g=f.holes;jt.isClockWise(p)===!1&&(p=p.reverse());for(let b=0,y=g.length;b<y;b++){const m=g[b];jt.isClockWise(m)===!0&&(g[b]=m.reverse())}const _=jt.triangulateShape(p,g);for(let b=0,y=g.length;b<y;b++){const m=g[b];p=p.concat(m)}for(let b=0,y=p.length;b<y;b++){const m=p[b];i.push(m.x,m.y,0),s.push(0,0,1),o.push(m.x,m.y)}for(let b=0,y=_.length;b<y;b++){const m=_[b],T=m[0]+d,E=m[1]+d,S=m[2]+d;n.push(T,E,S),c+=3}}}toJSON(){const e=super.toJSON(),t=this.parameters.shapes;return Wx(t,e)}static fromJSON(e,t){const n=[];for(let i=0,s=e.shapes.length;i<s;i++){const o=t[e.shapes[i]];n.push(o)}return new ci(n,e.curveSegments)}}function Wx(r,e){if(e.shapes=[],Array.isArray(r))for(let t=0,n=r.length;t<n;t++){const i=r[t];e.shapes.push(i.uuid)}else e.shapes.push(r.uuid);return e}class hi extends Se{constructor(e=1,t=32,n=16,i=0,s=Math.PI*2,o=0,a=Math.PI){super();this.type="SphereGeometry",this.parameters={radius:e,widthSegments:t,heightSegments:n,phiStart:i,phiLength:s,thetaStart:o,thetaLength:a},t=Math.max(3,Math.floor(t)),n=Math.max(2,Math.floor(n));const c=Math.min(o+a,Math.PI);let h=0;const u=[],d=new L,f=new L,p=[],g=[],_=[],b=[];for(let y=0;y<=n;y++){const m=[],T=y/n;let E=0;y==0&&o==0?E=.5/t:y==n&&c==Math.PI&&(E=-.5/t);for(let S=0;S<=t;S++){const D=S/t;d.x=-e*Math.cos(i+D*s)*Math.sin(o+T*a),d.y=e*Math.cos(o+T*a),d.z=e*Math.sin(i+D*s)*Math.sin(o+T*a),g.push(d.x,d.y,d.z),f.copy(d).normalize(),_.push(f.x,f.y,f.z),b.push(D+E,1-T),m.push(h++)}u.push(m)}for(let y=0;y<n;y++)for(let m=0;m<t;m++){const T=u[y][m+1],E=u[y][m],S=u[y+1][m],D=u[y+1][m+1];(y!==0||o>0)&&p.push(T,E,D),(y!==n-1||c<Math.PI)&&p.push(E,S,D)}this.setIndex(p),this.setAttribute("position",new ve(g,3)),this.setAttribute("normal",new ve(_,3)),this.setAttribute("uv",new ve(b,2))}static fromJSON(e){return new hi(e.radius,e.widthSegments,e.heightSegments,e.phiStart,e.phiLength,e.thetaStart,e.thetaLength)}}class or extends $t{constructor(e=1,t=0){const n=[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],i=[2,1,0,0,3,2,1,3,0,2,3,1];super(n,i,e,t);this.type="TetrahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new or(e.radius,e.detail)}}class ar extends Se{constructor(e=1,t=.4,n=8,i=6,s=Math.PI*2){super();this.type="TorusGeometry",this.parameters={radius:e,tube:t,radialSegments:n,tubularSegments:i,arc:s},n=Math.floor(n),i=Math.floor(i);const o=[],a=[],c=[],h=[],u=new L,d=new L,f=new L;for(let p=0;p<=n;p++)for(let g=0;g<=i;g++){const _=g/i*s,b=p/n*Math.PI*2;d.x=(e+t*Math.cos(b))*Math.cos(_),d.y=(e+t*Math.cos(b))*Math.sin(_),d.z=t*Math.sin(b),a.push(d.x,d.y,d.z),u.x=e*Math.cos(_),u.y=e*Math.sin(_),f.subVectors(d,u).normalize(),c.push(f.x,f.y,f.z),h.push(g/i),h.push(p/n)}for(let p=1;p<=n;p++)for(let g=1;g<=i;g++){const _=(i+1)*p+g-1,b=(i+1)*(p-1)+g-1,y=(i+1)*(p-1)+g,m=(i+1)*p+g;o.push(_,b,m),o.push(b,y,m)}this.setIndex(o),this.setAttribute("position",new ve(a,3)),this.setAttribute("normal",new ve(c,3)),this.setAttribute("uv",new ve(h,2))}static fromJSON(e){return new ar(e.radius,e.tube,e.radialSegments,e.tubularSegments,e.arc)}}class lr extends Se{constructor(e=1,t=.4,n=64,i=8,s=2,o=3){super();this.type="TorusKnotGeometry",this.parameters={radius:e,tube:t,tubularSegments:n,radialSegments:i,p:s,q:o},n=Math.floor(n),i=Math.floor(i);const a=[],c=[],h=[],u=[],d=new L,f=new L,p=new L,g=new L,_=new L,b=new L,y=new L;for(let T=0;T<=n;++T){const E=T/n*s*Math.PI*2;m(E,s,o,e,p),m(E+.01,s,o,e,g),b.subVectors(g,p),y.addVectors(g,p),_.crossVectors(b,y),y.crossVectors(_,b),_.normalize(),y.normalize();for(let S=0;S<=i;++S){const D=S/i*Math.PI*2,U=-t*Math.cos(D),N=t*Math.sin(D);d.x=p.x+(U*y.x+N*_.x),d.y=p.y+(U*y.y+N*_.y),d.z=p.z+(U*y.z+N*_.z),c.push(d.x,d.y,d.z),f.subVectors(d,p).normalize(),h.push(f.x,f.y,f.z),u.push(T/n),u.push(S/i)}}for(let T=1;T<=n;T++)for(let E=1;E<=i;E++){const S=(i+1)*(T-1)+(E-1),D=(i+1)*T+(E-1),U=(i+1)*T+E,N=(i+1)*(T-1)+E;a.push(S,D,N),a.push(D,U,N)}this.setIndex(a),this.setAttribute("position",new ve(c,3)),this.setAttribute("normal",new ve(h,3)),this.setAttribute("uv",new ve(u,2));function m(T,E,S,D,U){const N=Math.cos(T),Z=Math.sin(T),z=S/E*T,A=Math.cos(z);U.x=D*(2+A)*.5*N,U.y=D*(2+A)*Z*.5,U.z=D*Math.sin(z)*.5}}static fromJSON(e){return new lr(e.radius,e.tube,e.tubularSegments,e.radialSegments,e.p,e.q)}}class cr extends Se{constructor(e=new fo(new L(-1,-1,0),new L(-1,1,0),new L(1,1,0)),t=64,n=1,i=8,s=!1){super();this.type="TubeGeometry",this.parameters={path:e,tubularSegments:t,radius:n,radialSegments:i,closed:s};const o=e.computeFrenetFrames(t,s);this.tangents=o.tangents,this.normals=o.normals,this.binormals=o.binormals;const a=new L,c=new L,h=new te;let u=new L;const d=[],f=[],p=[],g=[];_(),this.setIndex(g),this.setAttribute("position",new ve(d,3)),this.setAttribute("normal",new ve(f,3)),this.setAttribute("uv",new ve(p,2));function _(){for(let T=0;T<t;T++)b(T);b(s===!1?t:0),m(),y()}function b(T){u=e.getPointAt(T/t,u);const E=o.normals[T],S=o.binormals[T];for(let D=0;D<=i;D++){const U=D/i*Math.PI*2,N=Math.sin(U),Z=-Math.cos(U);c.x=Z*E.x+N*S.x,c.y=Z*E.y+N*S.y,c.z=Z*E.z+N*S.z,c.normalize(),f.push(c.x,c.y,c.z),a.x=u.x+n*c.x,a.y=u.y+n*c.y,a.z=u.z+n*c.z,d.push(a.x,a.y,a.z)}}function y(){for(let T=1;T<=t;T++)for(let E=1;E<=i;E++){const S=(i+1)*(T-1)+(E-1),D=(i+1)*T+(E-1),U=(i+1)*T+E,N=(i+1)*(T-1)+E;g.push(S,D,N),g.push(D,U,N)}}function m(){for(let T=0;T<=t;T++)for(let E=0;E<=i;E++)h.x=T/t,h.y=E/i,p.push(h.x,h.y)}}toJSON(){const e=super.toJSON();return e.path=this.parameters.path.toJSON(),e}static fromJSON(e){return new cr(new ol[e.path.type]().fromJSON(e.path),e.tubularSegments,e.radius,e.radialSegments,e.closed)}}class cl extends Se{constructor(e=null){super();if(this.type="WireframeGeometry",this.parameters={geometry:e},e!==null){const t=[],n=new Set,i=new L,s=new L;if(e.index!==null){const o=e.attributes.position,a=e.index;let c=e.groups;c.length===0&&(c=[{start:0,count:a.count,materialIndex:0}]);for(let h=0,u=c.length;h<u;++h){const d=c[h],f=d.start,p=d.count;for(let g=f,_=f+p;g<_;g+=3)for(let b=0;b<3;b++){const y=a.getX(g+b),m=a.getX(g+(b+1)%3);i.fromBufferAttribute(o,y),s.fromBufferAttribute(o,m),Su(i,s,n)===!0&&(t.push(i.x,i.y,i.z),t.push(s.x,s.y,s.z))}}}else{const o=e.attributes.position;for(let a=0,c=o.count/3;a<c;a++)for(let h=0;h<3;h++){const u=3*a+h,d=3*a+(h+1)%3;i.fromBufferAttribute(o,u),s.fromBufferAttribute(o,d),Su(i,s,n)===!0&&(t.push(i.x,i.y,i.z),t.push(s.x,s.y,s.z))}}this.setAttribute("position",new ve(t,3))}}}function Su(r,e,t){const n=`${r.x},${r.y},${r.z}-${e.x},${e.y},${e.z}`,i=`${e.x},${e.y},${e.z}-${r.x},${r.y},${r.z}`;return t.has(n)===!0||t.has(i)===!0?!1:(t.add(n),t.add(i),!0)}var Tu=Object.freeze({__proto__:null,BoxGeometry:dn,BoxBufferGeometry:dn,CircleGeometry:Qi,CircleBufferGeometry:Qi,ConeGeometry:er,ConeBufferGeometry:er,CylinderGeometry:Un,CylinderBufferGeometry:Un,DodecahedronGeometry:tr,DodecahedronBufferGeometry:tr,EdgesGeometry:ja,ExtrudeGeometry:Qt,ExtrudeBufferGeometry:Qt,IcosahedronGeometry:ir,IcosahedronBufferGeometry:ir,LatheGeometry:rr,LatheBufferGeometry:rr,OctahedronGeometry:li,OctahedronBufferGeometry:li,PlaneGeometry:ei,PlaneBufferGeometry:ei,PolyhedronGeometry:$t,PolyhedronBufferGeometry:$t,RingGeometry:sr,RingBufferGeometry:sr,ShapeGeometry:ci,ShapeBufferGeometry:ci,SphereGeometry:hi,SphereBufferGeometry:hi,TetrahedronGeometry:or,TetrahedronBufferGeometry:or,TorusGeometry:ar,TorusBufferGeometry:ar,TorusKnotGeometry:lr,TorusKnotBufferGeometry:lr,TubeGeometry:cr,TubeBufferGeometry:cr,WireframeGeometry:cl});class hl extends ot{constructor(e){super();this.type="ShadowMaterial",this.color=new ge(0),this.transparent=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this}}hl.prototype.isShadowMaterial=!0;class ul extends Nt{constructor(e){super(e);this.type="RawShaderMaterial"}}ul.prototype.isRawShaderMaterial=!0;class xo extends ot{constructor(e){super();this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new ge(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new ge(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Jn,this.normalScale=new te(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.setValues(e)}copy(e){return super.copy(e),this.defines={STANDARD:""},this.color.copy(e.color),this.roughness=e.roughness,this.metalness=e.metalness,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.roughnessMap=e.roughnessMap,this.metalnessMap=e.metalnessMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapIntensity=e.envMapIntensity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this}}xo.prototype.isMeshStandardMaterial=!0;class dl extends xo{constructor(e){super();this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new te(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,"reflectivity",{get:function(){return _t(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(t){this.ior=(1+.4*t)/(1-.4*t)}}),this.sheenColor=new ge(0),this.sheenColorMap=null,this.sheenRoughness=1,this.sheenRoughnessMap=null,this.transmissionMap=null,this.thickness=0,this.thicknessMap=null,this.attenuationDistance=0,this.attenuationColor=new ge(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularColor=new ge(1,1,1),this.specularColorMap=null,this._sheen=0,this._clearcoat=0,this._transmission=0,this.setValues(e)}get sheen(){return this._sheen}set sheen(e){this._sheen>0!=e>0&&this.version++,this._sheen=e}get clearcoat(){return this._clearcoat}set clearcoat(e){this._clearcoat>0!=e>0&&this.version++,this._clearcoat=e}get transmission(){return this._transmission}set transmission(e){this._transmission>0!=e>0&&this.version++,this._transmission=e}copy(e){return super.copy(e),this.defines={STANDARD:"",PHYSICAL:""},this.clearcoat=e.clearcoat,this.clearcoatMap=e.clearcoatMap,this.clearcoatRoughness=e.clearcoatRoughness,this.clearcoatRoughnessMap=e.clearcoatRoughnessMap,this.clearcoatNormalMap=e.clearcoatNormalMap,this.clearcoatNormalScale.copy(e.clearcoatNormalScale),this.ior=e.ior,this.sheen=e.sheen,this.sheenColor.copy(e.sheenColor),this.sheenColorMap=e.sheenColorMap,this.sheenRoughness=e.sheenRoughness,this.sheenRoughnessMap=e.sheenRoughnessMap,this.transmission=e.transmission,this.transmissionMap=e.transmissionMap,this.thickness=e.thickness,this.thicknessMap=e.thicknessMap,this.attenuationDistance=e.attenuationDistance,this.attenuationColor.copy(e.attenuationColor),this.specularIntensity=e.specularIntensity,this.specularIntensityMap=e.specularIntensityMap,this.specularColor.copy(e.specularColor),this.specularColorMap=e.specularColorMap,this}}dl.prototype.isMeshPhysicalMaterial=!0;class fl extends ot{constructor(e){super();this.type="MeshPhongMaterial",this.color=new ge(16777215),this.specular=new ge(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new ge(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Jn,this.normalScale=new te(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=pr,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.specular.copy(e.specular),this.shininess=e.shininess,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this}}fl.prototype.isMeshPhongMaterial=!0;class pl extends ot{constructor(e){super();this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new ge(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new ge(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Jn,this.normalScale=new te(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.gradientMap=e.gradientMap,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.alphaMap=e.alphaMap,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this}}pl.prototype.isMeshToonMaterial=!0;class ml extends ot{constructor(e){super();this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Jn,this.normalScale=new te(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.flatShading=!1,this.setValues(e)}copy(e){return super.copy(e),this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.flatShading=e.flatShading,this}}ml.prototype.isMeshNormalMaterial=!0;class gl extends ot{constructor(e){super();this.type="MeshLambertMaterial",this.color=new ge(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new ge(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=pr,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this}}gl.prototype.isMeshLambertMaterial=!0;class yl extends ot{constructor(e){super();this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new ge(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Jn,this.normalScale=new te(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.flatShading=!1,this.setValues(e)}copy(e){return super.copy(e),this.defines={MATCAP:""},this.color.copy(e.color),this.matcap=e.matcap,this.map=e.map,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.alphaMap=e.alphaMap,this.flatShading=e.flatShading,this}}yl.prototype.isMeshMatcapMaterial=!0;class xl extends gt{constructor(e){super();this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(e)}copy(e){return super.copy(e),this.scale=e.scale,this.dashSize=e.dashSize,this.gapSize=e.gapSize,this}}xl.prototype.isLineDashedMaterial=!0;const Xx={ShadowMaterial:hl,SpriteMaterial:Ys,RawShaderMaterial:ul,ShaderMaterial:Nt,PointsMaterial:ai,MeshPhysicalMaterial:dl,MeshStandardMaterial:xo,MeshPhongMaterial:fl,MeshToonMaterial:pl,MeshNormalMaterial:ml,MeshLambertMaterial:gl,MeshDepthMaterial:Ws,MeshDistanceMaterial:Xs,MeshBasicMaterial:un,MeshMatcapMaterial:yl,LineDashedMaterial:xl,LineBasicMaterial:gt,Material:ot};ot.fromType=function(r){return new Xx[r]};const Qe={arraySlice:function(r,e,t){return Qe.isTypedArray(r)?new r.constructor(r.subarray(e,t!==void 0?t:r.length)):r.slice(e,t)},convertArray:function(r,e,t){return!r||!t&&r.constructor===e?r:typeof e.BYTES_PER_ELEMENT=="number"?new e(r):Array.prototype.slice.call(r)},isTypedArray:function(r){return ArrayBuffer.isView(r)&&!(r instanceof DataView)},getKeyframeOrder:function(r){function e(i,s){return r[i]-r[s]}const t=r.length,n=new Array(t);for(let i=0;i!==t;++i)n[i]=i;return n.sort(e),n},sortedArray:function(r,e,t){const n=r.length,i=new r.constructor(n);for(let s=0,o=0;o!==n;++s){const a=t[s]*e;for(let c=0;c!==e;++c)i[o++]=r[a+c]}return i},flattenJSON:function(r,e,t,n){let i=1,s=r[0];for(;s!==void 0&&s[n]===void 0;)s=r[i++];if(s===void 0)return;let o=s[n];if(o!==void 0)if(Array.isArray(o))do o=s[n],o!==void 0&&(e.push(s.time),t.push.apply(t,o)),s=r[i++];while(s!==void 0);else if(o.toArray!==void 0)do o=s[n],o!==void 0&&(e.push(s.time),o.toArray(t,t.length)),s=r[i++];while(s!==void 0);else do o=s[n],o!==void 0&&(e.push(s.time),t.push(o)),s=r[i++];while(s!==void 0)},subclip:function(r,e,t,n,i=30){const s=r.clone();s.name=e;const o=[];for(let c=0;c<s.tracks.length;++c){const h=s.tracks[c],u=h.getValueSize(),d=[],f=[];for(let p=0;p<h.times.length;++p){const g=h.times[p]*i;if(!(g<t||g>=n)){d.push(h.times[p]);for(let _=0;_<u;++_)f.push(h.values[p*u+_])}}d.length!==0&&(h.times=Qe.convertArray(d,h.times.constructor),h.values=Qe.convertArray(f,h.values.constructor),o.push(h))}s.tracks=o;let a=1/0;for(let c=0;c<s.tracks.length;++c)a>s.tracks[c].times[0]&&(a=s.tracks[c].times[0]);for(let c=0;c<s.tracks.length;++c)s.tracks[c].shift(-1*a);return s.resetDuration(),s},makeClipAdditive:function(r,e=0,t=r,n=30){n<=0&&(n=30);const i=t.tracks.length,s=e/n;for(let o=0;o<i;++o){const a=t.tracks[o],c=a.ValueTypeName;if(c==="bool"||c==="string")continue;const h=r.tracks.find(function(y){return y.name===a.name&&y.ValueTypeName===c});if(h===void 0)continue;let u=0;const d=a.getValueSize();a.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(u=d/3);let f=0;const p=h.getValueSize();h.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(f=p/3);const g=a.times.length-1;let _;if(s<=a.times[0]){const y=u,m=d-u;_=Qe.arraySlice(a.values,y,m)}else if(s>=a.times[g]){const y=g*d+u,m=y+d-u;_=Qe.arraySlice(a.values,y,m)}else{const y=a.createInterpolant(),m=u,T=d-u;y.evaluate(s),_=Qe.arraySlice(y.resultBuffer,m,T)}c==="quaternion"&&new vt().fromArray(_).normalize().conjugate().toArray(_);const b=h.times.length;for(let y=0;y<b;++y){const m=y*p+f;if(c==="quaternion")vt.multiplyQuaternionsFlat(h.values,m,_,0,h.values,m);else{const T=p-f*2;for(let E=0;E<T;++E)h.values[m+E]-=_[E]}}}return r.blendMode=ha,r}};class pn{constructor(e,t,n,i){this.parameterPositions=e,this._cachedIndex=0,this.resultBuffer=i!==void 0?i:new t.constructor(n),this.sampleValues=t,this.valueSize=n,this.settings=null,this.DefaultSettings_={}}evaluate(e){const t=this.parameterPositions;let n=this._cachedIndex,i=t[n],s=t[n-1];e:{t:{let o;n:{i:if(!(e<i)){for(let a=n+2;;){if(i===void 0){if(e<s)break i;return n=t.length,this._cachedIndex=n,this.afterEnd_(n-1,e,s)}if(n===a)break;if(s=i,i=t[++n],e<i)break t}o=t.length;break n}if(!(e>=s)){const a=t[1];e<a&&(n=2,s=a);for(let c=n-2;;){if(s===void 0)return this._cachedIndex=0,this.beforeStart_(0,e,i);if(n===c)break;if(i=s,s=t[--n-1],e>=s)break t}o=n,n=0;break n}break e}for(;n<o;){const a=n+o>>>1;e<t[a]?o=a:n=a+1}if(i=t[n],s=t[n-1],s===void 0)return this._cachedIndex=0,this.beforeStart_(0,e,i);if(i===void 0)return n=t.length,this._cachedIndex=n,this.afterEnd_(n-1,s,e)}this._cachedIndex=n,this.intervalChanged_(n,s,i)}return this.interpolate_(n,s,e,i)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(e){const t=this.resultBuffer,n=this.sampleValues,i=this.valueSize,s=e*i;for(let o=0;o!==i;++o)t[o]=n[s+o];return t}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}pn.prototype.beforeStart_=pn.prototype.copySampleValue_;pn.prototype.afterEnd_=pn.prototype.copySampleValue_;class Au extends pn{constructor(e,t,n,i){super(e,t,n,i);this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:Yn,endingEnd:Yn}}intervalChanged_(e,t,n){const i=this.parameterPositions;let s=e-2,o=e+1,a=i[s],c=i[o];if(a===void 0)switch(this.getSettings_().endingStart){case Zn:s=e,a=2*t-n;break;case br:s=i.length-2,a=t+i[s]-i[s+1];break;default:s=e,a=n}if(c===void 0)switch(this.getSettings_().endingEnd){case Zn:o=e,c=2*n-t;break;case br:o=1,c=n+i[1]-i[0];break;default:o=e-1,c=t}const h=(n-t)*.5,u=this.valueSize;this._weightPrev=h/(t-a),this._weightNext=h/(c-n),this._offsetPrev=s*u,this._offsetNext=o*u}interpolate_(e,t,n,i){const s=this.resultBuffer,o=this.sampleValues,a=this.valueSize,c=e*a,h=c-a,u=this._offsetPrev,d=this._offsetNext,f=this._weightPrev,p=this._weightNext,g=(n-t)/(i-t),_=g*g,b=_*g,y=-f*b+2*f*_-f*g,m=(1+f)*b+(-1.5-2*f)*_+(-.5+f)*g+1,T=(-1-p)*b+(1.5+p)*_+.5*g,E=p*b-p*_;for(let S=0;S!==a;++S)s[S]=y*o[u+S]+m*o[h+S]+T*o[c+S]+E*o[d+S];return s}}class _l extends pn{constructor(e,t,n,i){super(e,t,n,i)}interpolate_(e,t,n,i){const s=this.resultBuffer,o=this.sampleValues,a=this.valueSize,c=e*a,h=c-a,u=(n-t)/(i-t),d=1-u;for(let f=0;f!==a;++f)s[f]=o[h+f]*d+o[c+f]*u;return s}}class Ru extends pn{constructor(e,t,n,i){super(e,t,n,i)}interpolate_(e){return this.copySampleValue_(e-1)}}class kt{constructor(e,t,n,i){if(e===void 0)throw new Error("THREE.KeyframeTrack: track name is undefined");if(t===void 0||t.length===0)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+e);this.name=e,this.times=Qe.convertArray(t,this.TimeBufferType),this.values=Qe.convertArray(n,this.ValueBufferType),this.setInterpolation(i||this.DefaultInterpolation)}static toJSON(e){const t=e.constructor;let n;if(t.toJSON!==this.toJSON)n=t.toJSON(e);else{n={name:e.name,times:Qe.convertArray(e.times,Array),values:Qe.convertArray(e.values,Array)};const i=e.getInterpolation();i!==e.DefaultInterpolation&&(n.interpolation=i)}return n.type=e.ValueTypeName,n}InterpolantFactoryMethodDiscrete(e){return new Ru(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodLinear(e){return new _l(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodSmooth(e){return new Au(this.times,this.values,this.getValueSize(),e)}setInterpolation(e){let t;switch(e){case Mr:t=this.InterpolantFactoryMethodDiscrete;break;case wr:t=this.InterpolantFactoryMethodLinear;break;case fs:t=this.InterpolantFactoryMethodSmooth;break}if(t===void 0){const n="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(this.createInterpolant===void 0)if(e!==this.DefaultInterpolation)this.setInterpolation(this.DefaultInterpolation);else throw new Error(n);return console.warn("THREE.KeyframeTrack:",n),this}return this.createInterpolant=t,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return Mr;case this.InterpolantFactoryMethodLinear:return wr;case this.InterpolantFactoryMethodSmooth:return fs}}getValueSize(){return this.values.length/this.times.length}shift(e){if(e!==0){const t=this.times;for(let n=0,i=t.length;n!==i;++n)t[n]+=e}return this}scale(e){if(e!==1){const t=this.times;for(let n=0,i=t.length;n!==i;++n)t[n]*=e}return this}trim(e,t){const n=this.times,i=n.length;let s=0,o=i-1;for(;s!==i&&n[s]<e;)++s;for(;o!==-1&&n[o]>t;)--o;if(++o,s!==0||o!==i){s>=o&&(o=Math.max(o,1),s=o-1);const a=this.getValueSize();this.times=Qe.arraySlice(n,s,o),this.values=Qe.arraySlice(this.values,s*a,o*a)}return this}validate(){let e=!0;const t=this.getValueSize();t-Math.floor(t)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),e=!1);const n=this.times,i=this.values,s=n.length;s===0&&(console.error("THREE.KeyframeTrack: Track is empty.",this),e=!1);let o=null;for(let a=0;a!==s;a++){const c=n[a];if(typeof c=="number"&&isNaN(c)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,a,c),e=!1;break}if(o!==null&&o>c){console.error("THREE.KeyframeTrack: Out of order keys.",this,a,c,o),e=!1;break}o=c}if(i!==void 0&&Qe.isTypedArray(i))for(let a=0,c=i.length;a!==c;++a){const h=i[a];if(isNaN(h)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,a,h),e=!1;break}}return e}optimize(){const e=Qe.arraySlice(this.times),t=Qe.arraySlice(this.values),n=this.getValueSize(),i=this.getInterpolation()===fs,s=e.length-1;let o=1;for(let a=1;a<s;++a){let c=!1;const h=e[a],u=e[a+1];if(h!==u&&(a!==1||h!==e[0]))if(i)c=!0;else{const d=a*n,f=d-n,p=d+n;for(let g=0;g!==n;++g){const _=t[d+g];if(_!==t[f+g]||_!==t[p+g]){c=!0;break}}}if(c){if(a!==o){e[o]=e[a];const d=a*n,f=o*n;for(let p=0;p!==n;++p)t[f+p]=t[d+p]}++o}}if(s>0){e[o]=e[s];for(let a=s*n,c=o*n,h=0;h!==n;++h)t[c+h]=t[a+h];++o}return o!==e.length?(this.times=Qe.arraySlice(e,0,o),this.values=Qe.arraySlice(t,0,o*n)):(this.times=e,this.values=t),this}clone(){const e=Qe.arraySlice(this.times,0),t=Qe.arraySlice(this.values,0),n=this.constructor,i=new n(this.name,e,t);return i.createInterpolant=this.createInterpolant,i}}kt.prototype.TimeBufferType=Float32Array;kt.prototype.ValueBufferType=Float32Array;kt.prototype.DefaultInterpolation=wr;class ui extends kt{}ui.prototype.ValueTypeName="bool";ui.prototype.ValueBufferType=Array;ui.prototype.DefaultInterpolation=Mr;ui.prototype.InterpolantFactoryMethodLinear=void 0;ui.prototype.InterpolantFactoryMethodSmooth=void 0;class vl extends kt{}vl.prototype.ValueTypeName="color";class $r extends kt{}$r.prototype.ValueTypeName="number";class Cu extends pn{constructor(e,t,n,i){super(e,t,n,i)}interpolate_(e,t,n,i){const s=this.resultBuffer,o=this.sampleValues,a=this.valueSize,c=(n-t)/(i-t);let h=e*a;for(let u=h+a;h!==u;h+=4)vt.slerpFlat(s,0,o,h-a,o,h,c);return s}}class hr extends kt{InterpolantFactoryMethodLinear(e){return new Cu(this.times,this.values,this.getValueSize(),e)}}hr.prototype.ValueTypeName="quaternion";hr.prototype.DefaultInterpolation=wr;hr.prototype.InterpolantFactoryMethodSmooth=void 0;class di extends kt{}di.prototype.ValueTypeName="string";di.prototype.ValueBufferType=Array;di.prototype.DefaultInterpolation=Mr;di.prototype.InterpolantFactoryMethodLinear=void 0;di.prototype.InterpolantFactoryMethodSmooth=void 0;class Kr extends kt{}Kr.prototype.ValueTypeName="vector";class jr{constructor(e,t=-1,n,i=ps){this.name=e,this.tracks=n,this.duration=t,this.blendMode=i,this.uuid=Pt(),this.duration<0&&this.resetDuration()}static parse(e){const t=[],n=e.tracks,i=1/(e.fps||1);for(let o=0,a=n.length;o!==a;++o)t.push(Yx(n[o]).scale(i));const s=new this(e.name,e.duration,t,e.blendMode);return s.uuid=e.uuid,s}static toJSON(e){const t=[],n=e.tracks,i={name:e.name,duration:e.duration,tracks:t,uuid:e.uuid,blendMode:e.blendMode};for(let s=0,o=n.length;s!==o;++s)t.push(kt.toJSON(n[s]));return i}static CreateFromMorphTargetSequence(e,t,n,i){const s=t.length,o=[];for(let a=0;a<s;a++){let c=[],h=[];c.push((a+s-1)%s,a,(a+1)%s),h.push(0,1,0);const u=Qe.getKeyframeOrder(c);c=Qe.sortedArray(c,1,u),h=Qe.sortedArray(h,1,u),!i&&c[0]===0&&(c.push(s),h.push(h[0])),o.push(new $r(".morphTargetInfluences["+t[a].name+"]",c,h).scale(1/n))}return new this(e,-1,o)}static findByName(e,t){let n=e;if(!Array.isArray(e)){const i=e;n=i.geometry&&i.geometry.animations||i.animations}for(let i=0;i<n.length;i++)if(n[i].name===t)return n[i];return null}static CreateClipsFromMorphTargetSequences(e,t,n){const i={},s=/^([\w-]*?)([\d]+)$/;for(let a=0,c=e.length;a<c;a++){const h=e[a],u=h.name.match(s);if(u&&u.length>1){const d=u[1];let f=i[d];f||(i[d]=f=[]),f.push(h)}}const o=[];for(const a in i)o.push(this.CreateFromMorphTargetSequence(a,i[a],t,n));return o}static parseAnimation(e,t){if(!e)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const n=function(d,f,p,g,_){if(p.length!==0){const b=[],y=[];Qe.flattenJSON(p,b,y,g),b.length!==0&&_.push(new d(f,b,y))}},i=[],s=e.name||"default",o=e.fps||30,a=e.blendMode;let c=e.length||-1;const h=e.hierarchy||[];for(let d=0;d<h.length;d++){const f=h[d].keys;if(!(!f||f.length===0))if(f[0].morphTargets){const p={};let g;for(g=0;g<f.length;g++)if(f[g].morphTargets)for(let _=0;_<f[g].morphTargets.length;_++)p[f[g].morphTargets[_]]=-1;for(const _ in p){const b=[],y=[];for(let m=0;m!==f[g].morphTargets.length;++m){const T=f[g];b.push(T.time),y.push(T.morphTarget===_?1:0)}i.push(new $r(".morphTargetInfluence["+_+"]",b,y))}c=p.length*o}else{const p=".bones["+t[d].name+"]";n(Kr,p+".position",f,"pos",i),n(hr,p+".quaternion",f,"rot",i),n(Kr,p+".scale",f,"scl",i)}}return i.length===0?null:new this(s,c,i,a)}resetDuration(){const e=this.tracks;let t=0;for(let n=0,i=e.length;n!==i;++n){const s=this.tracks[n];t=Math.max(t,s.times[s.times.length-1])}return this.duration=t,this}trim(){for(let e=0;e<this.tracks.length;e++)this.tracks[e].trim(0,this.duration);return this}validate(){let e=!0;for(let t=0;t<this.tracks.length;t++)e=e&&this.tracks[t].validate();return e}optimize(){for(let e=0;e<this.tracks.length;e++)this.tracks[e].optimize();return this}clone(){const e=[];for(let t=0;t<this.tracks.length;t++)e.push(this.tracks[t].clone());return new this.constructor(this.name,this.duration,e,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function qx(r){switch(r.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return $r;case"vector":case"vector2":case"vector3":case"vector4":return Kr;case"color":return vl;case"quaternion":return hr;case"bool":case"boolean":return ui;case"string":return di}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+r)}function Yx(r){if(r.type===void 0)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const e=qx(r.type);if(r.times===void 0){const t=[],n=[];Qe.flattenJSON(r.keys,t,n,"value"),r.times=t,r.values=n}return e.parse!==void 0?e.parse(r):new e(r.name,r.times,r.values,r.interpolation)}const fi={enabled:!1,files:{},add:function(r,e){this.enabled!==!1&&(this.files[r]=e)},get:function(r){if(this.enabled!==!1)return this.files[r]},remove:function(r){delete this.files[r]},clear:function(){this.files={}}};class Ml{constructor(e,t,n){const i=this;let s=!1,o=0,a=0,c;const h=[];this.onStart=void 0,this.onLoad=e,this.onProgress=t,this.onError=n,this.itemStart=function(u){a++,s===!1&&i.onStart!==void 0&&i.onStart(u,o,a),s=!0},this.itemEnd=function(u){o++,i.onProgress!==void 0&&i.onProgress(u,o,a),o===a&&(s=!1,i.onLoad!==void 0&&i.onLoad())},this.itemError=function(u){i.onError!==void 0&&i.onError(u)},this.resolveURL=function(u){return c?c(u):u},this.setURLModifier=function(u){return c=u,this},this.addHandler=function(u,d){return h.push(u,d),this},this.removeHandler=function(u){const d=h.indexOf(u);return d!==-1&&h.splice(d,2),this},this.getHandler=function(u){for(let d=0,f=h.length;d<f;d+=2){const p=h[d],g=h[d+1];if(p.global&&(p.lastIndex=0),p.test(u))return g}return null}}}const Lu=new Ml;class Ct{constructor(e){this.manager=e!==void 0?e:Lu,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(e,t){const n=this;return new Promise(function(i,s){n.load(e,i,t,s)})}parse(){}setCrossOrigin(e){return this.crossOrigin=e,this}setWithCredentials(e){return this.withCredentials=e,this}setPath(e){return this.path=e,this}setResourcePath(e){return this.resourcePath=e,this}setRequestHeader(e){return this.requestHeader=e,this}}const mn={};class en extends Ct{constructor(e){super(e)}load(e,t,n,i){e===void 0&&(e=""),this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const s=fi.get(e);if(s!==void 0)return this.manager.itemStart(e),setTimeout(()=>{t&&t(s),this.manager.itemEnd(e)},0),s;if(mn[e]!==void 0){mn[e].push({onLoad:t,onProgress:n,onError:i});return}mn[e]=[],mn[e].push({onLoad:t,onProgress:n,onError:i});const o=new Request(e,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin"}),a=this.mimeType,c=this.responseType;fetch(o).then(h=>{if(h.status===200||h.status===0){if(h.status===0&&console.warn("THREE.FileLoader: HTTP Status 0 received."),typeof ReadableStream=="undefined"||h.body===void 0||h.body.getReader===void 0)return h;const u=mn[e],d=h.body.getReader(),f=h.headers.get("Content-Length"),p=f?parseInt(f):0,g=p!==0;let _=0;const b=new ReadableStream({start(y){m();function m(){d.read().then(({done:T,value:E})=>{if(T)y.close();else{_+=E.byteLength;const S=new ProgressEvent("progress",{lengthComputable:g,loaded:_,total:p});for(let D=0,U=u.length;D<U;D++){const N=u[D];N.onProgress&&N.onProgress(S)}y.enqueue(E),m()}})}}});return new Response(b)}else throw Error(`fetch for "${h.url}" responded with ${h.status}: ${h.statusText}`)}).then(h=>{switch(c){case"arraybuffer":return h.arrayBuffer();case"blob":return h.blob();case"document":return h.text().then(u=>new DOMParser().parseFromString(u,a));case"json":return h.json();default:if(a===void 0)return h.text();{const d=/charset="?([^;"\s]*)"?/i.exec(a),f=d&&d[1]?d[1].toLowerCase():void 0,p=new TextDecoder(f);return h.arrayBuffer().then(g=>p.decode(g))}}}).then(h=>{fi.add(e,h);const u=mn[e];delete mn[e];for(let d=0,f=u.length;d<f;d++){const p=u[d];p.onLoad&&p.onLoad(h)}}).catch(h=>{const u=mn[e];if(u===void 0)throw this.manager.itemError(e),h;delete mn[e];for(let d=0,f=u.length;d<f;d++){const p=u[d];p.onError&&p.onError(h)}this.manager.itemError(e)}).finally(()=>{this.manager.itemEnd(e)}),this.manager.itemStart(e)}setResponseType(e){return this.responseType=e,this}setMimeType(e){return this.mimeType=e,this}}class Zx extends Ct{constructor(e){super(e)}load(e,t,n,i){const s=this,o=new en(this.manager);o.setPath(this.path),o.setRequestHeader(this.requestHeader),o.setWithCredentials(this.withCredentials),o.load(e,function(a){try{t(s.parse(JSON.parse(a)))}catch(c){i?i(c):console.error(c),s.manager.itemError(e)}},n,i)}parse(e){const t=[];for(let n=0;n<e.length;n++){const i=jr.parse(e[n]);t.push(i)}return t}}class Jx extends Ct{constructor(e){super(e)}load(e,t,n,i){const s=this,o=[],a=new $a,c=new en(this.manager);c.setPath(this.path),c.setResponseType("arraybuffer"),c.setRequestHeader(this.requestHeader),c.setWithCredentials(s.withCredentials);let h=0;function u(d){c.load(e[d],function(f){const p=s.parse(f,!0);o[d]={width:p.width,height:p.height,format:p.format,mipmaps:p.mipmaps},h+=1,h===6&&(p.mipmapCount===1&&(a.minFilter=et),a.image=o,a.format=p.format,a.needsUpdate=!0,t&&t(a))},n,i)}if(Array.isArray(e))for(let d=0,f=e.length;d<f;++d)u(d);else c.load(e,function(d){const f=s.parse(d,!0);if(f.isCubemap){const p=f.mipmaps.length/f.mipmapCount;for(let g=0;g<p;g++){o[g]={mipmaps:[]};for(let _=0;_<f.mipmapCount;_++)o[g].mipmaps.push(f.mipmaps[g*f.mipmapCount+_]),o[g].format=f.format,o[g].width=f.width,o[g].height=f.height}a.image=o}else a.image.width=f.width,a.image.height=f.height,a.mipmaps=f.mipmaps;f.mipmapCount===1&&(a.minFilter=et),a.format=f.format,a.needsUpdate=!0,t&&t(a)},n,i);return a}}class Qr extends Ct{constructor(e){super(e)}load(e,t,n,i){this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const s=this,o=fi.get(e);if(o!==void 0)return s.manager.itemStart(e),setTimeout(function(){t&&t(o),s.manager.itemEnd(e)},0),o;const a=Tr("img");function c(){u(),fi.add(e,this),t&&t(this),s.manager.itemEnd(e)}function h(d){u(),i&&i(d),s.manager.itemError(e),s.manager.itemEnd(e)}function u(){a.removeEventListener("load",c,!1),a.removeEventListener("error",h,!1)}return a.addEventListener("load",c,!1),a.addEventListener("error",h,!1),e.slice(0,5)!=="data:"&&this.crossOrigin!==void 0&&(a.crossOrigin=this.crossOrigin),s.manager.itemStart(e),a.src=e,a}}class Pu extends Ct{constructor(e){super(e)}load(e,t,n,i){const s=new Wi,o=new Qr(this.manager);o.setCrossOrigin(this.crossOrigin),o.setPath(this.path);let a=0;function c(h){o.load(e[h],function(u){s.images[h]=u,a++,a===6&&(s.needsUpdate=!0,t&&t(s))},void 0,i)}for(let h=0;h<e.length;++h)c(h);return s}}class Iu extends Ct{constructor(e){super(e)}load(e,t,n,i){const s=this,o=new si,a=new en(this.manager);return a.setResponseType("arraybuffer"),a.setRequestHeader(this.requestHeader),a.setPath(this.path),a.setWithCredentials(s.withCredentials),a.load(e,function(c){const h=s.parse(c);!h||(h.image!==void 0?o.image=h.image:h.data!==void 0&&(o.image.width=h.width,o.image.height=h.height,o.image.data=h.data),o.wrapS=h.wrapS!==void 0?h.wrapS:Tt,o.wrapT=h.wrapT!==void 0?h.wrapT:Tt,o.magFilter=h.magFilter!==void 0?h.magFilter:et,o.minFilter=h.minFilter!==void 0?h.minFilter:et,o.anisotropy=h.anisotropy!==void 0?h.anisotropy:1,h.encoding!==void 0&&(o.encoding=h.encoding),h.flipY!==void 0&&(o.flipY=h.flipY),h.format!==void 0&&(o.format=h.format),h.type!==void 0&&(o.type=h.type),h.mipmaps!==void 0&&(o.mipmaps=h.mipmaps,o.minFilter=kn),h.mipmapCount===1&&(o.minFilter=et),h.generateMipmaps!==void 0&&(o.generateMipmaps=h.generateMipmaps),o.needsUpdate=!0,t&&t(o,h))},n,i),o}}class Du extends Ct{constructor(e){super(e)}load(e,t,n,i){const s=new ut,o=new Qr(this.manager);return o.setCrossOrigin(this.crossOrigin),o.setPath(this.path),o.load(e,function(a){s.image=a,s.needsUpdate=!0,t!==void 0&&t(s)},n,i),s}}class Wt extends Ne{constructor(e,t=1){super();this.type="Light",this.color=new ge(e),this.intensity=t}dispose(){}copy(e){return super.copy(e),this.color.copy(e.color),this.intensity=e.intensity,this}toJSON(e){const t=super.toJSON(e);return t.object.color=this.color.getHex(),t.object.intensity=this.intensity,this.groundColor!==void 0&&(t.object.groundColor=this.groundColor.getHex()),this.distance!==void 0&&(t.object.distance=this.distance),this.angle!==void 0&&(t.object.angle=this.angle),this.decay!==void 0&&(t.object.decay=this.decay),this.penumbra!==void 0&&(t.object.penumbra=this.penumbra),this.shadow!==void 0&&(t.object.shadow=this.shadow.toJSON()),t}}Wt.prototype.isLight=!0;class wl extends Wt{constructor(e,t,n){super(e,n);this.type="HemisphereLight",this.position.copy(Ne.DefaultUp),this.updateMatrix(),this.groundColor=new ge(t)}copy(e){return Wt.prototype.copy.call(this,e),this.groundColor.copy(e.groundColor),this}}wl.prototype.isHemisphereLight=!0;const Fu=new Me,Uu=new L,Bu=new L;class bl{constructor(e){this.camera=e,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new te(512,512),this.map=null,this.mapPass=null,this.matrix=new Me,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new Ir,this._frameExtents=new te(1,1),this._viewportCount=1,this._viewports=[new qe(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(e){const t=this.camera,n=this.matrix;Uu.setFromMatrixPosition(e.matrixWorld),t.position.copy(Uu),Bu.setFromMatrixPosition(e.target.matrixWorld),t.lookAt(Bu),t.updateMatrixWorld(),Fu.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Fu),n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),n.multiply(t.projectionMatrix),n.multiply(t.matrixWorldInverse)}getViewport(e){return this._viewports[e]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(e){return this.camera=e.camera.clone(),this.bias=e.bias,this.radius=e.radius,this.mapSize.copy(e.mapSize),this}clone(){return new this.constructor().copy(this)}toJSON(){const e={};return this.bias!==0&&(e.bias=this.bias),this.normalBias!==0&&(e.normalBias=this.normalBias),this.radius!==1&&(e.radius=this.radius),(this.mapSize.x!==512||this.mapSize.y!==512)&&(e.mapSize=this.mapSize.toArray()),e.camera=this.camera.toJSON(!1).object,delete e.camera.matrix,e}}class Nu extends bl{constructor(){super(new mt(50,1,.5,500));this.focus=1}updateMatrices(e){const t=this.camera,n=Er*2*e.angle*this.focus,i=this.mapSize.width/this.mapSize.height,s=e.distance||t.far;(n!==t.fov||i!==t.aspect||s!==t.far)&&(t.fov=n,t.aspect=i,t.far=s,t.updateProjectionMatrix()),super.updateMatrices(e)}copy(e){return super.copy(e),this.focus=e.focus,this}}Nu.prototype.isSpotLightShadow=!0;class El extends Wt{constructor(e,t,n=0,i=Math.PI/3,s=0,o=1){super(e,t);this.type="SpotLight",this.position.copy(Ne.DefaultUp),this.updateMatrix(),this.target=new Ne,this.distance=n,this.angle=i,this.penumbra=s,this.decay=o,this.shadow=new Nu}get power(){return this.intensity*Math.PI}set power(e){this.intensity=e/Math.PI}dispose(){this.shadow.dispose()}copy(e){return super.copy(e),this.distance=e.distance,this.angle=e.angle,this.penumbra=e.penumbra,this.decay=e.decay,this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}El.prototype.isSpotLight=!0;const Ou=new Me,es=new L,Sl=new L;class zu extends bl{constructor(){super(new mt(90,1,.5,500));this._frameExtents=new te(4,2),this._viewportCount=6,this._viewports=[new qe(2,1,1,1),new qe(0,1,1,1),new qe(3,1,1,1),new qe(1,1,1,1),new qe(3,0,1,1),new qe(1,0,1,1)],this._cubeDirections=[new L(1,0,0),new L(-1,0,0),new L(0,0,1),new L(0,0,-1),new L(0,1,0),new L(0,-1,0)],this._cubeUps=[new L(0,1,0),new L(0,1,0),new L(0,1,0),new L(0,1,0),new L(0,0,1),new L(0,0,-1)]}updateMatrices(e,t=0){const n=this.camera,i=this.matrix,s=e.distance||n.far;s!==n.far&&(n.far=s,n.updateProjectionMatrix()),es.setFromMatrixPosition(e.matrixWorld),n.position.copy(es),Sl.copy(n.position),Sl.add(this._cubeDirections[t]),n.up.copy(this._cubeUps[t]),n.lookAt(Sl),n.updateMatrixWorld(),i.makeTranslation(-es.x,-es.y,-es.z),Ou.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Ou)}}zu.prototype.isPointLightShadow=!0;class Tl extends Wt{constructor(e,t,n=0,i=1){super(e,t);this.type="PointLight",this.distance=n,this.decay=i,this.shadow=new zu}get power(){return this.intensity*4*Math.PI}set power(e){this.intensity=e/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(e){return super.copy(e),this.distance=e.distance,this.decay=e.decay,this.shadow=e.shadow.clone(),this}}Tl.prototype.isPointLight=!0;class Hu extends bl{constructor(){super(new Dr(-5,5,5,-5,.5,500))}}Hu.prototype.isDirectionalLightShadow=!0;class Al extends Wt{constructor(e,t){super(e,t);this.type="DirectionalLight",this.position.copy(Ne.DefaultUp),this.updateMatrix(),this.target=new Ne,this.shadow=new Hu}dispose(){this.shadow.dispose()}copy(e){return super.copy(e),this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}Al.prototype.isDirectionalLight=!0;class Rl extends Wt{constructor(e,t){super(e,t);this.type="AmbientLight"}}Rl.prototype.isAmbientLight=!0;class Cl extends Wt{constructor(e,t,n=10,i=10){super(e,t);this.type="RectAreaLight",this.width=n,this.height=i}get power(){return this.intensity*this.width*this.height*Math.PI}set power(e){this.intensity=e/(this.width*this.height*Math.PI)}copy(e){return super.copy(e),this.width=e.width,this.height=e.height,this}toJSON(e){const t=super.toJSON(e);return t.object.width=this.width,t.object.height=this.height,t}}Cl.prototype.isRectAreaLight=!0;class Ll{constructor(){this.coefficients=[];for(let e=0;e<9;e++)this.coefficients.push(new L)}set(e){for(let t=0;t<9;t++)this.coefficients[t].copy(e[t]);return this}zero(){for(let e=0;e<9;e++)this.coefficients[e].set(0,0,0);return this}getAt(e,t){const n=e.x,i=e.y,s=e.z,o=this.coefficients;return t.copy(o[0]).multiplyScalar(.282095),t.addScaledVector(o[1],.488603*i),t.addScaledVector(o[2],.488603*s),t.addScaledVector(o[3],.488603*n),t.addScaledVector(o[4],1.092548*(n*i)),t.addScaledVector(o[5],1.092548*(i*s)),t.addScaledVector(o[6],.315392*(3*s*s-1)),t.addScaledVector(o[7],1.092548*(n*s)),t.addScaledVector(o[8],.546274*(n*n-i*i)),t}getIrradianceAt(e,t){const n=e.x,i=e.y,s=e.z,o=this.coefficients;return t.copy(o[0]).multiplyScalar(.886227),t.addScaledVector(o[1],2*.511664*i),t.addScaledVector(o[2],2*.511664*s),t.addScaledVector(o[3],2*.511664*n),t.addScaledVector(o[4],2*.429043*n*i),t.addScaledVector(o[5],2*.429043*i*s),t.addScaledVector(o[6],.743125*s*s-.247708),t.addScaledVector(o[7],2*.429043*n*s),t.addScaledVector(o[8],.429043*(n*n-i*i)),t}add(e){for(let t=0;t<9;t++)this.coefficients[t].add(e.coefficients[t]);return this}addScaledSH(e,t){for(let n=0;n<9;n++)this.coefficients[n].addScaledVector(e.coefficients[n],t);return this}scale(e){for(let t=0;t<9;t++)this.coefficients[t].multiplyScalar(e);return this}lerp(e,t){for(let n=0;n<9;n++)this.coefficients[n].lerp(e.coefficients[n],t);return this}equals(e){for(let t=0;t<9;t++)if(!this.coefficients[t].equals(e.coefficients[t]))return!1;return!0}copy(e){return this.set(e.coefficients)}clone(){return new this.constructor().copy(this)}fromArray(e,t=0){const n=this.coefficients;for(let i=0;i<9;i++)n[i].fromArray(e,t+i*3);return this}toArray(e=[],t=0){const n=this.coefficients;for(let i=0;i<9;i++)n[i].toArray(e,t+i*3);return e}static getBasisAt(e,t){const n=e.x,i=e.y,s=e.z;t[0]=.282095,t[1]=.488603*i,t[2]=.488603*s,t[3]=.488603*n,t[4]=1.092548*n*i,t[5]=1.092548*i*s,t[6]=.315392*(3*s*s-1),t[7]=1.092548*n*s,t[8]=.546274*(n*n-i*i)}}Ll.prototype.isSphericalHarmonics3=!0;class ts extends Wt{constructor(e=new Ll,t=1){super(void 0,t);this.sh=e}copy(e){return super.copy(e),this.sh.copy(e.sh),this}fromJSON(e){return this.intensity=e.intensity,this.sh.fromArray(e.sh),this}toJSON(e){const t=super.toJSON(e);return t.object.sh=this.sh.toArray(),t}}ts.prototype.isLightProbe=!0;class Gu extends Ct{constructor(e){super(e);this.textures={}}load(e,t,n,i){const s=this,o=new en(s.manager);o.setPath(s.path),o.setRequestHeader(s.requestHeader),o.setWithCredentials(s.withCredentials),o.load(e,function(a){try{t(s.parse(JSON.parse(a)))}catch(c){i?i(c):console.error(c),s.manager.itemError(e)}},n,i)}parse(e){const t=this.textures;function n(s){return t[s]===void 0&&console.warn("THREE.MaterialLoader: Undefined texture",s),t[s]}const i=ot.fromType(e.type);if(e.uuid!==void 0&&(i.uuid=e.uuid),e.name!==void 0&&(i.name=e.name),e.color!==void 0&&i.color!==void 0&&i.color.setHex(e.color),e.roughness!==void 0&&(i.roughness=e.roughness),e.metalness!==void 0&&(i.metalness=e.metalness),e.sheen!==void 0&&(i.sheen=e.sheen),e.sheenColor!==void 0&&(i.sheenColor=new ge().setHex(e.sheenColor)),e.sheenRoughness!==void 0&&(i.sheenRoughness=e.sheenRoughness),e.emissive!==void 0&&i.emissive!==void 0&&i.emissive.setHex(e.emissive),e.specular!==void 0&&i.specular!==void 0&&i.specular.setHex(e.specular),e.specularIntensity!==void 0&&(i.specularIntensity=e.specularIntensity),e.specularColor!==void 0&&i.specularColor!==void 0&&i.specularColor.setHex(e.specularColor),e.shininess!==void 0&&(i.shininess=e.shininess),e.clearcoat!==void 0&&(i.clearcoat=e.clearcoat),e.clearcoatRoughness!==void 0&&(i.clearcoatRoughness=e.clearcoatRoughness),e.transmission!==void 0&&(i.transmission=e.transmission),e.thickness!==void 0&&(i.thickness=e.thickness),e.attenuationDistance!==void 0&&(i.attenuationDistance=e.attenuationDistance),e.attenuationColor!==void 0&&i.attenuationColor!==void 0&&i.attenuationColor.setHex(e.attenuationColor),e.fog!==void 0&&(i.fog=e.fog),e.flatShading!==void 0&&(i.flatShading=e.flatShading),e.blending!==void 0&&(i.blending=e.blending),e.combine!==void 0&&(i.combine=e.combine),e.side!==void 0&&(i.side=e.side),e.shadowSide!==void 0&&(i.shadowSide=e.shadowSide),e.opacity!==void 0&&(i.opacity=e.opacity),e.transparent!==void 0&&(i.transparent=e.transparent),e.alphaTest!==void 0&&(i.alphaTest=e.alphaTest),e.depthTest!==void 0&&(i.depthTest=e.depthTest),e.depthWrite!==void 0&&(i.depthWrite=e.depthWrite),e.colorWrite!==void 0&&(i.colorWrite=e.colorWrite),e.stencilWrite!==void 0&&(i.stencilWrite=e.stencilWrite),e.stencilWriteMask!==void 0&&(i.stencilWriteMask=e.stencilWriteMask),e.stencilFunc!==void 0&&(i.stencilFunc=e.stencilFunc),e.stencilRef!==void 0&&(i.stencilRef=e.stencilRef),e.stencilFuncMask!==void 0&&(i.stencilFuncMask=e.stencilFuncMask),e.stencilFail!==void 0&&(i.stencilFail=e.stencilFail),e.stencilZFail!==void 0&&(i.stencilZFail=e.stencilZFail),e.stencilZPass!==void 0&&(i.stencilZPass=e.stencilZPass),e.wireframe!==void 0&&(i.wireframe=e.wireframe),e.wireframeLinewidth!==void 0&&(i.wireframeLinewidth=e.wireframeLinewidth),e.wireframeLinecap!==void 0&&(i.wireframeLinecap=e.wireframeLinecap),e.wireframeLinejoin!==void 0&&(i.wireframeLinejoin=e.wireframeLinejoin),e.rotation!==void 0&&(i.rotation=e.rotation),e.linewidth!==1&&(i.linewidth=e.linewidth),e.dashSize!==void 0&&(i.dashSize=e.dashSize),e.gapSize!==void 0&&(i.gapSize=e.gapSize),e.scale!==void 0&&(i.scale=e.scale),e.polygonOffset!==void 0&&(i.polygonOffset=e.polygonOffset),e.polygonOffsetFactor!==void 0&&(i.polygonOffsetFactor=e.polygonOffsetFactor),e.polygonOffsetUnits!==void 0&&(i.polygonOffsetUnits=e.polygonOffsetUnits),e.dithering!==void 0&&(i.dithering=e.dithering),e.alphaToCoverage!==void 0&&(i.alphaToCoverage=e.alphaToCoverage),e.premultipliedAlpha!==void 0&&(i.premultipliedAlpha=e.premultipliedAlpha),e.visible!==void 0&&(i.visible=e.visible),e.toneMapped!==void 0&&(i.toneMapped=e.toneMapped),e.userData!==void 0&&(i.userData=e.userData),e.vertexColors!==void 0&&(typeof e.vertexColors=="number"?i.vertexColors=e.vertexColors>0:i.vertexColors=e.vertexColors),e.uniforms!==void 0)for(const s in e.uniforms){const o=e.uniforms[s];switch(i.uniforms[s]={},o.type){case"t":i.uniforms[s].value=n(o.value);break;case"c":i.uniforms[s].value=new ge().setHex(o.value);break;case"v2":i.uniforms[s].value=new te().fromArray(o.value);break;case"v3":i.uniforms[s].value=new L().fromArray(o.value);break;case"v4":i.uniforms[s].value=new qe().fromArray(o.value);break;case"m3":i.uniforms[s].value=new ft().fromArray(o.value);break;case"m4":i.uniforms[s].value=new Me().fromArray(o.value);break;default:i.uniforms[s].value=o.value}}if(e.defines!==void 0&&(i.defines=e.defines),e.vertexShader!==void 0&&(i.vertexShader=e.vertexShader),e.fragmentShader!==void 0&&(i.fragmentShader=e.fragmentShader),e.extensions!==void 0)for(const s in e.extensions)i.extensions[s]=e.extensions[s];if(e.shading!==void 0&&(i.flatShading=e.shading===1),e.size!==void 0&&(i.size=e.size),e.sizeAttenuation!==void 0&&(i.sizeAttenuation=e.sizeAttenuation),e.map!==void 0&&(i.map=n(e.map)),e.matcap!==void 0&&(i.matcap=n(e.matcap)),e.alphaMap!==void 0&&(i.alphaMap=n(e.alphaMap)),e.bumpMap!==void 0&&(i.bumpMap=n(e.bumpMap)),e.bumpScale!==void 0&&(i.bumpScale=e.bumpScale),e.normalMap!==void 0&&(i.normalMap=n(e.normalMap)),e.normalMapType!==void 0&&(i.normalMapType=e.normalMapType),e.normalScale!==void 0){let s=e.normalScale;Array.isArray(s)===!1&&(s=[s,s]),i.normalScale=new te().fromArray(s)}return e.displacementMap!==void 0&&(i.displacementMap=n(e.displacementMap)),e.displacementScale!==void 0&&(i.displacementScale=e.displacementScale),e.displacementBias!==void 0&&(i.displacementBias=e.displacementBias),e.roughnessMap!==void 0&&(i.roughnessMap=n(e.roughnessMap)),e.metalnessMap!==void 0&&(i.metalnessMap=n(e.metalnessMap)),e.emissiveMap!==void 0&&(i.emissiveMap=n(e.emissiveMap)),e.emissiveIntensity!==void 0&&(i.emissiveIntensity=e.emissiveIntensity),e.specularMap!==void 0&&(i.specularMap=n(e.specularMap)),e.specularIntensityMap!==void 0&&(i.specularIntensityMap=n(e.specularIntensityMap)),e.specularColorMap!==void 0&&(i.specularColorMap=n(e.specularColorMap)),e.envMap!==void 0&&(i.envMap=n(e.envMap)),e.envMapIntensity!==void 0&&(i.envMapIntensity=e.envMapIntensity),e.reflectivity!==void 0&&(i.reflectivity=e.reflectivity),e.refractionRatio!==void 0&&(i.refractionRatio=e.refractionRatio),e.lightMap!==void 0&&(i.lightMap=n(e.lightMap)),e.lightMapIntensity!==void 0&&(i.lightMapIntensity=e.lightMapIntensity),e.aoMap!==void 0&&(i.aoMap=n(e.aoMap)),e.aoMapIntensity!==void 0&&(i.aoMapIntensity=e.aoMapIntensity),e.gradientMap!==void 0&&(i.gradientMap=n(e.gradientMap)),e.clearcoatMap!==void 0&&(i.clearcoatMap=n(e.clearcoatMap)),e.clearcoatRoughnessMap!==void 0&&(i.clearcoatRoughnessMap=n(e.clearcoatRoughnessMap)),e.clearcoatNormalMap!==void 0&&(i.clearcoatNormalMap=n(e.clearcoatNormalMap)),e.clearcoatNormalScale!==void 0&&(i.clearcoatNormalScale=new te().fromArray(e.clearcoatNormalScale)),e.transmissionMap!==void 0&&(i.transmissionMap=n(e.transmissionMap)),e.thicknessMap!==void 0&&(i.thicknessMap=n(e.thicknessMap)),e.sheenColorMap!==void 0&&(i.sheenColorMap=n(e.sheenColorMap)),e.sheenRoughnessMap!==void 0&&(i.sheenRoughnessMap=n(e.sheenRoughnessMap)),i}setTextures(e){return this.textures=e,this}}class _o{static decodeText(e){if(typeof TextDecoder!="undefined")return new TextDecoder().decode(e);let t="";for(let n=0,i=e.length;n<i;n++)t+=String.fromCharCode(e[n]);try{return decodeURIComponent(escape(t))}catch{return t}}static extractUrlBase(e){const t=e.lastIndexOf("/");return t===-1?"./":e.slice(0,t+1)}static resolveURL(e,t){return typeof e!="string"||e===""?"":(/^https?:\/\//i.test(t)&&/^\//.test(e)&&(t=t.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(e)||/^data:.*,.*$/i.test(e)||/^blob:.*$/i.test(e)?e:t+e)}}class Pl extends Se{constructor(){super();this.type="InstancedBufferGeometry",this.instanceCount=1/0}copy(e){return super.copy(e),this.instanceCount=e.instanceCount,this}clone(){return new this.constructor().copy(this)}toJSON(){const e=super.toJSON(this);return e.instanceCount=this.instanceCount,e.isInstancedBufferGeometry=!0,e}}Pl.prototype.isInstancedBufferGeometry=!0;class Vu extends Ct{constructor(e){super(e)}load(e,t,n,i){const s=this,o=new en(s.manager);o.setPath(s.path),o.setRequestHeader(s.requestHeader),o.setWithCredentials(s.withCredentials),o.load(e,function(a){try{t(s.parse(JSON.parse(a)))}catch(c){i?i(c):console.error(c),s.manager.itemError(e)}},n,i)}parse(e){const t={},n={};function i(p,g){if(t[g]!==void 0)return t[g];const b=p.interleavedBuffers[g],y=s(p,b.buffer),m=Ai(b.type,y),T=new ri(m,b.stride);return T.uuid=b.uuid,t[g]=T,T}function s(p,g){if(n[g]!==void 0)return n[g];const b=p.arrayBuffers[g],y=new Uint32Array(b).buffer;return n[g]=y,y}const o=e.isInstancedBufferGeometry?new Pl:new Se,a=e.data.index;if(a!==void 0){const p=Ai(a.type,a.array);o.setIndex(new He(p,1))}const c=e.data.attributes;for(const p in c){const g=c[p];let _;if(g.isInterleavedBufferAttribute){const b=i(e.data,g.data);_=new Fn(b,g.itemSize,g.offset,g.normalized)}else{const b=Ai(g.type,g.array),y=g.isInstancedBufferAttribute?oi:He;_=new y(b,g.itemSize,g.normalized)}g.name!==void 0&&(_.name=g.name),g.usage!==void 0&&_.setUsage(g.usage),g.updateRange!==void 0&&(_.updateRange.offset=g.updateRange.offset,_.updateRange.count=g.updateRange.count),o.setAttribute(p,_)}const h=e.data.morphAttributes;if(h)for(const p in h){const g=h[p],_=[];for(let b=0,y=g.length;b<y;b++){const m=g[b];let T;if(m.isInterleavedBufferAttribute){const E=i(e.data,m.data);T=new Fn(E,m.itemSize,m.offset,m.normalized)}else{const E=Ai(m.type,m.array);T=new He(E,m.itemSize,m.normalized)}m.name!==void 0&&(T.name=m.name),_.push(T)}o.morphAttributes[p]=_}e.data.morphTargetsRelative&&(o.morphTargetsRelative=!0);const d=e.data.groups||e.data.drawcalls||e.data.offsets;if(d!==void 0)for(let p=0,g=d.length;p!==g;++p){const _=d[p];o.addGroup(_.start,_.count,_.materialIndex)}const f=e.data.boundingSphere;if(f!==void 0){const p=new L;f.center!==void 0&&p.fromArray(f.center),o.boundingSphere=new Sn(p,f.radius)}return e.name&&(o.name=e.name),e.userData&&(o.userData=e.userData),o}}class $x extends Ct{constructor(e){super(e)}load(e,t,n,i){const s=this,o=this.path===""?_o.extractUrlBase(e):this.path;this.resourcePath=this.resourcePath||o;const a=new en(this.manager);a.setPath(this.path),a.setRequestHeader(this.requestHeader),a.setWithCredentials(this.withCredentials),a.load(e,function(c){let h=null;try{h=JSON.parse(c)}catch(d){i!==void 0&&i(d),console.error("THREE:ObjectLoader: Can't parse "+e+".",d.message);return}const u=h.metadata;if(u===void 0||u.type===void 0||u.type.toLowerCase()==="geometry"){console.error("THREE.ObjectLoader: Can't load "+e);return}s.parse(h,t)},n,i)}async loadAsync(e,t){const n=this,i=this.path===""?_o.extractUrlBase(e):this.path;this.resourcePath=this.resourcePath||i;const s=new en(this.manager);s.setPath(this.path),s.setRequestHeader(this.requestHeader),s.setWithCredentials(this.withCredentials);const o=await s.loadAsync(e,t),a=JSON.parse(o),c=a.metadata;if(c===void 0||c.type===void 0||c.type.toLowerCase()==="geometry")throw new Error("THREE.ObjectLoader: Can't load "+e);return await n.parseAsync(a)}parse(e,t){const n=this.parseAnimations(e.animations),i=this.parseShapes(e.shapes),s=this.parseGeometries(e.geometries,i),o=this.parseImages(e.images,function(){t!==void 0&&t(h)}),a=this.parseTextures(e.textures,o),c=this.parseMaterials(e.materials,a),h=this.parseObject(e.object,s,c,a,n),u=this.parseSkeletons(e.skeletons,h);if(this.bindSkeletons(h,u),t!==void 0){let d=!1;for(const f in o)if(o[f]instanceof HTMLImageElement){d=!0;break}d===!1&&t(h)}return h}async parseAsync(e){const t=this.parseAnimations(e.animations),n=this.parseShapes(e.shapes),i=this.parseGeometries(e.geometries,n),s=await this.parseImagesAsync(e.images),o=this.parseTextures(e.textures,s),a=this.parseMaterials(e.materials,o),c=this.parseObject(e.object,i,a,o,t),h=this.parseSkeletons(e.skeletons,c);return this.bindSkeletons(c,h),c}parseShapes(e){const t={};if(e!==void 0)for(let n=0,i=e.length;n<i;n++){const s=new Kt().fromJSON(e[n]);t[s.uuid]=s}return t}parseSkeletons(e,t){const n={},i={};if(t.traverse(function(s){s.isBone&&(i[s.uuid]=s)}),e!==void 0)for(let s=0,o=e.length;s<o;s++){const a=new to().fromJSON(e[s],i);n[a.uuid]=a}return n}parseGeometries(e,t){const n={};if(e!==void 0){const i=new Vu;for(let s=0,o=e.length;s<o;s++){let a;const c=e[s];switch(c.type){case"BufferGeometry":case"InstancedBufferGeometry":a=i.parse(c);break;case"Geometry":console.error("THREE.ObjectLoader: The legacy Geometry type is no longer supported.");break;default:c.type in Tu?a=Tu[c.type].fromJSON(c,t):console.warn(`THREE.ObjectLoader: Unsupported geometry type "${c.type}"`)}a.uuid=c.uuid,c.name!==void 0&&(a.name=c.name),a.isBufferGeometry===!0&&c.userData!==void 0&&(a.userData=c.userData),n[c.uuid]=a}}return n}parseMaterials(e,t){const n={},i={};if(e!==void 0){const s=new Gu;s.setTextures(t);for(let o=0,a=e.length;o<a;o++){const c=e[o];if(c.type==="MultiMaterial"){const h=[];for(let u=0;u<c.materials.length;u++){const d=c.materials[u];n[d.uuid]===void 0&&(n[d.uuid]=s.parse(d)),h.push(n[d.uuid])}i[c.uuid]=h}else n[c.uuid]===void 0&&(n[c.uuid]=s.parse(c)),i[c.uuid]=n[c.uuid]}}return i}parseAnimations(e){const t={};if(e!==void 0)for(let n=0;n<e.length;n++){const i=e[n],s=jr.parse(i);t[s.uuid]=s}return t}parseImages(e,t){const n=this,i={};let s;function o(c){return n.manager.itemStart(c),s.load(c,function(){n.manager.itemEnd(c)},void 0,function(){n.manager.itemError(c),n.manager.itemEnd(c)})}function a(c){if(typeof c=="string"){const h=c,u=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(h)?h:n.resourcePath+h;return o(u)}else return c.data?{data:Ai(c.type,c.data),width:c.width,height:c.height}:null}if(e!==void 0&&e.length>0){const c=new Ml(t);s=new Qr(c),s.setCrossOrigin(this.crossOrigin);for(let h=0,u=e.length;h<u;h++){const d=e[h],f=d.url;if(Array.isArray(f)){const p=[];for(let g=0,_=f.length;g<_;g++){const b=f[g],y=a(b);y!==null&&(y instanceof HTMLImageElement?p.push(y):p.push(new si(y.data,y.width,y.height)))}i[d.uuid]=new Li(p)}else{const p=a(d.url);i[d.uuid]=new Li(p)}}}return i}async parseImagesAsync(e){const t=this,n={};let i;async function s(o){if(typeof o=="string"){const a=o,c=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(a)?a:t.resourcePath+a;return await i.loadAsync(c)}else return o.data?{data:Ai(o.type,o.data),width:o.width,height:o.height}:null}if(e!==void 0&&e.length>0){i=new Qr(this.manager),i.setCrossOrigin(this.crossOrigin);for(let o=0,a=e.length;o<a;o++){const c=e[o],h=c.url;if(Array.isArray(h)){const u=[];for(let d=0,f=h.length;d<f;d++){const p=h[d],g=await s(p);g!==null&&(g instanceof HTMLImageElement?u.push(g):u.push(new si(g.data,g.width,g.height)))}n[c.uuid]=new Li(u)}else{const u=await s(c.url);n[c.uuid]=new Li(u)}}}return n}parseTextures(e,t){function n(s,o){return typeof s=="number"?s:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",s),o[s])}const i={};if(e!==void 0)for(let s=0,o=e.length;s<o;s++){const a=e[s];a.image===void 0&&console.warn('THREE.ObjectLoader: No "image" specified for',a.uuid),t[a.image]===void 0&&console.warn("THREE.ObjectLoader: Undefined image",a.image);const c=t[a.image],h=c.data;let u;Array.isArray(h)?(u=new Wi,h.length===6&&(u.needsUpdate=!0)):(h&&h.data?u=new si:u=new ut,h&&(u.needsUpdate=!0)),u.source=c,u.uuid=a.uuid,a.name!==void 0&&(u.name=a.name),a.mapping!==void 0&&(u.mapping=n(a.mapping,Kx)),a.offset!==void 0&&u.offset.fromArray(a.offset),a.repeat!==void 0&&u.repeat.fromArray(a.repeat),a.center!==void 0&&u.center.fromArray(a.center),a.rotation!==void 0&&(u.rotation=a.rotation),a.wrap!==void 0&&(u.wrapS=n(a.wrap[0],ku),u.wrapT=n(a.wrap[1],ku)),a.format!==void 0&&(u.format=a.format),a.type!==void 0&&(u.type=a.type),a.encoding!==void 0&&(u.encoding=a.encoding),a.minFilter!==void 0&&(u.minFilter=n(a.minFilter,Wu)),a.magFilter!==void 0&&(u.magFilter=n(a.magFilter,Wu)),a.anisotropy!==void 0&&(u.anisotropy=a.anisotropy),a.flipY!==void 0&&(u.flipY=a.flipY),a.premultiplyAlpha!==void 0&&(u.premultiplyAlpha=a.premultiplyAlpha),a.unpackAlignment!==void 0&&(u.unpackAlignment=a.unpackAlignment),a.userData!==void 0&&(u.userData=a.userData),i[a.uuid]=u}return i}parseObject(e,t,n,i,s){let o;function a(f){return t[f]===void 0&&console.warn("THREE.ObjectLoader: Undefined geometry",f),t[f]}function c(f){if(f!==void 0){if(Array.isArray(f)){const p=[];for(let g=0,_=f.length;g<_;g++){const b=f[g];n[b]===void 0&&console.warn("THREE.ObjectLoader: Undefined material",b),p.push(n[b])}return p}return n[f]===void 0&&console.warn("THREE.ObjectLoader: Undefined material",f),n[f]}}function h(f){return i[f]===void 0&&console.warn("THREE.ObjectLoader: Undefined texture",f),i[f]}let u,d;switch(e.type){case"Scene":o=new qs,e.background!==void 0&&(Number.isInteger(e.background)?o.background=new ge(e.background):o.background=h(e.background)),e.environment!==void 0&&(o.environment=h(e.environment)),e.fog!==void 0&&(e.fog.type==="Fog"?o.fog=new Br(e.fog.color,e.fog.near,e.fog.far):e.fog.type==="FogExp2"&&(o.fog=new Ur(e.fog.color,e.fog.density)));break;case"PerspectiveCamera":o=new mt(e.fov,e.aspect,e.near,e.far),e.focus!==void 0&&(o.focus=e.focus),e.zoom!==void 0&&(o.zoom=e.zoom),e.filmGauge!==void 0&&(o.filmGauge=e.filmGauge),e.filmOffset!==void 0&&(o.filmOffset=e.filmOffset),e.view!==void 0&&(o.view=Object.assign({},e.view));break;case"OrthographicCamera":o=new Dr(e.left,e.right,e.top,e.bottom,e.near,e.far),e.zoom!==void 0&&(o.zoom=e.zoom),e.view!==void 0&&(o.view=Object.assign({},e.view));break;case"AmbientLight":o=new Rl(e.color,e.intensity);break;case"DirectionalLight":o=new Al(e.color,e.intensity);break;case"PointLight":o=new Tl(e.color,e.intensity,e.distance,e.decay);break;case"RectAreaLight":o=new Cl(e.color,e.intensity,e.width,e.height);break;case"SpotLight":o=new El(e.color,e.intensity,e.distance,e.angle,e.penumbra,e.decay);break;case"HemisphereLight":o=new wl(e.color,e.groundColor,e.intensity);break;case"LightProbe":o=new ts().fromJSON(e);break;case"SkinnedMesh":u=a(e.geometry),d=c(e.material),o=new Qs(u,d),e.bindMode!==void 0&&(o.bindMode=e.bindMode),e.bindMatrix!==void 0&&o.bindMatrix.fromArray(e.bindMatrix),e.skeleton!==void 0&&(o.skeleton=e.skeleton);break;case"Mesh":u=a(e.geometry),d=c(e.material),o=new dt(u,d);break;case"InstancedMesh":u=a(e.geometry),d=c(e.material);const f=e.count,p=e.instanceMatrix,g=e.instanceColor;o=new qa(u,d,f),o.instanceMatrix=new oi(new Float32Array(p.array),16),g!==void 0&&(o.instanceColor=new oi(new Float32Array(g.array),g.itemSize));break;case"LOD":o=new jh;break;case"Line":o=new fn(a(e.geometry),c(e.material));break;case"LineLoop":o=new Za(a(e.geometry),c(e.material));break;case"LineSegments":o=new Lt(a(e.geometry),c(e.material));break;case"PointCloud":case"Points":o=new Gr(a(e.geometry),c(e.material));break;case"Sprite":o=new $s(c(e.material));break;case"Group":o=new ii;break;case"Bone":o=new eo;break;default:o=new Ne}if(o.uuid=e.uuid,e.name!==void 0&&(o.name=e.name),e.matrix!==void 0?(o.matrix.fromArray(e.matrix),e.matrixAutoUpdate!==void 0&&(o.matrixAutoUpdate=e.matrixAutoUpdate),o.matrixAutoUpdate&&o.matrix.decompose(o.position,o.quaternion,o.scale)):(e.position!==void 0&&o.position.fromArray(e.position),e.rotation!==void 0&&o.rotation.fromArray(e.rotation),e.quaternion!==void 0&&o.quaternion.fromArray(e.quaternion),e.scale!==void 0&&o.scale.fromArray(e.scale)),e.castShadow!==void 0&&(o.castShadow=e.castShadow),e.receiveShadow!==void 0&&(o.receiveShadow=e.receiveShadow),e.shadow&&(e.shadow.bias!==void 0&&(o.shadow.bias=e.shadow.bias),e.shadow.normalBias!==void 0&&(o.shadow.normalBias=e.shadow.normalBias),e.shadow.radius!==void 0&&(o.shadow.radius=e.shadow.radius),e.shadow.mapSize!==void 0&&o.shadow.mapSize.fromArray(e.shadow.mapSize),e.shadow.camera!==void 0&&(o.shadow.camera=this.parseObject(e.shadow.camera))),e.visible!==void 0&&(o.visible=e.visible),e.frustumCulled!==void 0&&(o.frustumCulled=e.frustumCulled),e.renderOrder!==void 0&&(o.renderOrder=e.renderOrder),e.userData!==void 0&&(o.userData=e.userData),e.layers!==void 0&&(o.layers.mask=e.layers),e.children!==void 0){const f=e.children;for(let p=0;p<f.length;p++)o.add(this.parseObject(f[p],t,n,i,s))}if(e.animations!==void 0){const f=e.animations;for(let p=0;p<f.length;p++){const g=f[p];o.animations.push(s[g])}}if(e.type==="LOD"){e.autoUpdate!==void 0&&(o.autoUpdate=e.autoUpdate);const f=e.levels;for(let p=0;p<f.length;p++){const g=f[p],_=o.getObjectByProperty("uuid",g.object);_!==void 0&&o.addLevel(_,g.distance)}}return o}bindSkeletons(e,t){Object.keys(t).length!==0&&e.traverse(function(n){if(n.isSkinnedMesh===!0&&n.skeleton!==void 0){const i=t[n.skeleton];i===void 0?console.warn("THREE.ObjectLoader: No skeleton found with UUID:",n.skeleton):n.bind(i,n.bindMatrix)}})}setTexturePath(e){return console.warn("THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath()."),this.setResourcePath(e)}}const Kx={UVMapping:os,CubeReflectionMapping:yn,CubeRefractionMapping:xn,EquirectangularReflectionMapping:mr,EquirectangularRefractionMapping:gr,CubeUVReflectionMapping:bi,CubeUVRefractionMapping:yr},ku={RepeatWrapping:xr,ClampToEdgeWrapping:Tt,MirroredRepeatWrapping:_r},Wu={NearestFilter:ht,NearestMipmapNearestFilter:as,NearestMipmapLinearFilter:ls,LinearFilter:et,LinearMipmapNearestFilter:Vo,LinearMipmapLinearFilter:kn};class Xu extends Ct{constructor(e){super(e);typeof createImageBitmap=="undefined"&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),typeof fetch=="undefined"&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.options={premultiplyAlpha:"none"}}setOptions(e){return this.options=e,this}load(e,t,n,i){e===void 0&&(e=""),this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const s=this,o=fi.get(e);if(o!==void 0)return s.manager.itemStart(e),setTimeout(function(){t&&t(o),s.manager.itemEnd(e)},0),o;const a={};a.credentials=this.crossOrigin==="anonymous"?"same-origin":"include",a.headers=this.requestHeader,fetch(e,a).then(function(c){return c.blob()}).then(function(c){return createImageBitmap(c,Object.assign(s.options,{colorSpaceConversion:"none"}))}).then(function(c){fi.add(e,c),t&&t(c),s.manager.itemEnd(e)}).catch(function(c){i&&i(c),s.manager.itemError(e),s.manager.itemEnd(e)}),s.manager.itemStart(e)}}Xu.prototype.isImageBitmapLoader=!0;let vo;const Il={getContext:function(){return vo===void 0&&(vo=new(window.AudioContext||window.webkitAudioContext)),vo},setContext:function(r){vo=r}};class qu extends Ct{constructor(e){super(e)}load(e,t,n,i){const s=this,o=new en(this.manager);o.setResponseType("arraybuffer"),o.setPath(this.path),o.setRequestHeader(this.requestHeader),o.setWithCredentials(this.withCredentials),o.load(e,function(a){try{const c=a.slice(0);Il.getContext().decodeAudioData(c,function(u){t(u)})}catch(c){i?i(c):console.error(c),s.manager.itemError(e)}},n,i)}}class Yu extends ts{constructor(e,t,n=1){super(void 0,n);const i=new ge().set(e),s=new ge().set(t),o=new L(i.r,i.g,i.b),a=new L(s.r,s.g,s.b),c=Math.sqrt(Math.PI),h=c*Math.sqrt(.75);this.sh.coefficients[0].copy(o).add(a).multiplyScalar(c),this.sh.coefficients[1].copy(o).sub(a).multiplyScalar(h)}}Yu.prototype.isHemisphereLightProbe=!0;class Zu extends ts{constructor(e,t=1){super(void 0,t);const n=new ge().set(e);this.sh.coefficients[0].set(n.r,n.g,n.b).multiplyScalar(2*Math.sqrt(Math.PI))}}Zu.prototype.isAmbientLightProbe=!0;const Ju=new Me,$u=new Me,pi=new Me;class jx{constructor(){this.type="StereoCamera",this.aspect=1,this.eyeSep=.064,this.cameraL=new mt,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new mt,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1,this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null}}update(e){const t=this._cache;if(t.focus!==e.focus||t.fov!==e.fov||t.aspect!==e.aspect*this.aspect||t.near!==e.near||t.far!==e.far||t.zoom!==e.zoom||t.eyeSep!==this.eyeSep){t.focus=e.focus,t.fov=e.fov,t.aspect=e.aspect*this.aspect,t.near=e.near,t.far=e.far,t.zoom=e.zoom,t.eyeSep=this.eyeSep,pi.copy(e.projectionMatrix);const i=t.eyeSep/2,s=i*t.near/t.focus,o=t.near*Math.tan($n*t.fov*.5)/t.zoom;let a,c;$u.elements[12]=-i,Ju.elements[12]=i,a=-o*t.aspect+s,c=o*t.aspect+s,pi.elements[0]=2*t.near/(c-a),pi.elements[8]=(c+a)/(c-a),this.cameraL.projectionMatrix.copy(pi),a=-o*t.aspect-s,c=o*t.aspect-s,pi.elements[0]=2*t.near/(c-a),pi.elements[8]=(c+a)/(c-a),this.cameraR.projectionMatrix.copy(pi)}this.cameraL.matrixWorld.copy(e.matrixWorld).multiply($u),this.cameraR.matrixWorld.copy(e.matrixWorld).multiply(Ju)}}class Ku{constructor(e=!0){this.autoStart=e,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}start(){this.startTime=ju(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0}stop(){this.getElapsedTime(),this.running=!1,this.autoStart=!1}getElapsedTime(){return this.getDelta(),this.elapsedTime}getDelta(){let e=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){const t=ju();e=(t-this.oldTime)/1e3,this.oldTime=t,this.elapsedTime+=e}return e}}function ju(){return(typeof performance=="undefined"?Date:performance).now()}const mi=new L,Qu=new vt,Qx=new L,gi=new L;class e_ extends Ne{constructor(){super();this.type="AudioListener",this.context=Il.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0,this._clock=new Ku}getInput(){return this.gain}removeFilter(){return this.filter!==null&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this}getFilter(){return this.filter}setFilter(e){return this.filter!==null?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=e,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this}getMasterVolume(){return this.gain.gain.value}setMasterVolume(e){return this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01),this}updateMatrixWorld(e){super.updateMatrixWorld(e);const t=this.context.listener,n=this.up;if(this.timeDelta=this._clock.getDelta(),this.matrixWorld.decompose(mi,Qu,Qx),gi.set(0,0,-1).applyQuaternion(Qu),t.positionX){const i=this.context.currentTime+this.timeDelta;t.positionX.linearRampToValueAtTime(mi.x,i),t.positionY.linearRampToValueAtTime(mi.y,i),t.positionZ.linearRampToValueAtTime(mi.z,i),t.forwardX.linearRampToValueAtTime(gi.x,i),t.forwardY.linearRampToValueAtTime(gi.y,i),t.forwardZ.linearRampToValueAtTime(gi.z,i),t.upX.linearRampToValueAtTime(n.x,i),t.upY.linearRampToValueAtTime(n.y,i),t.upZ.linearRampToValueAtTime(n.z,i)}else t.setPosition(mi.x,mi.y,mi.z),t.setOrientation(gi.x,gi.y,gi.z,n.x,n.y,n.z)}}class Dl extends Ne{constructor(e){super();this.type="Audio",this.listener=e,this.context=e.context,this.gain=this.context.createGain(),this.gain.connect(e.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.source=null,this.sourceType="empty",this._startedAt=0,this._progress=0,this._connected=!1,this.filters=[]}getOutput(){return this.gain}setNodeSource(e){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=e,this.connect(),this}setMediaElementSource(e){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(e),this.connect(),this}setMediaStreamSource(e){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(e),this.connect(),this}setBuffer(e){return this.buffer=e,this.sourceType="buffer",this.autoplay&&this.play(),this}play(e=0){if(this.isPlaying===!0){console.warn("THREE.Audio: Audio is already playing.");return}if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}this._startedAt=this.context.currentTime+e;const t=this.context.createBufferSource();return t.buffer=this.buffer,t.loop=this.loop,t.loopStart=this.loopStart,t.loopEnd=this.loopEnd,t.onended=this.onEnded.bind(this),t.start(this._startedAt,this._progress+this.offset,this.duration),this.isPlaying=!0,this.source=t,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}pause(){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.isPlaying===!0&&(this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,this.loop===!0&&(this._progress=this._progress%(this.duration||this.buffer.duration)),this.source.stop(),this.source.onended=null,this.isPlaying=!1),this}stop(){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this._progress=0,this.source.stop(),this.source.onended=null,this.isPlaying=!1,this}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let e=1,t=this.filters.length;e<t;e++)this.filters[e-1].connect(this.filters[e]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this._connected=!0,this}disconnect(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let e=1,t=this.filters.length;e<t;e++)this.filters[e-1].disconnect(this.filters[e]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this._connected=!1,this}getFilters(){return this.filters}setFilters(e){return e||(e=[]),this._connected===!0?(this.disconnect(),this.filters=e.slice(),this.connect()):this.filters=e.slice(),this}setDetune(e){if(this.detune=e,this.source.detune!==void 0)return this.isPlaying===!0&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(e){return this.setFilters(e?[e]:[])}setPlaybackRate(e){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.playbackRate=e,this.isPlaying===!0&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1}getLoop(){return this.hasPlaybackControl===!1?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop}setLoop(e){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.loop=e,this.isPlaying===!0&&(this.source.loop=this.loop),this}setLoopStart(e){return this.loopStart=e,this}setLoopEnd(e){return this.loopEnd=e,this}getVolume(){return this.gain.gain.value}setVolume(e){return this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01),this}}const yi=new L,ed=new vt,t_=new L,xi=new L;class n_ extends Dl{constructor(e){super(e);this.panner=this.context.createPanner(),this.panner.panningModel="HRTF",this.panner.connect(this.gain)}getOutput(){return this.panner}getRefDistance(){return this.panner.refDistance}setRefDistance(e){return this.panner.refDistance=e,this}getRolloffFactor(){return this.panner.rolloffFactor}setRolloffFactor(e){return this.panner.rolloffFactor=e,this}getDistanceModel(){return this.panner.distanceModel}setDistanceModel(e){return this.panner.distanceModel=e,this}getMaxDistance(){return this.panner.maxDistance}setMaxDistance(e){return this.panner.maxDistance=e,this}setDirectionalCone(e,t,n){return this.panner.coneInnerAngle=e,this.panner.coneOuterAngle=t,this.panner.coneOuterGain=n,this}updateMatrixWorld(e){if(super.updateMatrixWorld(e),this.hasPlaybackControl===!0&&this.isPlaying===!1)return;this.matrixWorld.decompose(yi,ed,t_),xi.set(0,0,1).applyQuaternion(ed);const t=this.panner;if(t.positionX){const n=this.context.currentTime+this.listener.timeDelta;t.positionX.linearRampToValueAtTime(yi.x,n),t.positionY.linearRampToValueAtTime(yi.y,n),t.positionZ.linearRampToValueAtTime(yi.z,n),t.orientationX.linearRampToValueAtTime(xi.x,n),t.orientationY.linearRampToValueAtTime(xi.y,n),t.orientationZ.linearRampToValueAtTime(xi.z,n)}else t.setPosition(yi.x,yi.y,yi.z),t.setOrientation(xi.x,xi.y,xi.z)}}class td{constructor(e,t=2048){this.analyser=e.context.createAnalyser(),this.analyser.fftSize=t,this.data=new Uint8Array(this.analyser.frequencyBinCount),e.getOutput().connect(this.analyser)}getFrequencyData(){return this.analyser.getByteFrequencyData(this.data),this.data}getAverageFrequency(){let e=0;const t=this.getFrequencyData();for(let n=0;n<t.length;n++)e+=t[n];return e/t.length}}class nd{constructor(e,t,n){this.binding=e,this.valueSize=n;let i,s,o;switch(t){case"quaternion":i=this._slerp,s=this._slerpAdditive,o=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(n*6),this._workIndex=5;break;case"string":case"bool":i=this._select,s=this._select,o=this._setAdditiveIdentityOther,this.buffer=new Array(n*5);break;default:i=this._lerp,s=this._lerpAdditive,o=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(n*5)}this._mixBufferRegion=i,this._mixBufferRegionAdditive=s,this._setIdentity=o,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}accumulate(e,t){const n=this.buffer,i=this.valueSize,s=e*i+i;let o=this.cumulativeWeight;if(o===0){for(let a=0;a!==i;++a)n[s+a]=n[a];o=t}else{o+=t;const a=t/o;this._mixBufferRegion(n,s,0,a,i)}this.cumulativeWeight=o}accumulateAdditive(e){const t=this.buffer,n=this.valueSize,i=n*this._addIndex;this.cumulativeWeightAdditive===0&&this._setIdentity(),this._mixBufferRegionAdditive(t,i,0,e,n),this.cumulativeWeightAdditive+=e}apply(e){const t=this.valueSize,n=this.buffer,i=e*t+t,s=this.cumulativeWeight,o=this.cumulativeWeightAdditive,a=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,s<1){const c=t*this._origIndex;this._mixBufferRegion(n,i,c,1-s,t)}o>0&&this._mixBufferRegionAdditive(n,i,this._addIndex*t,1,t);for(let c=t,h=t+t;c!==h;++c)if(n[c]!==n[c+t]){a.setValue(n,i);break}}saveOriginalState(){const e=this.binding,t=this.buffer,n=this.valueSize,i=n*this._origIndex;e.getValue(t,i);for(let s=n,o=i;s!==o;++s)t[s]=t[i+s%n];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0}restoreOriginalState(){const e=this.valueSize*3;this.binding.setValue(this.buffer,e)}_setAdditiveIdentityNumeric(){const e=this._addIndex*this.valueSize,t=e+this.valueSize;for(let n=e;n<t;n++)this.buffer[n]=0}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const e=this._origIndex*this.valueSize,t=this._addIndex*this.valueSize;for(let n=0;n<this.valueSize;n++)this.buffer[t+n]=this.buffer[e+n]}_select(e,t,n,i,s){if(i>=.5)for(let o=0;o!==s;++o)e[t+o]=e[n+o]}_slerp(e,t,n,i){vt.slerpFlat(e,t,e,t,e,n,i)}_slerpAdditive(e,t,n,i,s){const o=this._workIndex*s;vt.multiplyQuaternionsFlat(e,o,e,t,e,n),vt.slerpFlat(e,t,e,t,e,o,i)}_lerp(e,t,n,i,s){const o=1-i;for(let a=0;a!==s;++a){const c=t+a;e[c]=e[c]*o+e[n+a]*i}}_lerpAdditive(e,t,n,i,s){for(let o=0;o!==s;++o){const a=t+o;e[a]=e[a]+e[n+o]*i}}}const Fl="\\[\\]\\.:\\/",i_=new RegExp("["+Fl+"]","g"),Ul="[^"+Fl+"]",r_="[^"+Fl.replace("\\.","")+"]",s_=/((?:WC+[\/:])*)/.source.replace("WC",Ul),o_=/(WCOD+)?/.source.replace("WCOD",r_),a_=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",Ul),l_=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",Ul),c_=new RegExp("^"+s_+o_+a_+l_+"$"),h_=["material","materials","bones"];class u_{constructor(e,t,n){const i=n||ke.parseTrackName(t);this._targetGroup=e,this._bindings=e.subscribe_(t,i)}getValue(e,t){this.bind();const n=this._targetGroup.nCachedObjects_,i=this._bindings[n];i!==void 0&&i.getValue(e,t)}setValue(e,t){const n=this._bindings;for(let i=this._targetGroup.nCachedObjects_,s=n.length;i!==s;++i)n[i].setValue(e,t)}bind(){const e=this._bindings;for(let t=this._targetGroup.nCachedObjects_,n=e.length;t!==n;++t)e[t].bind()}unbind(){const e=this._bindings;for(let t=this._targetGroup.nCachedObjects_,n=e.length;t!==n;++t)e[t].unbind()}}class ke{constructor(e,t,n){this.path=t,this.parsedPath=n||ke.parseTrackName(t),this.node=ke.findNode(e,this.parsedPath.nodeName)||e,this.rootNode=e,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(e,t,n){return e&&e.isAnimationObjectGroup?new ke.Composite(e,t,n):new ke(e,t,n)}static sanitizeNodeName(e){return e.replace(/\s/g,"_").replace(i_,"")}static parseTrackName(e){const t=c_.exec(e);if(t===null)throw new Error("PropertyBinding: Cannot parse trackName: "+e);const n={nodeName:t[2],objectName:t[3],objectIndex:t[4],propertyName:t[5],propertyIndex:t[6]},i=n.nodeName&&n.nodeName.lastIndexOf(".");if(i!==void 0&&i!==-1){const s=n.nodeName.substring(i+1);h_.indexOf(s)!==-1&&(n.nodeName=n.nodeName.substring(0,i),n.objectName=s)}if(n.propertyName===null||n.propertyName.length===0)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+e);return n}static findNode(e,t){if(t===void 0||t===""||t==="."||t===-1||t===e.name||t===e.uuid)return e;if(e.skeleton){const n=e.skeleton.getBoneByName(t);if(n!==void 0)return n}if(e.children){const n=function(s){for(let o=0;o<s.length;o++){const a=s[o];if(a.name===t||a.uuid===t)return a;const c=n(a.children);if(c)return c}return null},i=n(e.children);if(i)return i}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(e,t){e[t]=this.targetObject[this.propertyName]}_getValue_array(e,t){const n=this.resolvedProperty;for(let i=0,s=n.length;i!==s;++i)e[t++]=n[i]}_getValue_arrayElement(e,t){e[t]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(e,t){this.resolvedProperty.toArray(e,t)}_setValue_direct(e,t){this.targetObject[this.propertyName]=e[t]}_setValue_direct_setNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(e,t){const n=this.resolvedProperty;for(let i=0,s=n.length;i!==s;++i)n[i]=e[t++]}_setValue_array_setNeedsUpdate(e,t){const n=this.resolvedProperty;for(let i=0,s=n.length;i!==s;++i)n[i]=e[t++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(e,t){const n=this.resolvedProperty;for(let i=0,s=n.length;i!==s;++i)n[i]=e[t++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(e,t){this.resolvedProperty[this.propertyIndex]=e[t]}_setValue_arrayElement_setNeedsUpdate(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(e,t){this.resolvedProperty.fromArray(e,t)}_setValue_fromArray_setNeedsUpdate(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(e,t){this.bind(),this.getValue(e,t)}_setValue_unbound(e,t){this.bind(),this.setValue(e,t)}bind(){let e=this.node;const t=this.parsedPath,n=t.objectName,i=t.propertyName;let s=t.propertyIndex;if(e||(e=ke.findNode(this.rootNode,t.nodeName)||this.rootNode,this.node=e),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!e){console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.");return}if(n){let h=t.objectIndex;switch(n){case"materials":if(!e.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!e.material.materials){console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);return}e=e.material.materials;break;case"bones":if(!e.skeleton){console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);return}e=e.skeleton.bones;for(let u=0;u<e.length;u++)if(e[u].name===h){h=u;break}break;default:if(e[n]===void 0){console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);return}e=e[n]}if(h!==void 0){if(e[h]===void 0){console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,e);return}e=e[h]}}const o=e[i];if(o===void 0){const h=t.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+h+"."+i+" but it wasn't found.",e);return}let a=this.Versioning.None;this.targetObject=e,e.needsUpdate!==void 0?a=this.Versioning.NeedsUpdate:e.matrixWorldNeedsUpdate!==void 0&&(a=this.Versioning.MatrixWorldNeedsUpdate);let c=this.BindingType.Direct;if(s!==void 0){if(i==="morphTargetInfluences"){if(!e.geometry){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);return}if(e.geometry.isBufferGeometry){if(!e.geometry.morphAttributes){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);return}e.morphTargetDictionary[s]!==void 0&&(s=e.morphTargetDictionary[s])}else{console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.",this);return}}c=this.BindingType.ArrayElement,this.resolvedProperty=o,this.propertyIndex=s}else o.fromArray!==void 0&&o.toArray!==void 0?(c=this.BindingType.HasFromToArray,this.resolvedProperty=o):Array.isArray(o)?(c=this.BindingType.EntireArray,this.resolvedProperty=o):this.propertyName=i;this.getValue=this.GetterByBindingType[c],this.setValue=this.SetterByBindingTypeAndVersioning[c][a]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}ke.Composite=u_;ke.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3};ke.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2};ke.prototype.GetterByBindingType=[ke.prototype._getValue_direct,ke.prototype._getValue_array,ke.prototype._getValue_arrayElement,ke.prototype._getValue_toArray];ke.prototype.SetterByBindingTypeAndVersioning=[[ke.prototype._setValue_direct,ke.prototype._setValue_direct_setNeedsUpdate,ke.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[ke.prototype._setValue_array,ke.prototype._setValue_array_setNeedsUpdate,ke.prototype._setValue_array_setMatrixWorldNeedsUpdate],[ke.prototype._setValue_arrayElement,ke.prototype._setValue_arrayElement_setNeedsUpdate,ke.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[ke.prototype._setValue_fromArray,ke.prototype._setValue_fromArray_setNeedsUpdate,ke.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];class id{constructor(){this.uuid=Pt(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;const e={};this._indicesByUUID=e;for(let n=0,i=arguments.length;n!==i;++n)e[arguments[n].uuid]=n;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};const t=this;this.stats={objects:{get total(){return t._objects.length},get inUse(){return this.total-t.nCachedObjects_}},get bindingsPerObject(){return t._bindings.length}}}add(){const e=this._objects,t=this._indicesByUUID,n=this._paths,i=this._parsedPaths,s=this._bindings,o=s.length;let a,c=e.length,h=this.nCachedObjects_;for(let u=0,d=arguments.length;u!==d;++u){const f=arguments[u],p=f.uuid;let g=t[p];if(g===void 0){g=c++,t[p]=g,e.push(f);for(let _=0,b=o;_!==b;++_)s[_].push(new ke(f,n[_],i[_]))}else if(g<h){a=e[g];const _=--h,b=e[_];t[b.uuid]=g,e[g]=b,t[p]=_,e[_]=f;for(let y=0,m=o;y!==m;++y){const T=s[y],E=T[_];let S=T[g];T[g]=E,S===void 0&&(S=new ke(f,n[y],i[y])),T[_]=S}}else e[g]!==a&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=h}remove(){const e=this._objects,t=this._indicesByUUID,n=this._bindings,i=n.length;let s=this.nCachedObjects_;for(let o=0,a=arguments.length;o!==a;++o){const c=arguments[o],h=c.uuid,u=t[h];if(u!==void 0&&u>=s){const d=s++,f=e[d];t[f.uuid]=u,e[u]=f,t[h]=d,e[d]=c;for(let p=0,g=i;p!==g;++p){const _=n[p],b=_[d],y=_[u];_[u]=b,_[d]=y}}}this.nCachedObjects_=s}uncache(){const e=this._objects,t=this._indicesByUUID,n=this._bindings,i=n.length;let s=this.nCachedObjects_,o=e.length;for(let a=0,c=arguments.length;a!==c;++a){const h=arguments[a],u=h.uuid,d=t[u];if(d!==void 0)if(delete t[u],d<s){const f=--s,p=e[f],g=--o,_=e[g];t[p.uuid]=d,e[d]=p,t[_.uuid]=f,e[f]=_,e.pop();for(let b=0,y=i;b!==y;++b){const m=n[b],T=m[f],E=m[g];m[d]=T,m[f]=E,m.pop()}}else{const f=--o,p=e[f];f>0&&(t[p.uuid]=d),e[d]=p,e.pop();for(let g=0,_=i;g!==_;++g){const b=n[g];b[d]=b[f],b.pop()}}}this.nCachedObjects_=s}subscribe_(e,t){const n=this._bindingsIndicesByPath;let i=n[e];const s=this._bindings;if(i!==void 0)return s[i];const o=this._paths,a=this._parsedPaths,c=this._objects,h=c.length,u=this.nCachedObjects_,d=new Array(h);i=s.length,n[e]=i,o.push(e),a.push(t),s.push(d);for(let f=u,p=c.length;f!==p;++f){const g=c[f];d[f]=new ke(g,e,t)}return d}unsubscribe_(e){const t=this._bindingsIndicesByPath,n=t[e];if(n!==void 0){const i=this._paths,s=this._parsedPaths,o=this._bindings,a=o.length-1,c=o[a],h=e[a];t[h]=n,o[n]=c,o.pop(),s[n]=s[a],s.pop(),i[n]=i[a],i.pop()}}}id.prototype.isAnimationObjectGroup=!0;class d_{constructor(e,t,n=null,i=t.blendMode){this._mixer=e,this._clip=t,this._localRoot=n,this.blendMode=i;const s=t.tracks,o=s.length,a=new Array(o),c={endingStart:Yn,endingEnd:Yn};for(let h=0;h!==o;++h){const u=s[h].createInterpolant(null);a[h]=u,u.settings=c}this._interpolantSettings=c,this._interpolants=a,this._propertyBindings=new Array(o),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=Nc,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&this.timeScale!==0&&this._startTime===null&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(e){return this._startTime=e,this}setLoop(e,t){return this.loop=e,this.repetitions=t,this}setEffectiveWeight(e){return this.weight=e,this._effectiveWeight=this.enabled?e:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(e){return this._scheduleFading(e,0,1)}fadeOut(e){return this._scheduleFading(e,1,0)}crossFadeFrom(e,t,n){if(e.fadeOut(t),this.fadeIn(t),n){const i=this._clip.duration,s=e._clip.duration,o=s/i,a=i/s;e.warp(1,o,t),this.warp(a,1,t)}return this}crossFadeTo(e,t,n){return e.crossFadeFrom(this,t,n)}stopFading(){const e=this._weightInterpolant;return e!==null&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this}setEffectiveTimeScale(e){return this.timeScale=e,this._effectiveTimeScale=this.paused?0:e,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(e){return this.timeScale=this._clip.duration/e,this.stopWarping()}syncWith(e){return this.time=e.time,this.timeScale=e.timeScale,this.stopWarping()}halt(e){return this.warp(this._effectiveTimeScale,0,e)}warp(e,t,n){const i=this._mixer,s=i.time,o=this.timeScale;let a=this._timeScaleInterpolant;a===null&&(a=i._lendControlInterpolant(),this._timeScaleInterpolant=a);const c=a.parameterPositions,h=a.sampleValues;return c[0]=s,c[1]=s+n,h[0]=e/o,h[1]=t/o,this}stopWarping(){const e=this._timeScaleInterpolant;return e!==null&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(e,t,n,i){if(!this.enabled){this._updateWeight(e);return}const s=this._startTime;if(s!==null){const c=(e-s)*n;if(c<0||n===0)return;this._startTime=null,t=n*c}t*=this._updateTimeScale(e);const o=this._updateTime(t),a=this._updateWeight(e);if(a>0){const c=this._interpolants,h=this._propertyBindings;switch(this.blendMode){case ha:for(let u=0,d=c.length;u!==d;++u)c[u].evaluate(o),h[u].accumulateAdditive(a);break;case ps:default:for(let u=0,d=c.length;u!==d;++u)c[u].evaluate(o),h[u].accumulate(i,a)}}}_updateWeight(e){let t=0;if(this.enabled){t=this.weight;const n=this._weightInterpolant;if(n!==null){const i=n.evaluate(e)[0];t*=i,e>n.parameterPositions[1]&&(this.stopFading(),i===0&&(this.enabled=!1))}}return this._effectiveWeight=t,t}_updateTimeScale(e){let t=0;if(!this.paused){t=this.timeScale;const n=this._timeScaleInterpolant;n!==null&&(t*=n.evaluate(e)[0],e>n.parameterPositions[1]&&(this.stopWarping(),t===0?this.paused=!0:this.timeScale=t))}return this._effectiveTimeScale=t,t}_updateTime(e){const t=this._clip.duration,n=this.loop;let i=this.time+e,s=this._loopCount;const o=n===Oc;if(e===0)return s===-1?i:o&&(s&1)==1?t-i:i;if(n===Bc){s===-1&&(this._loopCount=0,this._setEndings(!0,!0,!1));e:{if(i>=t)i=t;else if(i<0)i=0;else{this.time=i;break e}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=i,this._mixer.dispatchEvent({type:"finished",action:this,direction:e<0?-1:1})}}else{if(s===-1&&(e>=0?(s=0,this._setEndings(!0,this.repetitions===0,o)):this._setEndings(this.repetitions===0,!0,o)),i>=t||i<0){const a=Math.floor(i/t);i-=t*a,s+=Math.abs(a);const c=this.repetitions-s;if(c<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,i=e>0?t:0,this.time=i,this._mixer.dispatchEvent({type:"finished",action:this,direction:e>0?1:-1});else{if(c===1){const h=e<0;this._setEndings(h,!h,o)}else this._setEndings(!1,!1,o);this._loopCount=s,this.time=i,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:a})}}else this.time=i;if(o&&(s&1)==1)return t-i}return i}_setEndings(e,t,n){const i=this._interpolantSettings;n?(i.endingStart=Zn,i.endingEnd=Zn):(e?i.endingStart=this.zeroSlopeAtStart?Zn:Yn:i.endingStart=br,t?i.endingEnd=this.zeroSlopeAtEnd?Zn:Yn:i.endingEnd=br)}_scheduleFading(e,t,n){const i=this._mixer,s=i.time;let o=this._weightInterpolant;o===null&&(o=i._lendControlInterpolant(),this._weightInterpolant=o);const a=o.parameterPositions,c=o.sampleValues;return a[0]=s,c[0]=t,a[1]=s+e,c[1]=n,this}}class rd extends Mn{constructor(e){super();this._root=e,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}_bindAction(e,t){const n=e._localRoot||this._root,i=e._clip.tracks,s=i.length,o=e._propertyBindings,a=e._interpolants,c=n.uuid,h=this._bindingsByRootAndName;let u=h[c];u===void 0&&(u={},h[c]=u);for(let d=0;d!==s;++d){const f=i[d],p=f.name;let g=u[p];if(g!==void 0)++g.referenceCount,o[d]=g;else{if(g=o[d],g!==void 0){g._cacheIndex===null&&(++g.referenceCount,this._addInactiveBinding(g,c,p));continue}const _=t&&t._propertyBindings[d].binding.parsedPath;g=new nd(ke.create(n,p,_),f.ValueTypeName,f.getValueSize()),++g.referenceCount,this._addInactiveBinding(g,c,p),o[d]=g}a[d].resultBuffer=g.buffer}}_activateAction(e){if(!this._isActiveAction(e)){if(e._cacheIndex===null){const n=(e._localRoot||this._root).uuid,i=e._clip.uuid,s=this._actionsByClip[i];this._bindAction(e,s&&s.knownActions[0]),this._addInactiveAction(e,i,n)}const t=e._propertyBindings;for(let n=0,i=t.length;n!==i;++n){const s=t[n];s.useCount++==0&&(this._lendBinding(s),s.saveOriginalState())}this._lendAction(e)}}_deactivateAction(e){if(this._isActiveAction(e)){const t=e._propertyBindings;for(let n=0,i=t.length;n!==i;++n){const s=t[n];--s.useCount==0&&(s.restoreOriginalState(),this._takeBackBinding(s))}this._takeBackAction(e)}}_initMemoryManager(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;const e=this;this.stats={actions:{get total(){return e._actions.length},get inUse(){return e._nActiveActions}},bindings:{get total(){return e._bindings.length},get inUse(){return e._nActiveBindings}},controlInterpolants:{get total(){return e._controlInterpolants.length},get inUse(){return e._nActiveControlInterpolants}}}}_isActiveAction(e){const t=e._cacheIndex;return t!==null&&t<this._nActiveActions}_addInactiveAction(e,t,n){const i=this._actions,s=this._actionsByClip;let o=s[t];if(o===void 0)o={knownActions:[e],actionByRoot:{}},e._byClipCacheIndex=0,s[t]=o;else{const a=o.knownActions;e._byClipCacheIndex=a.length,a.push(e)}e._cacheIndex=i.length,i.push(e),o.actionByRoot[n]=e}_removeInactiveAction(e){const t=this._actions,n=t[t.length-1],i=e._cacheIndex;n._cacheIndex=i,t[i]=n,t.pop(),e._cacheIndex=null;const s=e._clip.uuid,o=this._actionsByClip,a=o[s],c=a.knownActions,h=c[c.length-1],u=e._byClipCacheIndex;h._byClipCacheIndex=u,c[u]=h,c.pop(),e._byClipCacheIndex=null;const d=a.actionByRoot,f=(e._localRoot||this._root).uuid;delete d[f],c.length===0&&delete o[s],this._removeInactiveBindingsForAction(e)}_removeInactiveBindingsForAction(e){const t=e._propertyBindings;for(let n=0,i=t.length;n!==i;++n){const s=t[n];--s.referenceCount==0&&this._removeInactiveBinding(s)}}_lendAction(e){const t=this._actions,n=e._cacheIndex,i=this._nActiveActions++,s=t[i];e._cacheIndex=i,t[i]=e,s._cacheIndex=n,t[n]=s}_takeBackAction(e){const t=this._actions,n=e._cacheIndex,i=--this._nActiveActions,s=t[i];e._cacheIndex=i,t[i]=e,s._cacheIndex=n,t[n]=s}_addInactiveBinding(e,t,n){const i=this._bindingsByRootAndName,s=this._bindings;let o=i[t];o===void 0&&(o={},i[t]=o),o[n]=e,e._cacheIndex=s.length,s.push(e)}_removeInactiveBinding(e){const t=this._bindings,n=e.binding,i=n.rootNode.uuid,s=n.path,o=this._bindingsByRootAndName,a=o[i],c=t[t.length-1],h=e._cacheIndex;c._cacheIndex=h,t[h]=c,t.pop(),delete a[s],Object.keys(a).length===0&&delete o[i]}_lendBinding(e){const t=this._bindings,n=e._cacheIndex,i=this._nActiveBindings++,s=t[i];e._cacheIndex=i,t[i]=e,s._cacheIndex=n,t[n]=s}_takeBackBinding(e){const t=this._bindings,n=e._cacheIndex,i=--this._nActiveBindings,s=t[i];e._cacheIndex=i,t[i]=e,s._cacheIndex=n,t[n]=s}_lendControlInterpolant(){const e=this._controlInterpolants,t=this._nActiveControlInterpolants++;let n=e[t];return n===void 0&&(n=new _l(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer),n.__cacheIndex=t,e[t]=n),n}_takeBackControlInterpolant(e){const t=this._controlInterpolants,n=e.__cacheIndex,i=--this._nActiveControlInterpolants,s=t[i];e.__cacheIndex=i,t[i]=e,s.__cacheIndex=n,t[n]=s}clipAction(e,t,n){const i=t||this._root,s=i.uuid;let o=typeof e=="string"?jr.findByName(i,e):e;const a=o!==null?o.uuid:e,c=this._actionsByClip[a];let h=null;if(n===void 0&&(o!==null?n=o.blendMode:n=ps),c!==void 0){const d=c.actionByRoot[s];if(d!==void 0&&d.blendMode===n)return d;h=c.knownActions[0],o===null&&(o=h._clip)}if(o===null)return null;const u=new d_(this,o,t,n);return this._bindAction(u,h),this._addInactiveAction(u,a,s),u}existingAction(e,t){const n=t||this._root,i=n.uuid,s=typeof e=="string"?jr.findByName(n,e):e,o=s?s.uuid:e,a=this._actionsByClip[o];return a!==void 0&&a.actionByRoot[i]||null}stopAllAction(){const e=this._actions,t=this._nActiveActions;for(let n=t-1;n>=0;--n)e[n].stop();return this}update(e){e*=this.timeScale;const t=this._actions,n=this._nActiveActions,i=this.time+=e,s=Math.sign(e),o=this._accuIndex^=1;for(let h=0;h!==n;++h)t[h]._update(i,e,s,o);const a=this._bindings,c=this._nActiveBindings;for(let h=0;h!==c;++h)a[h].apply(o);return this}setTime(e){this.time=0;for(let t=0;t<this._actions.length;t++)this._actions[t].time=0;return this.update(e)}getRoot(){return this._root}uncacheClip(e){const t=this._actions,n=e.uuid,i=this._actionsByClip,s=i[n];if(s!==void 0){const o=s.knownActions;for(let a=0,c=o.length;a!==c;++a){const h=o[a];this._deactivateAction(h);const u=h._cacheIndex,d=t[t.length-1];h._cacheIndex=null,h._byClipCacheIndex=null,d._cacheIndex=u,t[u]=d,t.pop(),this._removeInactiveBindingsForAction(h)}delete i[n]}}uncacheRoot(e){const t=e.uuid,n=this._actionsByClip;for(const o in n){const a=n[o].actionByRoot,c=a[t];c!==void 0&&(this._deactivateAction(c),this._removeInactiveAction(c))}const i=this._bindingsByRootAndName,s=i[t];if(s!==void 0)for(const o in s){const a=s[o];a.restoreOriginalState(),this._removeInactiveBinding(a)}}uncacheAction(e,t){const n=this.existingAction(e,t);n!==null&&(this._deactivateAction(n),this._removeInactiveAction(n))}}rd.prototype._controlInterpolantsResultBuffer=new Float32Array(1);class Mo{constructor(e){typeof e=="string"&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),e=arguments[1]),this.value=e}clone(){return new Mo(this.value.clone===void 0?this.value:this.value.clone())}}class sd extends ri{constructor(e,t,n=1){super(e,t);this.meshPerAttribute=n}copy(e){return super.copy(e),this.meshPerAttribute=e.meshPerAttribute,this}clone(e){const t=super.clone(e);return t.meshPerAttribute=this.meshPerAttribute,t}toJSON(e){const t=super.toJSON(e);return t.isInstancedInterleavedBuffer=!0,t.meshPerAttribute=this.meshPerAttribute,t}}sd.prototype.isInstancedInterleavedBuffer=!0;class od{constructor(e,t,n,i,s){this.buffer=e,this.type=t,this.itemSize=n,this.elementSize=i,this.count=s,this.version=0}set needsUpdate(e){e===!0&&this.version++}setBuffer(e){return this.buffer=e,this}setType(e,t){return this.type=e,this.elementSize=t,this}setItemSize(e){return this.itemSize=e,this}setCount(e){return this.count=e,this}}od.prototype.isGLBufferAttribute=!0;class f_{constructor(e,t,n=0,i=1/0){this.ray=new An(e,t),this.near=n,this.far=i,this.camera=null,this.layers=new Ts,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(e,t){this.ray.set(e,t)}setFromCamera(e,t){t.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(e.x,e.y,.5).unproject(t).sub(this.ray.origin).normalize(),this.camera=t):t.isOrthographicCamera?(this.ray.origin.set(e.x,e.y,(t.near+t.far)/(t.near-t.far)).unproject(t),this.ray.direction.set(0,0,-1).transformDirection(t.matrixWorld),this.camera=t):console.error("THREE.Raycaster: Unsupported camera type: "+t.type)}intersectObject(e,t=!0,n=[]){return Bl(e,this,n,t),n.sort(ad),n}intersectObjects(e,t=!0,n=[]){for(let i=0,s=e.length;i<s;i++)Bl(e[i],this,n,t);return n.sort(ad),n}}function ad(r,e){return r.distance-e.distance}function Bl(r,e,t,n){if(r.layers.test(e.layers)&&r.raycast(e,t),n===!0){const i=r.children;for(let s=0,o=i.length;s<o;s++)Bl(i[s],e,t,!0)}}class p_{constructor(e=1,t=0,n=0){return this.radius=e,this.phi=t,this.theta=n,this}set(e,t,n){return this.radius=e,this.phi=t,this.theta=n,this}copy(e){return this.radius=e.radius,this.phi=e.phi,this.theta=e.theta,this}makeSafe(){const e=1e-6;return this.phi=Math.max(e,Math.min(Math.PI-e,this.phi)),this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,t,n){return this.radius=Math.sqrt(e*e+t*t+n*n),this.radius===0?(this.theta=0,this.phi=0):(this.theta=Math.atan2(e,n),this.phi=Math.acos(_t(t/this.radius,-1,1))),this}clone(){return new this.constructor().copy(this)}}class m_{constructor(e=1,t=0,n=0){return this.radius=e,this.theta=t,this.y=n,this}set(e,t,n){return this.radius=e,this.theta=t,this.y=n,this}copy(e){return this.radius=e.radius,this.theta=e.theta,this.y=e.y,this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,t,n){return this.radius=Math.sqrt(e*e+n*n),this.theta=Math.atan2(e,n),this.y=t,this}clone(){return new this.constructor().copy(this)}}const ld=new te;class ur{constructor(e=new te(1/0,1/0),t=new te(-1/0,-1/0)){this.min=e,this.max=t}set(e,t){return this.min.copy(e),this.max.copy(t),this}setFromPoints(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t++)this.expandByPoint(e[t]);return this}setFromCenterAndSize(e,t){const n=ld.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(n),this.max.copy(e).add(n),this}clone(){return new this.constructor().copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y}getCenter(e){return this.isEmpty()?e.set(0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}containsPoint(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y)}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y}getParameter(e,t){return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y))}intersectsBox(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y)}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return ld.copy(e).clamp(this.min,this.max).sub(e).length()}intersect(e){return this.min.max(e.min),this.max.min(e.max),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}ur.prototype.isBox2=!0;const cd=new L,wo=new L;class hd{constructor(e=new L,t=new L){this.start=e,this.end=t}set(e,t){return this.start.copy(e),this.end.copy(t),this}copy(e){return this.start.copy(e.start),this.end.copy(e.end),this}getCenter(e){return e.addVectors(this.start,this.end).multiplyScalar(.5)}delta(e){return e.subVectors(this.end,this.start)}distanceSq(){return this.start.distanceToSquared(this.end)}distance(){return this.start.distanceTo(this.end)}at(e,t){return this.delta(t).multiplyScalar(e).add(this.start)}closestPointToPointParameter(e,t){cd.subVectors(e,this.start),wo.subVectors(this.end,this.start);const n=wo.dot(wo);let s=wo.dot(cd)/n;return t&&(s=_t(s,0,1)),s}closestPointToPoint(e,t,n){const i=this.closestPointToPointParameter(e,t);return this.delta(n).multiplyScalar(i).add(this.start)}applyMatrix4(e){return this.start.applyMatrix4(e),this.end.applyMatrix4(e),this}equals(e){return e.start.equals(this.start)&&e.end.equals(this.end)}clone(){return new this.constructor().copy(this)}}const ud=new L;class g_ extends Ne{constructor(e,t){super();this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=t;const n=new Se,i=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1];for(let o=0,a=1,c=32;o<c;o++,a++){const h=o/c*Math.PI*2,u=a/c*Math.PI*2;i.push(Math.cos(h),Math.sin(h),1,Math.cos(u),Math.sin(u),1)}n.setAttribute("position",new ve(i,3));const s=new gt({fog:!1,toneMapped:!1});this.cone=new Lt(n,s),this.add(this.cone),this.update()}dispose(){this.cone.geometry.dispose(),this.cone.material.dispose()}update(){this.light.updateMatrixWorld();const e=this.light.distance?this.light.distance:1e3,t=e*Math.tan(this.light.angle);this.cone.scale.set(t,t,e),ud.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(ud),this.color!==void 0?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)}}const Nn=new L,bo=new Me,Nl=new Me;class dd extends Lt{constructor(e){const t=fd(e),n=new Se,i=[],s=[],o=new ge(0,0,1),a=new ge(0,1,0);for(let h=0;h<t.length;h++){const u=t[h];u.parent&&u.parent.isBone&&(i.push(0,0,0),i.push(0,0,0),s.push(o.r,o.g,o.b),s.push(a.r,a.g,a.b))}n.setAttribute("position",new ve(i,3)),n.setAttribute("color",new ve(s,3));const c=new gt({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0});super(n,c);this.type="SkeletonHelper",this.isSkeletonHelper=!0,this.root=e,this.bones=t,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1}updateMatrixWorld(e){const t=this.bones,n=this.geometry,i=n.getAttribute("position");Nl.copy(this.root.matrixWorld).invert();for(let s=0,o=0;s<t.length;s++){const a=t[s];a.parent&&a.parent.isBone&&(bo.multiplyMatrices(Nl,a.matrixWorld),Nn.setFromMatrixPosition(bo),i.setXYZ(o,Nn.x,Nn.y,Nn.z),bo.multiplyMatrices(Nl,a.parent.matrixWorld),Nn.setFromMatrixPosition(bo),i.setXYZ(o+1,Nn.x,Nn.y,Nn.z),o+=2)}n.getAttribute("position").needsUpdate=!0,super.updateMatrixWorld(e)}}function fd(r){const e=[];r.isBone===!0&&e.push(r);for(let t=0;t<r.children.length;t++)e.push.apply(e,fd(r.children[t]));return e}class y_ extends dt{constructor(e,t,n){const i=new hi(t,4,2),s=new un({wireframe:!0,fog:!1,toneMapped:!1});super(i,s);this.light=e,this.light.updateMatrixWorld(),this.color=n,this.type="PointLightHelper",this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}dispose(){this.geometry.dispose(),this.material.dispose()}update(){this.color!==void 0?this.material.color.set(this.color):this.material.color.copy(this.light.color)}}const x_=new L,pd=new ge,md=new ge;class __ extends Ne{constructor(e,t,n){super();this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=n;const i=new li(t);i.rotateY(Math.PI*.5),this.material=new un({wireframe:!0,fog:!1,toneMapped:!1}),this.color===void 0&&(this.material.vertexColors=!0);const s=i.getAttribute("position"),o=new Float32Array(s.count*3);i.setAttribute("color",new He(o,3)),this.add(new dt(i,this.material)),this.update()}dispose(){this.children[0].geometry.dispose(),this.children[0].material.dispose()}update(){const e=this.children[0];if(this.color!==void 0)this.material.color.set(this.color);else{const t=e.geometry.getAttribute("color");pd.copy(this.light.color),md.copy(this.light.groundColor);for(let n=0,i=t.count;n<i;n++){const s=n<i/2?pd:md;t.setXYZ(n,s.r,s.g,s.b)}t.needsUpdate=!0}e.lookAt(x_.setFromMatrixPosition(this.light.matrixWorld).negate())}}class gd extends Lt{constructor(e=10,t=10,n=4473924,i=8947848){n=new ge(n),i=new ge(i);const s=t/2,o=e/t,a=e/2,c=[],h=[];for(let f=0,p=0,g=-a;f<=t;f++,g+=o){c.push(-a,0,g,a,0,g),c.push(g,0,-a,g,0,a);const _=f===s?n:i;_.toArray(h,p),p+=3,_.toArray(h,p),p+=3,_.toArray(h,p),p+=3,_.toArray(h,p),p+=3}const u=new Se;u.setAttribute("position",new ve(c,3)),u.setAttribute("color",new ve(h,3));const d=new gt({vertexColors:!0,toneMapped:!1});super(u,d);this.type="GridHelper"}}class v_ extends Lt{constructor(e=10,t=16,n=8,i=64,s=4473924,o=8947848){s=new ge(s),o=new ge(o);const a=[],c=[];for(let d=0;d<=t;d++){const f=d/t*(Math.PI*2),p=Math.sin(f)*e,g=Math.cos(f)*e;a.push(0,0,0),a.push(p,0,g);const _=d&1?s:o;c.push(_.r,_.g,_.b),c.push(_.r,_.g,_.b)}for(let d=0;d<=n;d++){const f=d&1?s:o,p=e-e/n*d;for(let g=0;g<i;g++){let _=g/i*(Math.PI*2),b=Math.sin(_)*p,y=Math.cos(_)*p;a.push(b,0,y),c.push(f.r,f.g,f.b),_=(g+1)/i*(Math.PI*2),b=Math.sin(_)*p,y=Math.cos(_)*p,a.push(b,0,y),c.push(f.r,f.g,f.b)}}const h=new Se;h.setAttribute("position",new ve(a,3)),h.setAttribute("color",new ve(c,3));const u=new gt({vertexColors:!0,toneMapped:!1});super(h,u);this.type="PolarGridHelper"}}const yd=new L,Eo=new L,xd=new L;class M_ extends Ne{constructor(e,t,n){super();this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=n,t===void 0&&(t=1);let i=new Se;i.setAttribute("position",new ve([-t,t,0,t,t,0,t,-t,0,-t,-t,0,-t,t,0],3));const s=new gt({fog:!1,toneMapped:!1});this.lightPlane=new fn(i,s),this.add(this.lightPlane),i=new Se,i.setAttribute("position",new ve([0,0,0,0,0,1],3)),this.targetLine=new fn(i,s),this.add(this.targetLine),this.update()}dispose(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()}update(){yd.setFromMatrixPosition(this.light.matrixWorld),Eo.setFromMatrixPosition(this.light.target.matrixWorld),xd.subVectors(Eo,yd),this.lightPlane.lookAt(Eo),this.color!==void 0?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(Eo),this.targetLine.scale.z=xd.length()}}const So=new L,it=new Pr;class w_ extends Lt{constructor(e){const t=new Se,n=new gt({color:16777215,vertexColors:!0,toneMapped:!1}),i=[],s=[],o={},a=new ge(16755200),c=new ge(16711680),h=new ge(43775),u=new ge(16777215),d=new ge(3355443);f("n1","n2",a),f("n2","n4",a),f("n4","n3",a),f("n3","n1",a),f("f1","f2",a),f("f2","f4",a),f("f4","f3",a),f("f3","f1",a),f("n1","f1",a),f("n2","f2",a),f("n3","f3",a),f("n4","f4",a),f("p","n1",c),f("p","n2",c),f("p","n3",c),f("p","n4",c),f("u1","u2",h),f("u2","u3",h),f("u3","u1",h),f("c","t",u),f("p","c",d),f("cn1","cn2",d),f("cn3","cn4",d),f("cf1","cf2",d),f("cf3","cf4",d);function f(g,_,b){p(g,b),p(_,b)}function p(g,_){i.push(0,0,0),s.push(_.r,_.g,_.b),o[g]===void 0&&(o[g]=[]),o[g].push(i.length/3-1)}t.setAttribute("position",new ve(i,3)),t.setAttribute("color",new ve(s,3));super(t,n);this.type="CameraHelper",this.camera=e,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=o,this.update()}update(){const e=this.geometry,t=this.pointMap,n=1,i=1;it.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse),lt("c",t,e,it,0,0,-1),lt("t",t,e,it,0,0,1),lt("n1",t,e,it,-n,-i,-1),lt("n2",t,e,it,n,-i,-1),lt("n3",t,e,it,-n,i,-1),lt("n4",t,e,it,n,i,-1),lt("f1",t,e,it,-n,-i,1),lt("f2",t,e,it,n,-i,1),lt("f3",t,e,it,-n,i,1),lt("f4",t,e,it,n,i,1),lt("u1",t,e,it,n*.7,i*1.1,-1),lt("u2",t,e,it,-n*.7,i*1.1,-1),lt("u3",t,e,it,0,i*2,-1),lt("cf1",t,e,it,-n,0,1),lt("cf2",t,e,it,n,0,1),lt("cf3",t,e,it,0,-i,1),lt("cf4",t,e,it,0,i,1),lt("cn1",t,e,it,-n,0,-1),lt("cn2",t,e,it,n,0,-1),lt("cn3",t,e,it,0,-i,-1),lt("cn4",t,e,it,0,i,-1),e.getAttribute("position").needsUpdate=!0}dispose(){this.geometry.dispose(),this.material.dispose()}}function lt(r,e,t,n,i,s,o){So.set(i,s,o).unproject(n);const a=e[r];if(a!==void 0){const c=t.getAttribute("position");for(let h=0,u=a.length;h<u;h++)c.setXYZ(a[h],So.x,So.y,So.z)}}const To=new It;class _d extends Lt{constructor(e,t=16776960){const n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),i=new Float32Array(8*3),s=new Se;s.setIndex(new He(n,1)),s.setAttribute("position",new He(i,3));super(s,new gt({color:t,toneMapped:!1}));this.object=e,this.type="BoxHelper",this.matrixAutoUpdate=!1,this.update()}update(e){if(e!==void 0&&console.warn("THREE.BoxHelper: .update() has no longer arguments."),this.object!==void 0&&To.setFromObject(this.object),To.isEmpty())return;const t=To.min,n=To.max,i=this.geometry.attributes.position,s=i.array;s[0]=n.x,s[1]=n.y,s[2]=n.z,s[3]=t.x,s[4]=n.y,s[5]=n.z,s[6]=t.x,s[7]=t.y,s[8]=n.z,s[9]=n.x,s[10]=t.y,s[11]=n.z,s[12]=n.x,s[13]=n.y,s[14]=t.z,s[15]=t.x,s[16]=n.y,s[17]=t.z,s[18]=t.x,s[19]=t.y,s[20]=t.z,s[21]=n.x,s[22]=t.y,s[23]=t.z,i.needsUpdate=!0,this.geometry.computeBoundingSphere()}setFromObject(e){return this.object=e,this.update(),this}copy(e){return Lt.prototype.copy.call(this,e),this.object=e.object,this}}class b_ extends Lt{constructor(e,t=16776960){const n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),i=[1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],s=new Se;s.setIndex(new He(n,1)),s.setAttribute("position",new ve(i,3));super(s,new gt({color:t,toneMapped:!1}));this.box=e,this.type="Box3Helper",this.geometry.computeBoundingSphere()}updateMatrixWorld(e){const t=this.box;t.isEmpty()||(t.getCenter(this.position),t.getSize(this.scale),this.scale.multiplyScalar(.5),super.updateMatrixWorld(e))}}class E_ extends fn{constructor(e,t=1,n=16776960){const i=n,s=[1,-1,1,-1,1,1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,0,0,1,0,0,0],o=new Se;o.setAttribute("position",new ve(s,3)),o.computeBoundingSphere();super(o,new gt({color:i,toneMapped:!1}));this.type="PlaneHelper",this.plane=e,this.size=t;const a=[1,1,1,-1,1,1,-1,-1,1,1,1,1,-1,-1,1,1,-1,1],c=new Se;c.setAttribute("position",new ve(a,3)),c.computeBoundingSphere(),this.add(new dt(c,new un({color:i,opacity:.2,transparent:!0,depthWrite:!1,toneMapped:!1})))}updateMatrixWorld(e){let t=-this.plane.constant;Math.abs(t)<1e-8&&(t=1e-8),this.scale.set(.5*this.size,.5*this.size,t),this.children[0].material.side=t<0?rt:zn,this.lookAt(this.plane.normal),super.updateMatrixWorld(e)}}const vd=new L;let Ao,Ol;class S_ extends Ne{constructor(e=new L(0,0,1),t=new L(0,0,0),n=1,i=16776960,s=n*.2,o=s*.2){super();this.type="ArrowHelper",Ao===void 0&&(Ao=new Se,Ao.setAttribute("position",new ve([0,0,0,0,1,0],3)),Ol=new Un(0,.5,1,5,1),Ol.translate(0,-.5,0)),this.position.copy(t),this.line=new fn(Ao,new gt({color:i,toneMapped:!1})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new dt(Ol,new un({color:i,toneMapped:!1})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(e),this.setLength(n,s,o)}setDirection(e){if(e.y>.99999)this.quaternion.set(0,0,0,1);else if(e.y<-.99999)this.quaternion.set(1,0,0,0);else{vd.set(e.z,0,-e.x).normalize();const t=Math.acos(e.y);this.quaternion.setFromAxisAngle(vd,t)}}setLength(e,t=e*.2,n=t*.2){this.line.scale.set(1,Math.max(1e-4,e-t),1),this.line.updateMatrix(),this.cone.scale.set(n,t,n),this.cone.position.y=e,this.cone.updateMatrix()}setColor(e){this.line.material.color.set(e),this.cone.material.color.set(e)}copy(e){return super.copy(e,!1),this.line.copy(e.line),this.cone.copy(e.cone),this}}class Md extends Lt{constructor(e=1){const t=[0,0,0,e,0,0,0,0,0,0,e,0,0,0,0,0,0,e],n=[1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],i=new Se;i.setAttribute("position",new ve(t,3)),i.setAttribute("color",new ve(n,3));const s=new gt({vertexColors:!0,toneMapped:!1});super(i,s);this.type="AxesHelper"}setColors(e,t,n){const i=new ge,s=this.geometry.attributes.color.array;return i.set(e),i.toArray(s,0),i.toArray(s,3),i.set(t),i.toArray(s,6),i.toArray(s,9),i.set(n),i.toArray(s,12),i.toArray(s,15),this.geometry.attributes.color.needsUpdate=!0,this}dispose(){this.geometry.dispose(),this.material.dispose()}}class T_{constructor(){this.type="ShapePath",this.color=new ge,this.subPaths=[],this.currentPath=null}moveTo(e,t){return this.currentPath=new qr,this.subPaths.push(this.currentPath),this.currentPath.moveTo(e,t),this}lineTo(e,t){return this.currentPath.lineTo(e,t),this}quadraticCurveTo(e,t,n,i){return this.currentPath.quadraticCurveTo(e,t,n,i),this}bezierCurveTo(e,t,n,i,s,o){return this.currentPath.bezierCurveTo(e,t,n,i,s,o),this}splineThru(e){return this.currentPath.splineThru(e),this}toShapes(e,t){function n(m){const T=[];for(let E=0,S=m.length;E<S;E++){const D=m[E],U=new Kt;U.curves=D.curves,T.push(U)}return T}function i(m,T){const E=T.length;let S=!1;for(let D=E-1,U=0;U<E;D=U++){let N=T[D],Z=T[U],z=Z.x-N.x,A=Z.y-N.y;if(Math.abs(A)>Number.EPSILON){if(A<0&&(N=T[U],z=-z,Z=T[D],A=-A),m.y<N.y||m.y>Z.y)continue;if(m.y===N.y){if(m.x===N.x)return!0}else{const F=A*(m.x-N.x)-z*(m.y-N.y);if(F===0)return!0;if(F<0)continue;S=!S}}else{if(m.y!==N.y)continue;if(Z.x<=m.x&&m.x<=N.x||N.x<=m.x&&m.x<=Z.x)return!0}}return S}const s=jt.isClockWise,o=this.subPaths;if(o.length===0)return[];if(t===!0)return n(o);let a,c,h;const u=[];if(o.length===1)return c=o[0],h=new Kt,h.curves=c.curves,u.push(h),u;let d=!s(o[0].getPoints());d=e?!d:d;const f=[],p=[];let g=[],_=0,b;p[_]=void 0,g[_]=[];for(let m=0,T=o.length;m<T;m++)c=o[m],b=c.getPoints(),a=s(b),a=e?!a:a,a?(!d&&p[_]&&_++,p[_]={s:new Kt,p:b},p[_].s.curves=c.curves,d&&_++,g[_]=[]):g[_].push({h:c,p:b[0]});if(!p[0])return n(o);if(p.length>1){let m=!1,T=0;for(let E=0,S=p.length;E<S;E++)f[E]=[];for(let E=0,S=p.length;E<S;E++){const D=g[E];for(let U=0;U<D.length;U++){const N=D[U];let Z=!0;for(let z=0;z<p.length;z++)i(N.p,p[z].p)&&(E!==z&&T++,Z?(Z=!1,f[z].push(N)):m=!0);Z&&f[E].push(N)}}T>0&&m===!1&&(g=f)}let y;for(let m=0,T=p.length;m<T;m++){h=p[m].s,u.push(h),y=g[m];for(let E=0,S=y.length;E<S;E++)h.holes.push(y[E].h)}return u}}const wd=new Float32Array(1),A_=new Int32Array(wd.buffer);class R_{static toHalfFloat(e){e>65504&&(console.warn("THREE.DataUtils.toHalfFloat(): value exceeds 65504."),e=65504),wd[0]=e;const t=A_[0];let n=t>>16&32768,i=t>>12&2047;const s=t>>23&255;return s<103?n:s>142?(n|=31744,n|=(s==255?0:1)&&t&8388607,n):s<113?(i|=2048,n|=(i>>114-s)+(i>>113-s&1),n):(n|=s-112<<10|i>>1,n+=i&1,n)}}const C_=0,L_=1,P_=0,I_=1,D_=2;function F_(r){return console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead."),r}function U_(r=[]){return console.warn("THREE.MultiMaterial has been removed. Use an Array instead."),r.isMultiMaterial=!0,r.materials=r,r.clone=function(){return r.slice()},r}function B_(r,e){return console.warn("THREE.PointCloud has been renamed to THREE.Points."),new Gr(r,e)}function N_(r){return console.warn("THREE.Particle has been renamed to THREE.Sprite."),new $s(r)}function O_(r,e){return console.warn("THREE.ParticleSystem has been renamed to THREE.Points."),new Gr(r,e)}function z_(r){return console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial."),new ai(r)}function H_(r){return console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial."),new ai(r)}function G_(r){return console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial."),new ai(r)}function V_(r,e,t){return console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead."),new L(r,e,t)}function k_(r,e){return console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead."),new He(r,e).setUsage(Ti)}function W_(r,e){return console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead."),new ah(r,e)}function X_(r,e){return console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead."),new lh(r,e)}function q_(r,e){return console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead."),new ch(r,e)}function Y_(r,e){return console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead."),new hh(r,e)}function Z_(r,e){return console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead."),new Cs(r,e)}function J_(r,e){return console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead."),new uh(r,e)}function $_(r,e){return console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead."),new Ls(r,e)}function K_(r,e){return console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead."),new ve(r,e)}function j_(r,e){return console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead."),new fh(r,e)}Ut.create=function(r,e){return console.log("THREE.Curve.create() has been deprecated"),r.prototype=Object.create(Ut.prototype),r.prototype.constructor=r,r.prototype.getPoint=e,r};qr.prototype.fromPoints=function(r){return console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."),this.setFromPoints(r)};function Q_(r){return console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper."),new Md(r)}function e0(r,e){return console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead."),new _d(r,e)}function t0(r,e){return console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead."),new Lt(new ja(r.geometry),new gt({color:e!==void 0?e:16777215}))}gd.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")};dd.prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")};function n0(r,e){return console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead."),new Lt(new cl(r.geometry),new gt({color:e!==void 0?e:16777215}))}Ct.prototype.extractUrlBase=function(r){return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."),_o.extractUrlBase(r)};Ct.Handlers={add:function(){console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.")},get:function(){console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.")}};function i0(r){return console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader."),new en(r)}function r0(r){return console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader."),new Iu(r)}ur.prototype.center=function(r){return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."),this.getCenter(r)};ur.prototype.empty=function(){return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),this.isEmpty()};ur.prototype.isIntersectionBox=function(r){return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(r)};ur.prototype.size=function(r){return console.warn("THREE.Box2: .size() has been renamed to .getSize()."),this.getSize(r)};It.prototype.center=function(r){return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."),this.getCenter(r)};It.prototype.empty=function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()};It.prototype.isIntersectionBox=function(r){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(r)};It.prototype.isIntersectionSphere=function(r){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(r)};It.prototype.size=function(r){return console.warn("THREE.Box3: .size() has been renamed to .getSize()."),this.getSize(r)};Cn.prototype.toVector3=function(){console.error("THREE.Euler: .toVector3() has been removed. Use Vector3.setFromEuler() instead")};Sn.prototype.empty=function(){return console.warn("THREE.Sphere: .empty() has been renamed to .isEmpty()."),this.isEmpty()};Ir.prototype.setFromMatrix=function(r){return console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix()."),this.setFromProjectionMatrix(r)};hd.prototype.center=function(r){return console.warn("THREE.Line3: .center() has been renamed to .getCenter()."),this.getCenter(r)};ft.prototype.flattenToArrayOffset=function(r,e){return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(r,e)};ft.prototype.multiplyVector3=function(r){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),r.applyMatrix3(this)};ft.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")};ft.prototype.applyToBufferAttribute=function(r){return console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead."),r.applyMatrix3(this)};ft.prototype.applyToVector3Array=function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")};ft.prototype.getInverse=function(r){return console.warn("THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),this.copy(r).invert()};Me.prototype.extractPosition=function(r){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(r)};Me.prototype.flattenToArrayOffset=function(r,e){return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(r,e)};Me.prototype.getPosition=function(){return console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),new L().setFromMatrixColumn(this,3)};Me.prototype.setRotationFromQuaternion=function(r){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(r)};Me.prototype.multiplyToArray=function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")};Me.prototype.multiplyVector3=function(r){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."),r.applyMatrix4(this)};Me.prototype.multiplyVector4=function(r){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),r.applyMatrix4(this)};Me.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")};Me.prototype.rotateAxis=function(r){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),r.transformDirection(this)};Me.prototype.crossVector=function(r){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),r.applyMatrix4(this)};Me.prototype.translate=function(){console.error("THREE.Matrix4: .translate() has been removed.")};Me.prototype.rotateX=function(){console.error("THREE.Matrix4: .rotateX() has been removed.")};Me.prototype.rotateY=function(){console.error("THREE.Matrix4: .rotateY() has been removed.")};Me.prototype.rotateZ=function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")};Me.prototype.rotateByAxis=function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")};Me.prototype.applyToBufferAttribute=function(r){return console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead."),r.applyMatrix4(this)};Me.prototype.applyToVector3Array=function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")};Me.prototype.makeFrustum=function(r,e,t,n,i,s){return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."),this.makePerspective(r,e,n,t,i,s)};Me.prototype.getInverse=function(r){return console.warn("THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),this.copy(r).invert()};Jt.prototype.isIntersectionLine=function(r){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(r)};vt.prototype.multiplyVector3=function(r){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),r.applyQuaternion(this)};vt.prototype.inverse=function(){return console.warn("THREE.Quaternion: .inverse() has been renamed to invert()."),this.invert()};An.prototype.isIntersectionBox=function(r){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(r)};An.prototype.isIntersectionPlane=function(r){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(r)};An.prototype.isIntersectionSphere=function(r){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(r)};st.prototype.area=function(){return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."),this.getArea()};st.prototype.barycoordFromPoint=function(r,e){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),this.getBarycoord(r,e)};st.prototype.midpoint=function(r){return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."),this.getMidpoint(r)};st.prototypenormal=function(r){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),this.getNormal(r)};st.prototype.plane=function(r){return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."),this.getPlane(r)};st.barycoordFromPoint=function(r,e,t,n,i){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),st.getBarycoord(r,e,t,n,i)};st.normal=function(r,e,t,n){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),st.getNormal(r,e,t,n)};Kt.prototype.extractAllPoints=function(r){return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."),this.extractPoints(r)};Kt.prototype.extrude=function(r){return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."),new Qt(this,r)};Kt.prototype.makeGeometry=function(r){return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."),new ci(this,r)};te.prototype.fromAttribute=function(r,e,t){return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(r,e,t)};te.prototype.distanceToManhattan=function(r){return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(r)};te.prototype.lengthManhattan=function(){return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()};L.prototype.setEulerFromRotationMatrix=function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")};L.prototype.setEulerFromQuaternion=function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")};L.prototype.getPositionFromMatrix=function(r){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(r)};L.prototype.getScaleFromMatrix=function(r){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(r)};L.prototype.getColumnFromMatrix=function(r,e){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(e,r)};L.prototype.applyProjection=function(r){return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."),this.applyMatrix4(r)};L.prototype.fromAttribute=function(r,e,t){return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(r,e,t)};L.prototype.distanceToManhattan=function(r){return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(r)};L.prototype.lengthManhattan=function(){return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()};qe.prototype.fromAttribute=function(r,e,t){return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(r,e,t)};qe.prototype.lengthManhattan=function(){return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()};Ne.prototype.getChildByName=function(r){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(r)};Ne.prototype.renderDepth=function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")};Ne.prototype.translate=function(r,e){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(e,r)};Ne.prototype.getWorldRotation=function(){console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")};Ne.prototype.applyMatrix=function(r){return console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(r)};Object.defineProperties(Ne.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(r){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=r}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}});dt.prototype.setDrawMode=function(){console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")};Object.defineProperties(dt.prototype,{drawMode:{get:function(){return console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode."),zc},set:function(){console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")}}});Qs.prototype.initBones=function(){console.error("THREE.SkinnedMesh: initBones() has been removed.")};mt.prototype.setLens=function(r,e){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),e!==void 0&&(this.filmGauge=e),this.setFocalLength(r)};Object.defineProperties(Wt.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(r){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=r}},shadowCameraLeft:{set:function(r){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=r}},shadowCameraRight:{set:function(r){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=r}},shadowCameraTop:{set:function(r){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=r}},shadowCameraBottom:{set:function(r){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=r}},shadowCameraNear:{set:function(r){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=r}},shadowCameraFar:{set:function(r){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=r}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(r){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=r}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(r){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=r}},shadowMapHeight:{set:function(r){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=r}}});Object.defineProperties(He.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."),this.array.length}},dynamic:{get:function(){return console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.usage===Ti},set:function(){console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.setUsage(Ti)}}});He.prototype.setDynamic=function(r){return console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(r===!0?Ti:Si),this};He.prototype.copyIndicesArray=function(){console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")},He.prototype.setArray=function(){console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")};Se.prototype.addIndex=function(r){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(r)};Se.prototype.addAttribute=function(r,e){return console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute()."),!(e&&e.isBufferAttribute)&&!(e&&e.isInterleavedBufferAttribute)?(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.setAttribute(r,new He(arguments[1],arguments[2]))):r==="index"?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),this.setIndex(e),this):this.setAttribute(r,e)};Se.prototype.addDrawCall=function(r,e,t){t!==void 0&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(r,e)};Se.prototype.clearDrawCalls=function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()};Se.prototype.computeOffsets=function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")};Se.prototype.removeAttribute=function(r){return console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute()."),this.deleteAttribute(r)};Se.prototype.applyMatrix=function(r){return console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(r)};Object.defineProperties(Se.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}});ri.prototype.setDynamic=function(r){return console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(r===!0?Ti:Si),this};ri.prototype.setArray=function(){console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")};Qt.prototype.getArrays=function(){console.error("THREE.ExtrudeGeometry: .getArrays() has been removed.")};Qt.prototype.addShapeList=function(){console.error("THREE.ExtrudeGeometry: .addShapeList() has been removed.")};Qt.prototype.addShape=function(){console.error("THREE.ExtrudeGeometry: .addShape() has been removed.")};qs.prototype.dispose=function(){console.error("THREE.Scene: .dispose() has been removed.")};Mo.prototype.onUpdate=function(){return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."),this};Object.defineProperties(ot.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},overdraw:{get:function(){console.warn("THREE.Material: .overdraw has been removed.")},set:function(){console.warn("THREE.Material: .overdraw has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE.Material: .wrapRGB has been removed."),new ge}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(r){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=r===Fo}},stencilMask:{get:function(){return console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask},set:function(r){console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask=r}},vertexTangents:{get:function(){console.warn("THREE."+this.type+": .vertexTangents has been removed.")},set:function(){console.warn("THREE."+this.type+": .vertexTangents has been removed.")}}});Object.defineProperties(Nt.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(r){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=r}}});Ze.prototype.clearTarget=function(r,e,t,n){console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."),this.setRenderTarget(r),this.clear(e,t,n)};Ze.prototype.animate=function(r){console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."),this.setAnimationLoop(r)};Ze.prototype.getCurrentRenderTarget=function(){return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."),this.getRenderTarget()};Ze.prototype.getMaxAnisotropy=function(){return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."),this.capabilities.getMaxAnisotropy()};Ze.prototype.getPrecision=function(){return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."),this.capabilities.precision};Ze.prototype.resetGLState=function(){return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."),this.state.reset()};Ze.prototype.supportsFloatTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")};Ze.prototype.supportsHalfFloatTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")};Ze.prototype.supportsStandardDerivatives=function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")};Ze.prototype.supportsCompressedTextureS3TC=function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")};Ze.prototype.supportsCompressedTexturePVRTC=function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")};Ze.prototype.supportsBlendMinMax=function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")};Ze.prototype.supportsVertexTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."),this.capabilities.vertexTextures};Ze.prototype.supportsInstancedArrays=function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")};Ze.prototype.enableScissorTest=function(r){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(r)};Ze.prototype.initMaterial=function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")};Ze.prototype.addPrePlugin=function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")};Ze.prototype.addPostPlugin=function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")};Ze.prototype.updateShadowMap=function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")};Ze.prototype.setFaceCulling=function(){console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")};Ze.prototype.allocTextureUnit=function(){console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.")};Ze.prototype.setTexture=function(){console.warn("THREE.WebGLRenderer: .setTexture() has been removed.")};Ze.prototype.setTexture2D=function(){console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.")};Ze.prototype.setTextureCube=function(){console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.")};Ze.prototype.getActiveMipMapLevel=function(){return console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel()."),this.getActiveMipmapLevel()};Object.defineProperties(Ze.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(r){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=r}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(r){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=r}},shadowMapCullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")}},context:{get:function(){return console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead."),this.getContext()}},vr:{get:function(){return console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr"),this.xr}},gammaInput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead."),!1},set:function(){console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.")}},gammaOutput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),!1},set:function(r){console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),this.outputEncoding=r===!0?je:sn}},toneMappingWhitePoint:{get:function(){return console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed."),1},set:function(){console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.")}},gammaFactor:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaFactor has been removed."),2},set:function(){console.warn("THREE.WebGLRenderer: .gammaFactor has been removed.")}}});Object.defineProperties(Xh.prototype,{cullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")}},renderReverseSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")}},renderSingleSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")}}});function s0(r,e,t){return console.warn("THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options )."),new Hs(r,t)}Object.defineProperties(At.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(r){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=r}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(r){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=r}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(r){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=r}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(r){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=r}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(r){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=r}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(r){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=r}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(r){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=r}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(r){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=r}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(r){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=r}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(r){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=r}}});Dl.prototype.load=function(r){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");const e=this;return new qu().load(r,function(n){e.setBuffer(n)}),this};td.prototype.getData=function(){return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."),this.getFrequencyData()};zs.prototype.updateCubeMap=function(r,e){return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."),this.update(r,e)};zs.prototype.clear=function(r,e,t,n){return console.warn("THREE.CubeCamera: .clear() is now .renderTarget.clear()."),this.renderTarget.clear(r,e,t,n)};wn.crossOrigin=void 0;wn.loadTexture=function(r,e,t,n){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");const i=new Du;i.setCrossOrigin(this.crossOrigin);const s=i.load(r,t,void 0,n);return e&&(s.mapping=e),s};wn.loadTextureCube=function(r,e,t,n){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");const i=new Pu;i.setCrossOrigin(this.crossOrigin);const s=i.load(r,t,void 0,n);return e&&(s.mapping=e),s};wn.loadCompressedTexture=function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")};wn.loadCompressedTextureCube=function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")};function o0(){console.error("THREE.CanvasRenderer has been removed")}function a0(){console.error("THREE.JSONLoader has been removed.")}const l0={createMultiMaterialObject:function(){console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js")},detach:function(){console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js")},attach:function(){console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js")}};function c0(){console.error("THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js")}function h0(){return console.error("THREE.ParametricGeometry has been moved to /examples/jsm/geometries/ParametricGeometry.js"),new Se}function u0(){return console.error("THREE.TextGeometry has been moved to /examples/jsm/geometries/TextGeometry.js"),new Se}function d0(){console.error("THREE.FontLoader has been moved to /examples/jsm/loaders/FontLoader.js")}function f0(){console.error("THREE.Font has been moved to /examples/jsm/loaders/FontLoader.js")}function p0(){console.error("THREE.ImmediateRenderObject has been removed.")}function m0(r,e,t){console.error('THREE.WebGLMultisampleRenderTarget has been removed. Use a normal render target and set the "samples" property to greater 0 to enable multisampling.');const n=new At(r,e,t);return n.samples=4,n}function g0(r,e,t,n){return console.warn("THREE.DataTexture2DArray has been renamed to DataArrayTexture."),new Pi(r,e,t,n)}function y0(r,e,t,n){return console.warn("THREE.DataTexture3D has been renamed to Data3DTexture."),new Ar(r,e,t,n)}typeof __THREE_DEVTOOLS__!="undefined"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:rs}}));typeof window!="undefined"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=rs);v.ACESFilmicToneMapping=_c;v.AddEquation=Vn;v.AddOperation=mc;v.AdditiveAnimationBlendMode=ha;v.AdditiveBlending=Uo;v.AlphaFormat=Tc;v.AlwaysDepth=lc;v.AlwaysStencilFunc=kc;v.AmbientLight=Rl;v.AmbientLightProbe=Zu;v.AnimationClip=jr;v.AnimationLoader=Zx;v.AnimationMixer=rd;v.AnimationObjectGroup=id;v.AnimationUtils=Qe;v.ArcCurve=Qa;v.ArrayCamera=Va;v.ArrowHelper=S_;v.Audio=Dl;v.AudioAnalyser=td;v.AudioContext=Il;v.AudioListener=e_;v.AudioLoader=qu;v.AxesHelper=Md;v.AxisHelper=Q_;v.BackSide=rt;v.BasicDepthPacking=Hc;v.BasicShadowMap=Xd;v.BinaryTextureLoader=r0;v.Bone=eo;v.BooleanKeyframeTrack=ui;v.BoundingBoxHelper=e0;v.Box2=ur;v.Box3=It;v.Box3Helper=b_;v.BoxBufferGeometry=dn;v.BoxGeometry=dn;v.BoxHelper=_d;v.BufferAttribute=He;v.BufferGeometry=Se;v.BufferGeometryLoader=Vu;v.ByteType=Mc;v.Cache=fi;v.Camera=Pr;v.CameraHelper=w_;v.CanvasRenderer=o0;v.CanvasTexture=mu;v.CatmullRomCurve3=rl;v.CineonToneMapping=xc;v.CircleBufferGeometry=Qi;v.CircleGeometry=Qi;v.ClampToEdgeWrapping=Tt;v.Clock=Ku;v.Color=ge;v.ColorKeyframeTrack=vl;v.CompressedTexture=$a;v.CompressedTextureLoader=Jx;v.ConeBufferGeometry=er;v.ConeGeometry=er;v.CubeCamera=zs;v.CubeReflectionMapping=yn;v.CubeRefractionMapping=xn;v.CubeTexture=Wi;v.CubeTextureLoader=Pu;v.CubeUVReflectionMapping=bi;v.CubeUVRefractionMapping=yr;v.CubicBezierCurve=ho;v.CubicBezierCurve3=sl;v.CubicInterpolant=Au;v.CullFaceBack=Io;v.CullFaceFront=Yl;v.CullFaceFrontBack=Wd;v.CullFaceNone=ql;v.Curve=Ut;v.CurvePath=xu;v.CustomBlending=Jl;v.CustomToneMapping=vc;v.CylinderBufferGeometry=Un;v.CylinderGeometry=Un;v.Cylindrical=m_;v.Data3DTexture=Ar;v.DataArrayTexture=Pi;v.DataTexture=si;v.DataTexture2DArray=g0;v.DataTexture3D=y0;v.DataTextureLoader=Iu;v.DataUtils=R_;v.DecrementStencilOp=nf;v.DecrementWrapStencilOp=sf;v.DefaultLoadingManager=Lu;v.DepthFormat=vn;v.DepthStencilFormat=qn;v.DepthTexture=Wa;v.DirectionalLight=Al;v.DirectionalLightHelper=M_;v.DiscreteInterpolant=Ru;v.DodecahedronBufferGeometry=tr;v.DodecahedronGeometry=tr;v.DoubleSide=Hn;v.DstAlphaFactor=nc;v.DstColorFactor=rc;v.DynamicBufferAttribute=k_;v.DynamicCopyUsage=_f;v.DynamicDrawUsage=Ti;v.DynamicReadUsage=gf;v.EdgesGeometry=ja;v.EdgesHelper=t0;v.EllipseCurve=Vr;v.EqualDepth=hc;v.EqualStencilFunc=cf;v.EquirectangularReflectionMapping=mr;v.EquirectangularRefractionMapping=gr;v.Euler=Cn;v.EventDispatcher=Mn;v.ExtrudeBufferGeometry=Qt;v.ExtrudeGeometry=Qt;v.FaceColors=I_;v.FileLoader=en;v.FlatShading=Fo;v.Float16BufferAttribute=dh;v.Float32Attribute=K_;v.Float32BufferAttribute=ve;v.Float64Attribute=j_;v.Float64BufferAttribute=fh;v.FloatType=rn;v.Fog=Br;v.FogExp2=Ur;v.Font=f0;v.FontLoader=d0;v.FramebufferTexture=pu;v.FrontSide=zn;v.Frustum=Ir;v.GLBufferAttribute=od;v.GLSL1=Mf;v.GLSL3=ua;v.GreaterDepth=dc;v.GreaterEqualDepth=uc;v.GreaterEqualStencilFunc=ff;v.GreaterStencilFunc=uf;v.GridHelper=gd;v.Group=ii;v.HalfFloatType=Wn;v.HemisphereLight=wl;v.HemisphereLightHelper=__;v.HemisphereLightProbe=Yu;v.IcosahedronBufferGeometry=ir;v.IcosahedronGeometry=ir;v.ImageBitmapLoader=Xu;v.ImageLoader=Qr;v.ImageUtils=wn;v.ImmediateRenderObject=p0;v.IncrementStencilOp=tf;v.IncrementWrapStencilOp=rf;v.InstancedBufferAttribute=oi;v.InstancedBufferGeometry=Pl;v.InstancedInterleavedBuffer=sd;v.InstancedMesh=qa;v.Int16Attribute=Y_;v.Int16BufferAttribute=hh;v.Int32Attribute=J_;v.Int32BufferAttribute=uh;v.Int8Attribute=W_;v.Int8BufferAttribute=ah;v.IntType=bc;v.InterleavedBuffer=ri;v.InterleavedBufferAttribute=Fn;v.Interpolant=pn;v.InterpolateDiscrete=Mr;v.InterpolateLinear=wr;v.InterpolateSmooth=fs;v.InvertStencilOp=of;v.JSONLoader=a0;v.KeepStencilOp=ms;v.KeyframeTrack=kt;v.LOD=jh;v.LatheBufferGeometry=rr;v.LatheGeometry=rr;v.Layers=Ts;v.LensFlare=c0;v.LessDepth=cc;v.LessEqualDepth=ss;v.LessEqualStencilFunc=hf;v.LessStencilFunc=lf;v.Light=Wt;v.LightProbe=ts;v.Line=fn;v.Line3=hd;v.LineBasicMaterial=gt;v.LineCurve=Xr;v.LineCurve3=yu;v.LineDashedMaterial=xl;v.LineLoop=Za;v.LinePieces=L_;v.LineSegments=Lt;v.LineStrip=C_;v.LinearEncoding=sn;v.LinearFilter=et;v.LinearInterpolant=_l;v.LinearMipMapLinearFilter=$d;v.LinearMipMapNearestFilter=Jd;v.LinearMipmapLinearFilter=kn;v.LinearMipmapNearestFilter=Vo;v.LinearToneMapping=gc;v.Loader=Ct;v.LoaderUtils=_o;v.LoadingManager=Ml;v.LoopOnce=Bc;v.LoopPingPong=Oc;v.LoopRepeat=Nc;v.LuminanceAlphaFormat=Cc;v.LuminanceFormat=Rc;v.MOUSE=Vd;v.Material=ot;v.MaterialLoader=Gu;v.Math=Xc;v.MathUtils=Xc;v.Matrix3=ft;v.Matrix4=Me;v.MaxEquation=zo;v.Mesh=dt;v.MeshBasicMaterial=un;v.MeshDepthMaterial=Ws;v.MeshDistanceMaterial=Xs;v.MeshFaceMaterial=F_;v.MeshLambertMaterial=gl;v.MeshMatcapMaterial=yl;v.MeshNormalMaterial=ml;v.MeshPhongMaterial=fl;v.MeshPhysicalMaterial=dl;v.MeshStandardMaterial=xo;v.MeshToonMaterial=pl;v.MinEquation=Oo;v.MirroredRepeatWrapping=_r;v.MixOperation=pc;v.MultiMaterial=U_;v.MultiplyBlending=No;v.MultiplyOperation=pr;v.NearestFilter=ht;v.NearestMipMapLinearFilter=Zd;v.NearestMipMapNearestFilter=Yd;v.NearestMipmapLinearFilter=ls;v.NearestMipmapNearestFilter=as;v.NeverDepth=ac;v.NeverStencilFunc=af;v.NoBlending=tn;v.NoColors=P_;v.NoToneMapping=nn;v.NormalAnimationBlendMode=ps;v.NormalBlending=Gn;v.NotEqualDepth=fc;v.NotEqualStencilFunc=df;v.NumberKeyframeTrack=$r;v.Object3D=Ne;v.ObjectLoader=$x;v.ObjectSpaceNormalMap=Vc;v.OctahedronBufferGeometry=li;v.OctahedronGeometry=li;v.OneFactor=Ql;v.OneMinusDstAlphaFactor=ic;v.OneMinusDstColorFactor=sc;v.OneMinusSrcAlphaFactor=Go;v.OneMinusSrcColorFactor=tc;v.OrthographicCamera=Dr;v.PCFShadowMap=Do;v.PCFSoftShadowMap=Zl;v.PMREMGenerator=Na;v.ParametricGeometry=h0;v.Particle=N_;v.ParticleBasicMaterial=H_;v.ParticleSystem=O_;v.ParticleSystemMaterial=G_;v.Path=qr;v.PerspectiveCamera=mt;v.Plane=Jt;v.PlaneBufferGeometry=ei;v.PlaneGeometry=ei;v.PlaneHelper=E_;v.PointCloud=B_;v.PointCloudMaterial=z_;v.PointLight=Tl;v.PointLightHelper=y_;v.Points=Gr;v.PointsMaterial=ai;v.PolarGridHelper=v_;v.PolyhedronBufferGeometry=$t;v.PolyhedronGeometry=$t;v.PositionalAudio=n_;v.PropertyBinding=ke;v.PropertyMixer=nd;v.QuadraticBezierCurve=uo;v.QuadraticBezierCurve3=fo;v.Quaternion=vt;v.QuaternionKeyframeTrack=hr;v.QuaternionLinearInterpolant=Cu;v.REVISION=rs;v.RGBADepthPacking=Gc;v.RGBAFormat=wt;v.RGBAIntegerFormat=Fc;v.RGBA_ASTC_10x10_Format=oa;v.RGBA_ASTC_10x5_Format=ia;v.RGBA_ASTC_10x6_Format=ra;v.RGBA_ASTC_10x8_Format=sa;v.RGBA_ASTC_12x10_Format=aa;v.RGBA_ASTC_12x12_Format=la;v.RGBA_ASTC_4x4_Format=Jo;v.RGBA_ASTC_5x4_Format=$o;v.RGBA_ASTC_5x5_Format=Ko;v.RGBA_ASTC_6x5_Format=jo;v.RGBA_ASTC_6x6_Format=Qo;v.RGBA_ASTC_8x5_Format=ea;v.RGBA_ASTC_8x6_Format=ta;v.RGBA_ASTC_8x8_Format=na;v.RGBA_BPTC_Format=ca;v.RGBA_ETC2_EAC_Format=Zo;v.RGBA_PVRTC_2BPPV1_Format=qo;v.RGBA_PVRTC_4BPPV1_Format=Xo;v.RGBA_S3TC_DXT1_Format=hs;v.RGBA_S3TC_DXT3_Format=us;v.RGBA_S3TC_DXT5_Format=ds;v.RGBFormat=Ac;v.RGB_ETC1_Format=Uc;v.RGB_ETC2_Format=Yo;v.RGB_PVRTC_2BPPV1_Format=Wo;v.RGB_PVRTC_4BPPV1_Format=ko;v.RGB_S3TC_DXT1_Format=cs;v.RGFormat=Ic;v.RGIntegerFormat=Dc;v.RawShaderMaterial=ul;v.Ray=An;v.Raycaster=f_;v.RectAreaLight=Cl;v.RedFormat=Lc;v.RedIntegerFormat=Pc;v.ReinhardToneMapping=yc;v.RepeatWrapping=xr;v.ReplaceStencilOp=ef;v.ReverseSubtractEquation=Kl;v.RingBufferGeometry=sr;v.RingGeometry=sr;v.Scene=qs;v.SceneUtils=l0;v.ShaderChunk=Be;v.ShaderLib=Vt;v.ShaderMaterial=Nt;v.ShadowMaterial=hl;v.Shape=Kt;v.ShapeBufferGeometry=ci;v.ShapeGeometry=ci;v.ShapePath=T_;v.ShapeUtils=jt;v.ShortType=wc;v.Skeleton=to;v.SkeletonHelper=dd;v.SkinnedMesh=Qs;v.SmoothShading=qd;v.Sphere=Sn;v.SphereBufferGeometry=hi;v.SphereGeometry=hi;v.Spherical=p_;v.SphericalHarmonics3=Ll;v.SplineCurve=po;v.SpotLight=El;v.SpotLightHelper=g_;v.Sprite=$s;v.SpriteMaterial=Ys;v.SrcAlphaFactor=Ho;v.SrcAlphaSaturateFactor=oc;v.SrcColorFactor=ec;v.StaticCopyUsage=xf;v.StaticDrawUsage=Si;v.StaticReadUsage=mf;v.StereoCamera=jx;v.StreamCopyUsage=vf;v.StreamDrawUsage=pf;v.StreamReadUsage=yf;v.StringKeyframeTrack=di;v.SubtractEquation=$l;v.SubtractiveBlending=Bo;v.TOUCH=kd;v.TangentSpaceNormalMap=Jn;v.TetrahedronBufferGeometry=or;v.TetrahedronGeometry=or;v.TextGeometry=u0;v.Texture=ut;v.TextureLoader=Du;v.TorusBufferGeometry=ar;v.TorusGeometry=ar;v.TorusKnotBufferGeometry=lr;v.TorusKnotGeometry=lr;v.Triangle=st;v.TriangleFanDrawMode=jd;v.TriangleStripDrawMode=Kd;v.TrianglesDrawMode=zc;v.TubeBufferGeometry=cr;v.TubeGeometry=cr;v.UVMapping=os;v.Uint16Attribute=Z_;v.Uint16BufferAttribute=Cs;v.Uint32Attribute=$_;v.Uint32BufferAttribute=Ls;v.Uint8Attribute=X_;v.Uint8BufferAttribute=lh;v.Uint8ClampedAttribute=q_;v.Uint8ClampedBufferAttribute=ch;v.Uniform=Mo;v.UniformsLib=pe;v.UniformsUtils=mh;v.UnsignedByteType=_n;v.UnsignedInt248Type=Xn;v.UnsignedIntType=vr;v.UnsignedShort4444Type=Ec;v.UnsignedShort5551Type=Sc;v.UnsignedShortType=Ei;v.VSMShadowMap=wi;v.Vector2=te;v.Vector3=L;v.Vector4=qe;v.VectorKeyframeTrack=Kr;v.Vertex=V_;v.VertexColors=D_;v.VideoTexture=fu;v.WebGL1Renderer=Yh;v.WebGL3DRenderTarget=Jc;v.WebGLArrayRenderTarget=Zc;v.WebGLCubeRenderTarget=Hs;v.WebGLMultipleRenderTargets=$c;v.WebGLMultisampleRenderTarget=m0;v.WebGLRenderTarget=At;v.WebGLRenderTargetCube=s0;v.WebGLRenderer=Ze;v.WebGLUtils=qh;v.WireframeGeometry=cl;v.WireframeHelper=n0;v.WrapAroundEnding=br;v.XHRLoader=i0;v.ZeroCurvatureEnding=Yn;v.ZeroFactor=jl;v.ZeroSlopeEnding=Zn;v.ZeroStencilOp=Qd;v._SRGBAFormat=gs;v.sRGBEncoding=je;/*!
 * three.proton v0.2.0
 * https://github.com/drawcall/three.proton
 *
 * Copyright 2011-2020, ajiemath
 * Licensed under the MIT license
 * http://www.opensource.org/licenses/mit-license
 *
 */(function(r,e){(function(t,n){r.exports=n(v)})(Gd,function(t){function n(l,x,w,R){n._super_.call(this),this.camera=l,this.renderer=x,this.dis=w||20,R=R||"1234";for(var O=1;O<5;O++)this["d"+O]=R.indexOf(O+"")>=0;this.name="ScreenZone"}function i(l,x,w,R,O,ne){var le,de,B,fe,ue,R;i._super_.call(this),M.Util.isUndefined(x,w,R,O,ne)?(le=de=B=0,fe=ue=R=l||100):M.Util.isUndefined(R,O,ne)?(le=de=B=0,fe=l,ue=x,R=w):(le=l,de=x,B=w,fe=R,ue=O,R=ne),this.x=le,this.y=de,this.z=B,this.width=fe,this.height=ue,this.depth=R,this.friction=.85,this.max=6}function s(l,x,w){var R,O,ne;s._super_.call(this),M.Util.isUndefined(l,x,w)?R=O=ne=0:(R=l,O=x,ne=w),this.x=R,this.y=O,this.z=ne}function o(l,x){o._super_.call(this),l instanceof t.Geometry?this.geometry=l:this.geometry=l.geometry,this.scale=x||1}function a(l,x,w,R){var O,ne;a._super_.call(this),M.Util.isUndefined(x,w,R)?(O=0,ne=l||100):(O=l,ne=R),this.x=O,this.y=O,this.z=O,this.radius=ne,this.tha=this.phi=0}function c(l,x,w,R,O,ne){c._super_.call(this),l instanceof M.Vector3D?(this.x1=l.x,this.y1=l.y,this.z1=l.z,this.x2=R.x,this.y2=R.y,this.z2=R.z):(this.x1=l,this.y1=x,this.z1=w,this.x2=R,this.y2=O,this.z2=ne)}function h(){this.vector=new M.Vector3D(0,0,0),this.random=0,this.crossType="dead",this.log=!0}function u(){u._super_.call(this),this.targetPool=new M.Pool,this.materialPool=new M.Pool,this.name="CustomRender"}function d(l){d._super_.call(this,l),this._body=new t.Sprite(new t.SpriteMaterial({color:16777215})),this.name="SpriteRender"}function f(l){f._super_.call(this),this.points=l,this.name="PointsRender"}function p(l){p._super_.call(this),this.container=l,this._targetPool=new M.Pool,this._materialPool=new M.Pool,this._body=new t.Mesh(new t.BoxGeometry(50,50,50),new t.MeshLambertMaterial({color:"#ff0000"})),this.name="MeshRender"}function g(){this.name="BaseRender"}function _(l,x,w){this.mouseTarget=M.Util.initValue(l,window),this.ease=M.Util.initValue(x,.7),this._allowEmitting=!1,this.mouse=new M.Vector3D,this.initEventHandler(),_._super_.call(this,w)}function b(l){this.selfBehaviours=[],b._super_.call(this,l)}function y(l){this.initializes=[],this.particles=[],this.behaviours=[],this.currentEmitTime=0,this.totalEmitTimes=-1,this.damping=.006,this.bindEmitter=!0,this.rate=new M.Rate(1,.1),y._super_.call(this,l),this.id="emitter_"+y.ID++,this.cID=0,this.name="Emitter"}function m(l,x,w,R,O,ne,le){m._super_.call(this,ne,le),m.prototype.reset(l,x,w,R,O),this.name="Spring"}function T(l,x,w,R){T._super_.call(this,w,R),this.reset(l,x),this.name="Color"}function E(l,x,w,R,O){E._super_.call(this,R,O),this.reset(l,x,w),this.name="Rotate"}function S(l,x,w,R){S._super_.call(this,w,R),this.reset(l,x),this.name="Scale"}function D(l,x,w,R){D._super_.call(this,w,R),this.reset(l,x),this.name="Alpha"}function U(l,x,w,R){U._super_.call(this,w,R),this.reset(l,x),this.name="CrossZone"}function N(l,x,w,R,O){N._super_.call(this,R,O),this.reset(l,x,w),this.name="Collision"}function Z(l,x,w){Z._super_.call(this,0,-l,0,x,w),this.name="Gravity"}function z(l,x,w,R,O){z._super_.call(this,l,x,w,R,O),this.force*=-1,this.name="Repulsion"}function A(l,x,w,R,O,ne){A._super_.call(this,O,ne),this.reset(l,x,w,R),this.time=0,this.name="RandomDrift"}function F(l,x,w,R,O){F._super_.call(this,R,O),this.targetPosition=M.Util.initValue(l,new M.Vector3D),this.radius=M.Util.initValue(w,1e3),this.force=M.Util.initValue(this.normalizeValue(x),100),this.radiusSq=this.radius*this.radius,this.attractionForce=new M.Vector3D,this.lengthSq=0,this.name="Attraction"}function G(l,x,w,R,O){G._super_.call(this,R,O),G.prototype.reset.call(this,l,x,w),this.name="Force"}function W(l,x,w){W._super_.call(this),this.body=M.createArraySpan(l),this.w=x,this.h=M.Util.initValue(w,this.w)}function q(l,x,w){q._super_.call(this),this.radius=M.createSpan(l,x,w)}function X(l,x,w){X._super_.call(this),this.massPan=M.createSpan(l,x,w)}function J(l,x,w){J._super_.call(this),this.reset(l,x,w),this.dirVec=new M.Vector3D(0,0,0),this.name="Velocity"}function k(){k._super_.call(this),this.reset.apply(this,arguments)}function Q(l,x,w){Q._super_.call(this),this.lifePan=M.createSpan(l,x,w)}function re(){this.name="Initialize"}function se(l,x){this.numPan=M.createSpan(M.Util.initValue(l,1)),this.timePan=M.createSpan(M.Util.initValue(x,1)),this.startTime=0,this.nextTime=0,this.init()}function ae(l,x){this.id="Behaviour_"+ae.id++,this.life=M.Util.initValue(l,1/0),this.easing=M.Util.initValue(x,M.ease.setEasingByName(M.ease.easeLinear)),this.age=0,this.energy=1,this.dead=!1,this.name="Behaviour"}function Ee(l,x,w,R,O,ne){this.x=l,this.y=x,this.z=w,this.width=R,this.height=O,this.depth=ne,this.bottom=this.y+this.height,this.right=this.x+this.width,this.right=this.x+this.width}function ze(l){this._arr=M.Util.isArray(l)?l:[l]}function be(l,x,w){this._isArray=!1,M.Util.isArray(l)?(this._isArray=!0,this.a=l):(this.a=M.Util.initValue(l,1),this.b=M.Util.initValue(x,this.a),this._center=M.Util.initValue(w,!1))}function H(){this.cID=0,this.list={}}function Oe(l){this.id="particle_"+Oe.ID++,this.name="Particle",this.reset("init"),M.Util.setPrototypeByObj(this,l)}function Re(){this.initialize()}function M(l,x){this.preParticles=M.Util.initValue(l,M.POOL_MAX),this.integrationType=M.Util.initValue(x,M.EULER),this.emitters=[],this.renderers=[],this.pool=new M.Pool,M.integrator=new M.Integration(this.integrationType)}M.POOL_MAX=500,M.TIME_STEP=60,M.PI=3.142,M.DR=M.PI/180,M.MEASURE=100,M.EULER="euler",M.RK2="runge-kutta2",M.RK4="runge-kutta4",M.VERLET="verlet",M.PARTICLE_CREATED="partilcleCreated",M.PARTICLE_UPDATE="partilcleUpdate",M.PARTICLE_SLEEP="particleSleep",M.PARTICLE_DEAD="partilcleDead",M.PROTON_UPDATE="protonUpdate",M.PROTON_UPDATE_AFTER="protonUpdateAfter",M.EMITTER_ADDED="emitterAdded",M.EMITTER_REMOVED="emitterRemoved",M.bindEmtterEvent=!1,M.prototype={addRender:function(l){this.renderers.push(l),l.init(this)},removeRender:function(l){this.renderers.splice(this.renderers.indexOf(l),1),l.remove(this)},addEmitter:function(l){this.emitters.push(l),l.parent=this,this.dispatchEvent("EMITTER_ADDED",l)},removeEmitter:function(l){l.parent==this&&(this.emitters.splice(this.emitters.indexOf(l),1),l.parent=null,this.dispatchEvent("EMITTER_REMOVED",l))},update:function(l){this.dispatchEvent("PROTON_UPDATE",this);var x=l||.0167;if(x>0)for(var w=this.emitters.length;w--;)this.emitters[w].update(x);this.dispatchEvent("PROTON_UPDATE_AFTER",this)},getCount:function(){var l=0,x,w=this.emitters.length;for(x=0;x<w;x++)l+=this.emitters[x].particles.length;return l},destroy:function(){var l=0,x=this.emitters.length;for(l;l<x;l++)this.emitters[l].destroy(),delete this.emitters[l];this.emitters.length=0,this.pool.destroy()}},Re.initialize=function(l){l.addEventListener=ye.addEventListener,l.removeEventListener=ye.removeEventListener,l.removeAllEventListeners=ye.removeAllEventListeners,l.hasEventListener=ye.hasEventListener,l.dispatchEvent=ye.dispatchEvent};var ye=Re.prototype;ye._listeners=null,ye.initialize=function(){},ye.addEventListener=function(l,x){return this._listeners?this.removeEventListener(l,x):this._listeners={},this._listeners[l]||(this._listeners[l]=[]),this._listeners[l].push(x),x},ye.removeEventListener=function(l,x){if(this._listeners){if(!this._listeners[l])return;for(var w=this._listeners[l],R=0,O=w.length;R<O;R++)if(w[R]==x){O==1?delete this._listeners[l]:w.splice(R,1);break}}},ye.removeAllEventListeners=function(l){l?this._listeners&&delete this._listeners[l]:this._listeners=null},ye.dispatchEvent=function(l,x){var w=!1,R=this._listeners;if(l&&R){var O=R[l];if(!O)return w;O=O.slice();for(var ne,le=O.length;le--;){var ne=O[le];w=w||ne(x)}}return!!w},ye.hasEventListener=function(l){var x=this._listeners;return!!x&&!!x[l]},Re.initialize(M.prototype),M.EventDispatcher=Re;var De=De||{initValue:function(l,x){var l=l!=null&&l!=null?l:x;return l},isArray:function(l){return Object.prototype.toString.call(l)==="[object Array]"},destroyArray:function(l){l.length=0},destroyObject:function(l){for(var x in l)delete l[x]},isUndefined:function(){for(var l in arguments){var x=arguments[l];if(x!==void 0)return!1}return!0},setVectorByObj:function(l,x){x.x!==void 0&&(l.p.x=x.x),x.y!==void 0&&(l.p.y=x.y),x.z!==void 0&&(l.p.z=x.z),x.vx!==void 0&&(l.v.x=x.vx),x.vy!==void 0&&(l.v.y=x.vy),x.vz!==void 0&&(l.v.z=x.vz),x.ax!==void 0&&(l.a.x=x.ax),x.ay!==void 0&&(l.a.y=x.ay),x.az!==void 0&&(l.a.z=x.az),x.p!==void 0&&l.p.copy(x.p),x.v!==void 0&&l.v.copy(x.v),x.a!==void 0&&l.a.copy(x.a),x.position!==void 0&&l.p.copy(x.position),x.velocity!==void 0&&l.v.copy(x.velocity),x.accelerate!==void 0&&l.a.copy(x.accelerate)},setPrototypeByObj:function(l,x,w){for(var R in x)l.hasOwnProperty(R)&&(w?w.indexOf(R)<0&&(l[R]=De._getValue(x[R])):l[R]=De._getValue(x[R]));return l},_getValue:function(l){return l instanceof be?l.getValue():l},inherits:function(l,x){if(l._super_=x,Object.create)l.prototype=Object.create(x.prototype,{constructor:{value:l}});else{var w=function(){};w.prototype=x.prototype,l.prototype=new w,l.prototype.constructor=l}}};M.Util=De;var $=$||{getRGB:function(l){var x={};if(typeof l=="number")R=Math.floor(l),x.r=(l>>16&255)/255,x.g=(l>>8&255)/255,x.b=(l&255)/255;else if(typeof l=="string"){var w;if(w=/^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(l))x.r=Math.min(255,parseInt(w[1],10))/255,x.g=Math.min(255,parseInt(w[2],10))/255,x.b=Math.min(255,parseInt(w[3],10))/255;else if(w=/^\#([A-Fa-f0-9]+)$/.exec(l)){var R=w[1];x.r=parseInt(R.charAt(0)+R.charAt(1),16)/255,x.g=parseInt(R.charAt(2)+R.charAt(3),16)/255,x.b=parseInt(R.charAt(4)+R.charAt(5),16)/255}}else l instanceof t.Color&&(x.r=l.r,x.g=l.g,x.b=l.b);return x}};M.ColorUtil=$;var oe={toScreenPos:function(){var l=new t.Vector3;return function(x,w,R){return l.copy(x),l.project(w),l.x=Math.round((l.x+1)*R.width/2),l.y=Math.round((-l.y+1)*R.height/2),l.z=0,l}}(),toSpacePos:function(){var l=new t.Vector3,x=new t.Vector3,w;return function(R,O,ne){return l.set(R.x/ne.width*2-1,-(R.y/ne.height)*2+1,.5),l.unproject(O),x.copy(l.sub(O.position).normalize()),w=-O.position.z/x.z,l.copy(O.position),l.add(x.multiplyScalar(w)),l}}(),getTexture:function(){var l={};return function(x){if(x instanceof t.Texture)return x;if(typeof x=="string"){var w=M.PUID.hash(x);return l[w]||(l[w]=new t.Texture(x)),l[w]}if(x instanceof Image){var w=M.PUID.hash(x.src);return l[w]||(l[w]=new t.Texture(x)),l[w]}}}()};M.THREEUtil=oe;var ce=ce||{_id:0,_uids:{},id:function(l){for(var x in this._uids)if(this._uids[x]==l)return x;var w="PUID_"+this._id++;return this._uids[w]=l,w},hash:function(l){}};M.PUID=ce,Oe.ID=0,Oe.prototype={getDirection:function(){return Math.atan2(this.v.x,-this.v.y)*(180/M.PI)},reset:function(l){return this.life=1/0,this.age=0,this.energy=1,this.dead=!1,this.sleep=!1,this.body=null,this.parent=null,this.mass=1,this.radius=10,this.alpha=1,this.scale=1,this.useColor=!1,this.useAlpha=!1,this.easing=M.ease.setEasingByName(M.ease.easeLinear),l?(this.p=new M.Vector3D,this.v=new M.Vector3D,this.a=new M.Vector3D,this.old={},this.old.p=this.p.clone(),this.old.v=this.v.clone(),this.old.a=this.a.clone(),this.behaviours=[],this.transform={},this.color={r:0,g:0,b:0},this.rotation=new M.Vector3D):(this.p.set(0,0,0),this.v.set(0,0,0),this.a.set(0,0,0),this.old.p.set(0,0,0),this.old.v.set(0,0,0),this.old.a.set(0,0,0),this.color.r=0,this.color.g=0,this.color.b=0,this.rotation.clear(),M.Util.destroyObject(this.transform),this.removeAllBehaviours()),this},update:function(l,x){if(!this.sleep){this.age+=l;for(var w=this.behaviours.length;w--;)this.behaviours[w]&&this.behaviours[w].applyBehaviour(this,l,x)}if(this.age>=this.life)this.destroy();else{var R=this.easing(this.age/this.life);this.energy=Math.max(1-R,0)}},addBehaviour:function(l){this.behaviours.push(l),l.initialize(this)},addBehaviours:function(l){for(var x=l.length;x--;)this.addBehaviour(l[x])},removeBehaviour:function(l){var x=this.behaviours.indexOf(l);x>-1&&this.behaviours.splice(x,1)},removeAllBehaviours:function(){M.Util.destroyArray(this.behaviours)},destroy:function(){this.removeAllBehaviours(),this.energy=0,this.dead=!0,this.parent=null}},M.Particle=Oe,H.prototype={create:function(l){return this.cID++,typeof l=="function"?new l:l.clone()},getCount:function(){var l=0;for(var x in this.list)l+=this.list[x].length;return l++},get:function(l){var x,w=l.__puid||M.PUID.id(l);return this.list[w]&&this.list[w].length>0?x=this.list[w].pop():x=this.create(l),x.__puid=l.__puid||w,x},expire:function(l){return this._getList(l.__puid).push(l)},destroy:function(){for(var l in this.list)this.list[l].length=0,delete this.list[l]},_getList:function(l){return l=l||"default",this.list[l]||(this.list[l]=[]),this.list[l]}},M.Pool=H;var _e={randomAToB:function(l,x,w){return w?(Math.random()*(x-l)>>0)+l:l+Math.random()*(x-l)},randomFloating:function(l,x,w){return _e.randomAToB(l-x,l+x,w)},randomZone:function(l){},degreeTransform:function(l){return l*M.PI/180},toColor16:function(l){return"#"+l.toString(16)},randomColor:function(){return"#"+("00000"+(Math.random()*16777216<<0).toString(16)).slice(-6)},lerp:function(l,x,w){return x+(l-x)*w},getNormal:function(l,x){return l.x==0&&l.y==0?l.z==0?x.set(1,0,1):x.set(1,1,-l.y/l.z):l.x==0?x.set(1,0,1):x.set(-l.y/l.x,1,1),x.normalize()},axisRotate:function(l,x,w,R){var O=Math.cos(R),ne=Math.sin(R),le=w.dot(x)*(1-O);l.copy(w),l.cross(x).scalar(ne),l.addValue(x.x*O,x.y*O,x.z*O),l.addValue(w.x*le,w.y*le,w.z*le)}};M.MathUtils=_e;var me=function(l){this.type=M.Util.initValue(l,M.EULER)};me.prototype={integrate:function(l,x,w){this.euler(l,x,w)},euler:function(l,x,w){l.sleep||(l.old.p.copy(l.p),l.old.v.copy(l.v),l.a.scalar(1/l.mass),l.v.add(l.a.scalar(x)),l.p.add(l.old.v.scalar(x)),w&&l.v.scalar(w),l.a.clear())}},M.Integration=me;var Te=function(l,x,w){this.x=l||0,this.y=x||0,this.z=w||0};Te.prototype={set:function(l,x,w){return this.x=l,this.y=x,this.z=w,this},setX:function(l){return this.x=l,this},setY:function(l){return this.y=l,this},setZ:function(l){return this.z=l,this},getGradient:function(){if(this.x!=0)return Math.atan2(this.y,this.x);if(this.y>0)return M.PI/2;if(this.y<0)return-M.PI/2},copy:function(l){return this.x=l.x,this.y=l.y,this.z=l.z,this},add:function(l,x){return x!==void 0?this.addVectors(l,x):(this.x+=l.x,this.y+=l.y,this.z+=l.z,this)},addValue:function(l,x,w){return this.x+=l,this.y+=x,this.z+=w,this},addVectors:function(l,x){return this.x=l.x+x.x,this.y=l.y+x.y,this.z=l.z+x.z,this},addScalar:function(l){return this.x+=l,this.y+=l,this.z+=l,this},sub:function(l,x){return x!==void 0?this.subVectors(l,x):(this.x-=l.x,this.y-=l.y,this.z-=l.z,this)},subVectors:function(l,x){return this.x=l.x-x.x,this.y=l.y-x.y,this.z=l.z-x.z,this},scalar:function(l){return this.x*=l,this.y*=l,this.z*=l,this},divideScalar:function(l){return l!==0?(this.x/=l,this.y/=l,this.z/=l):this.set(0,0,0),this},negate:function(){return this.scalar(-1)},dot:function(l){return this.x*l.x+this.y*l.y+this.z*l.z},cross:function(l){var x=this.x,w=this.y,R=this.z;return this.x=w*l.z-R*l.y,this.y=R*l.x-x*l.z,this.z=x*l.y-w*l.x,this},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.lengthSq())},normalize:function(){return this.divideScalar(this.length())},distanceTo:function(l){return Math.sqrt(this.distanceToSquared(l))},crossVectors:function(l,x){var w=l.x,R=l.y,O=l.z,ne=x.x,le=x.y,de=x.z;return this.x=R*de-O*le,this.y=O*ne-w*de,this.z=w*le-R*ne,this},eulerFromDir:function(l){},applyEuler:function(){var l;return function(x){return l===void 0&&(l=new M.Quaternion),this.applyQuaternion(l.setFromEuler(x)),this}}(),applyAxisAngle:function(){var l;return function(x,w){return l===void 0&&(l=new M.Quaternion),this.applyQuaternion(l.setFromAxisAngle(x,w)),this}}(),applyQuaternion:function(l){var x=this.x,w=this.y,R=this.z,O=l.x,ne=l.y,le=l.z,de=l.w,B=de*x+ne*R-le*w,fe=de*w+le*x-O*R,ue=de*R+O*w-ne*x,Ae=-O*x-ne*w-le*R;return this.x=B*de+Ae*-O+fe*-le-ue*-ne,this.y=fe*de+Ae*-ne+ue*-O-B*-le,this.z=ue*de+Ae*-le+B*-ne-fe*-O,this},distanceToSquared:function(l){var x=this.x-l.x,w=this.y-l.y,R=this.z-l.z;return x*x+w*w+R*R},lerp:function(l,x){return this.x+=(l.x-this.x)*x,this.y+=(l.y-this.y)*x,this.z+=(l.z-this.z)*x,this},equals:function(l){return l.x===this.x&&l.y===this.y&&l.z===this.z},clear:function(){return this.x=0,this.y=0,this.z=0,this},clone:function(){return new M.Vector3D(this.x,this.y,this.z)},toString:function(){return"x:"+this.x+"y:"+this.y+"z:"+this.z}},M.Vector3D=Te;var we=function(l,x,w){this.radius=l||1,this.phi=w||0,this.theta=x||0};we.prototype={set:function(l,x,w){return this.radius=l||1,this.phi=w||0,this.theta=x||0,this},setRadius:function(l){return this.radius=l,this},setPhi:function(l){return this.phi=l,this},setTheta:function(l){return this.theta=l,this},copy:function(l){return this.radius=l.radius,this.phi=l.phi,this.theta=l.theta,this},toVector3D:function(){return new M.Vector3D(this.getX(),this.getY(),this.getZ())},getX:function(){return this.radius*Math.sin(this.theta)*Math.cos(this.phi)},getY:function(){return-this.radius*Math.sin(this.theta)*Math.sin(this.phi)},getZ:function(){return this.radius*Math.cos(this.theta)},normalize:function(){return this.radius=1,this},equals:function(l){return l.radius===this.radius&&l.phi===this.phi&&l.theta===this.theta},clear:function(){return this.radius=0,this.phi=0,this.theta=0,this},clone:function(){return new we(this.radius,this.phi,this.theta)}},M.Polar3D=we,be.prototype={getValue:function(l){return this._isArray?this.a[this.a.length*Math.random()>>0]:this._center?M.MathUtils.randomFloating(this.a,this.b,l):M.MathUtils.randomAToB(this.a,this.b,l)}},M.createSpan=function(l,x,w){return l instanceof be?l:x===void 0?new be(l):w===void 0?new be(l,x):new be(l,x,w)},M.Span=be,M.Util.inherits(ze,M.Span),ze.prototype.getValue=function(){var l=this._arr[this._arr.length*Math.random()>>0];return l=="random"||l=="Random"?M.MathUtils.randomColor():l},M.createArraySpan=function(l){return l?l instanceof M.ArraySpan?l:new M.ArraySpan(l):null},M.ArraySpan=ze;var Pe=function(l,x,w,R){this.x=l||0,this.y=x||0,this.z=w||0,this.w=R!==void 0?R:1};Pe.prototype={set:function(l,x,w,R){return this.x=l,this.y=x,this.z=w,this.w=R,this},clone:function(){return new M.Quaternion(this.x,this.y,this.z,this.w)},copy:function(l){return this.x=l.x,this.y=l.y,this.z=l.z,this.w=l.w,this},setFromEuler:function(l){var x=Math.cos(l.x/2),w=Math.cos(l.y/2),R=Math.cos(l.z/2),O=Math.sin(l.x/2),ne=Math.sin(l.y/2),le=Math.sin(l.z/2);return this.x=O*w*R+x*ne*le,this.y=x*ne*R-O*w*le,this.z=x*w*le+O*ne*R,this.w=x*w*R-O*ne*le,this},setFromAxisAngle:function(l,x){var w=x/2,R=Math.sin(w);return this.x=l.x*R,this.y=l.y*R,this.z=l.z*R,this.w=Math.cos(w),this},normalize:function(){var l=this.length();return l===0?(this.x=0,this.y=0,this.z=0,this.w=1):(l=1/l,this.x*=l,this.y*=l,this.z*=l,this.w*=l),this},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},dot:function(l){return this.x*l.x+this.y*l.y+this.z*l.z+this.w*l.w}},M.Quaternion=Pe,Ee.prototype={contains:function(l,x,w){return l<=this.right&&l>=this.x&&x<=this.bottom&&x>=this.y&&w<=this.depth&&w>=this.z}},M.Box=Ee,ae.id=0,ae.prototype={reset:function(l,x){this.life=M.Util.initValue(l,1/0),this.easing=M.Util.initValue(x,M.ease.setEasingByName(M.ease.easeLinear))},normalizeForce:function(l){return l.scalar(M.MEASURE)},normalizeValue:function(l){return l*M.MEASURE},initialize:function(l){},applyBehaviour:function(l,x,w){if(!this.dead){if(this.age+=x,this.age>=this.life){this.energy=0,this.dead=!0;return}var R=this.easing(l.age/l.life);this.energy=Math.max(1-R,0)}},destroy:function(){}},M.Behaviour=ae,se.prototype={init:function(){this.startTime=0,this.nextTime=this.timePan.getValue()},getValue:function(l){return this.startTime+=l,this.startTime>=this.nextTime?(this.init(),this.numPan.b==1?this.numPan.getValue("Float")>.5?1:0:this.numPan.getValue("Int")):0}},M.Rate=se,re.prototype.reset=function(){},re.prototype.init=function(l,x){x?this.initialize(x):this.initialize(l)},re.prototype.initialize=function(l){},M.Initialize=re;var Je={initialize:function(l,x,w){for(var R=w.length;R--;){var O=w[R];O instanceof M.Initialize?O.init(l,x):Je.init(l,x,O)}Je.bindEmitter(l,x)},init:function(l,x,w){M.Util.setPrototypeByObj(x,w),M.Util.setVectorByObj(x,w)},bindEmitter:function(l,x){l.bindEmitter&&(x.p.add(l.p),x.v.add(l.v),x.a.add(l.a),x.v.applyEuler(l.rotation))}};M.InitializeUtil=Je,M.Util.inherits(Q,M.Initialize),Q.prototype.initialize=function(l){this.lifePan.a==1/0||this.lifePan.a=="infi"?l.life=1/0:l.life=this.lifePan.getValue()},M.Life=Q,M.Util.inherits(k,M.Initialize),k.prototype.reset=function(){this.zones?this.zones.length=0:this.zones=[];var l=Array.prototype.slice.call(arguments);this.zones=this.zones.concat(l)},k.prototype.addZone=function(){var l=Array.prototype.slice.call(arguments);this.zones=this.zones.concat(l)},k.prototype.initialize=function(){return function(l){var x=this.zones[Math.random()*this.zones.length>>0];x.getPosition(),l.p.x=x.vector.x,l.p.y=x.vector.y,l.p.z=x.vector.z}}(),M.Position=k,M.P=k,M.Util.inherits(J,M.Initialize),J.prototype.reset=function(l,x,w){l instanceof M.Vector3D?(this.radiusPan=M.createSpan(1),this.dir=l.clone(),this.tha=x*M.DR,this._useV=!0):l instanceof M.Polar3D?(this.tha=x*M.DR,this.dirVec=l.toVector3D(),this._useV=!1):(this.radiusPan=M.createSpan(l),this.dir=x.clone().normalize(),this.tha=w*M.DR,this._useV=!0)},J.prototype.normalize=function(l){return l*M.MEASURE},J.prototype.initialize=function(){var l,x=new M.Vector3D(0,0,1),w=new M.Vector3D(0,0,0);return function(R){return l=this.tha*Math.random(),this._useV&&this.dirVec.copy(this.dir).scalar(this.radiusPan.getValue()),M.MathUtils.getNormal(this.dirVec,x),w.copy(this.dirVec).applyAxisAngle(x,l),w.applyAxisAngle(this.dirVec.normalize(),Math.random()*M.PI*2),R.v.copy(w),this}}(),M.Velocity=J,M.V=J,M.Util.inherits(X,M.Initialize),X.prototype.initialize=function(l){l.mass=this.massPan.getValue()},M.Mass=X,M.Util.inherits(q,M.Initialize),q.prototype.reset=function(l,x,w){this.radius=M.createSpan(l,x,w)},q.prototype.initialize=function(l){l.radius=this.radius.getValue(),l.transform.oldRadius=l.radius},M.Radius=q,M.Util.inherits(W,M.Initialize),W.prototype.initialize=function(l){var x=this.body.getValue();this.w?l.body={width:this.w,height:this.h,body:x}:l.body=x},M.Body=W,M.Util.inherits(G,M.Behaviour),G.prototype.reset=function(l,x,w){this.force=this.normalizeForce(new M.Vector3D(l,x,w)),this.force.id=Math.random()},G.prototype.applyBehaviour=function(l,x,w){G._super_.prototype.applyBehaviour.call(this,l,x,w),l.a.add(this.force)},M.F=M.Force=G,M.Util.inherits(F,M.Behaviour),F.prototype.reset=function(l,x,w,R,O){this.targetPosition=M.Util.initValue(l,new M.Vector3D),this.radius=M.Util.initValue(w,1e3),this.force=M.Util.initValue(this.normalizeValue(x),100),this.radiusSq=this.radius*this.radius,this.attractionForce=new M.Vector3D,this.lengthSq=0,R&&F._super_.prototype.reset.call(this,R,O)},F.prototype.applyBehaviour=function(l,x,w){F._super_.prototype.applyBehaviour.call(this,l,x,w),this.attractionForce.copy(this.targetPosition),this.attractionForce.sub(l.p),this.lengthSq=this.attractionForce.lengthSq(),this.lengthSq>4e-6&&this.lengthSq<this.radiusSq&&(this.attractionForce.normalize(),this.attractionForce.scalar(1-this.lengthSq/this.radiusSq),this.attractionForce.scalar(this.force),l.a.add(this.attractionForce))},M.Attraction=F,M.Util.inherits(A,M.Behaviour),A.prototype.reset=function(l,x,w,R,O,ne){this.randomFoce=this.normalizeForce(new M.Vector3D(l,x,w)),this.delayPan=M.createSpan(R||.03),this.time=0,O&&A._super_.prototype.reset.call(this,O,ne)},A.prototype.applyBehaviour=function(l,x,w){if(A._super_.prototype.applyBehaviour.call(this,l,x,w),this.time+=x,this.time>=this.delayPan.getValue()){var R=M.MathUtils.randomAToB(-this.randomFoce.x,this.randomFoce.x),O=M.MathUtils.randomAToB(-this.randomFoce.y,this.randomFoce.y),ne=M.MathUtils.randomAToB(-this.randomFoce.z,this.randomFoce.z);l.a.addValue(R,O,ne),this.time=0}},M.RandomDrift=A,M.Util.inherits(z,M.Attraction),z.prototype.reset=function(l,x,w,R,O){z._super_.prototype.reset.call(this,l,x,w,R,O),this.force*=-1},M.Repulsion=z,M.Util.inherits(Z,M.Force),Z.prototype.reset=function(l,x,w){Z._super_.prototype.reset.call(this,0,-l,0,x,w)},M.Gravity=Z,M.G=Z,M.Util.inherits(N,M.Behaviour),N.prototype.reset=function(l,x,w,R,O){this.emitter=l,this.useMass=x,this.callback=w,this.particles=[],this.delta=new M.Vector3D,R&&N._super_.prototype.reset.call(this,R,O)},N.prototype.applyBehaviour=function(l,x,w){for(var R=this.emitter?this.emitter.particles.slice(w):this.particles.slice(w),O,ne,le,de,B,fe,ue=R.length;ue--;)O=R[ue],O!=l&&(this.delta.copy(O.p).sub(l.p),ne=this.delta.lengthSq(),de=l.radius+O.radius,ne<=de*de&&(le=de-Math.sqrt(ne),le+=.5,B=this._getAverageMass(l,O),fe=this._getAverageMass(O,l),l.p.add(this.delta.clone().normalize().scalar(le*-B)),O.p.add(this.delta.normalize().scalar(le*fe)),this.callback&&this.callback(l,O)))},N.prototype._getAverageMass=function(l,x){return this.useMass?x.mass/(l.mass+x.mass):.5},M.Collision=N,M.Util.inherits(U,M.Behaviour),U.prototype.reset=function(l,x,w,R){var O,ne;typeof l=="string"?(ne=l,O=x):(ne=x,O=l),this.zone=O,this.zone.crossType=M.Util.initValue(ne,"dead"),w&&U._super_.prototype.reset.call(this,w,R)},U.prototype.applyBehaviour=function(l,x,w){U._super_.prototype.applyBehaviour.call(this,l,x,w),this.zone.crossing.call(this.zone,l)},M.CrossZone=U,M.Util.inherits(D,M.Behaviour),D.prototype.reset=function(l,x,w,R){x==null||x==null?this._same=!0:this._same=!1,this.a=M.createSpan(M.Util.initValue(l,1)),this.b=M.createSpan(x),w&&D._super_.prototype.reset.call(this,w,R)},D.prototype.initialize=function(l){l.useAlpha=!0,l.transform.alphaA=this.a.getValue(),this._same?l.transform.alphaB=l.transform.alphaA:l.transform.alphaB=this.b.getValue()},D.prototype.applyBehaviour=function(l,x,w){D._super_.prototype.applyBehaviour.call(this,l,x,w),l.alpha=M.MathUtils.lerp(l.transform.alphaA,l.transform.alphaB,this.energy),l.alpha<.002&&(l.alpha=0)},M.Alpha=D,M.Util.inherits(S,M.Behaviour),S.prototype.reset=function(l,x,w,R){x==null||x==null?this._same=!0:this._same=!1,this.a=M.createSpan(M.Util.initValue(l,1)),this.b=M.createSpan(x),w&&S._super_.prototype.reset.call(this,w,R)},S.prototype.initialize=function(l){l.transform.scaleA=this.a.getValue(),l.transform.oldRadius=l.radius,this._same?l.transform.scaleB=l.transform.scaleA:l.transform.scaleB=this.b.getValue()},S.prototype.applyBehaviour=function(l,x,w){S._super_.prototype.applyBehaviour.call(this,l,x,w),l.scale=M.MathUtils.lerp(l.transform.scaleA,l.transform.scaleB,this.energy),l.scale<5e-4&&(l.scale=0),l.radius=l.transform.oldRadius*l.scale},M.Scale=S,M.Util.inherits(E,M.Behaviour),E.prototype.reset=function(l,x,w,R,O){this.a=l||0,this.b=x||0,this.c=w||0,l===void 0||l=="same"?this._type="same":x==null?this._type="set":w===void 0?this._type="to":(this._type="add",this.a=M.createSpan(this.a*M.DR),this.b=M.createSpan(this.b*M.DR),this.c=M.createSpan(this.c*M.DR)),R&&E._super_.prototype.reset.call(this,R,O)},E.prototype.initialize=function(l){switch(this._type){case"same":break;case"set":this._setRotation(l.rotation,this.a);break;case"to":l.transform.fR=l.transform.fR||new M.Vector3D,l.transform.tR=l.transform.tR||new M.Vector3D,this._setRotation(l.transform.fR,this.a),this._setRotation(l.transform.tR,this.b);break;case"add":l.transform.addR=new M.Vector3D(this.a.getValue(),this.b.getValue(),this.c.getValue())}},E.prototype._setRotation=function(l,x){if(l=l||new M.Vector3D,x=="random"){var w=M.MathUtils.randomAToB(-M.PI,M.PI),R=M.MathUtils.randomAToB(-M.PI,M.PI),O=M.MathUtils.randomAToB(-M.PI,M.PI);l.set(w,R,O)}else x instanceof M.Vector3D&&l.copy(x)},E.prototype.applyBehaviour=function(l,x,w){switch(E._super_.prototype.applyBehaviour.call(this,l,x,w),this._type){case"same":l.rotation||(l.rotation=new M.Vector3D),l.rotation.eulerFromDir(l.v);break;case"set":break;case"to":l.rotation.x=M.MathUtils.lerp(l.transform.fR.x,l.transform.tR.x,this.energy),l.rotation.y=M.MathUtils.lerp(l.transform.fR.y,l.transform.tR.y,this.energy),l.rotation.z=M.MathUtils.lerp(l.transform.fR.z,l.transform.tR.z,this.energy);break;case"add":l.rotation.add(l.transform.addR)}},M.Rotate=E,M.Util.inherits(T,M.Behaviour),T.prototype.reset=function(l,x,w,R){x==null||x==null?this._same=!0:this._same=!1,this.a=M.createArraySpan(l),this.b=M.createArraySpan(x),w&&T._super_.prototype.reset.call(this,w,R)},T.prototype.initialize=function(l){l.transform.colorA=M.ColorUtil.getRGB(this.a.getValue()),l.useColor=!0,this._same?l.transform.colorB=l.transform.colorA:l.transform.colorB=M.ColorUtil.getRGB(this.b.getValue())},T.prototype.applyBehaviour=function(l,x,w){T._super_.prototype.applyBehaviour.call(this,l,x,w),this._same?(l.color.r=l.transform.colorA.r,l.color.g=l.transform.colorA.g,l.color.b=l.transform.colorA.b):(l.color.r=M.MathUtils.lerp(l.transform.colorA.r,l.transform.colorB.r,this.energy),l.color.g=M.MathUtils.lerp(l.transform.colorA.g,l.transform.colorB.g,this.energy),l.color.b=M.MathUtils.lerp(l.transform.colorA.b,l.transform.colorB.b,this.energy))},M.Color=T,M.Util.inherits(m,M.Behaviour),m.prototype.reset=function(l,x,w,R,O){this.pos?this.pos.set(l,x,w):this.pos=new M.Vector3D(l,x,w),this.spring=R||.1,this.friction=O||.98},m.prototype.applyBehaviour=function(l,x,w){m._super_.prototype.applyBehaviour.call(this,l,x,w),l.v.x+=(this.pos.x-l.p.x)*this.spring,l.v.y+=(this.pos.y-l.p.y)*this.spring,l.v.z+=(this.pos.z-l.p.z)*this.spring},M.Spring=m,y.ID=0,M.Util.inherits(y,M.Particle),M.EventDispatcher.initialize(y.prototype),y.prototype.emit=function(l,x){this.currentEmitTime=0,this.totalEmitTimes=M.Util.initValue(l,1/0),x==!0||x=="life"||x=="destroy"?this.life=l=="once"?1:this.totalEmitTimes:isNaN(x)||(this.life=x),this.rate.init()},y.prototype.stopEmit=function(){this.totalEmitTimes=-1,this.currentEmitTime=0},y.prototype.removeAllParticles=function(){for(var l=this.particles.length;l--;)this.particles[l].dead=!0},y.prototype.createParticle=function(l,x){var w=this.parent.pool.get(M.Particle);return this.setupParticle(w,l,x),this.parent&&this.parent.dispatchEvent("PARTICLE_CREATED",w),M.bindEmtterEvent&&this.dispatchEvent("PARTICLE_CREATED",w),w},y.prototype.addSelfInitialize=function(l){l.init?l.init(this):this.initAll()},y.prototype.addInitialize=function(){for(var l=arguments.length;l--;)this.initializes.push(arguments[l])},y.prototype.removeInitialize=function(l){var x=this.initializes.indexOf(l);x>-1&&this.initializes.splice(x,1)},y.prototype.removeInitializers=function(){M.Util.destroyArray(this.initializes)},y.prototype.addBehaviour=function(){for(var l=arguments.length;l--;)this.behaviours.push(arguments[l])},y.prototype.removeBehaviour=function(l){var x=this.behaviours.indexOf(l);x>-1&&this.behaviours.splice(x,1)},y.prototype.removeAllBehaviours=function(){M.Util.destroyArray(this.behaviours)},y.prototype.integrate=function(l){var x=1-this.damping;M.integrator.integrate(this,l,x);for(var w=this.particles.length;w--;){var R=this.particles[w];R.update(l,w),M.integrator.integrate(R,l,x),this.parent&&this.parent.dispatchEvent("PARTICLE_UPDATE",R),M.bindEmtterEvent&&this.dispatchEvent("PARTICLE_UPDATE",R)}},y.prototype.emitting=function(l){if(this.totalEmitTimes=="once"){var x=this.rate.getValue(99999);for(x>0&&(this.cID=x);x--;)this.createParticle();this.totalEmitTimes="none"}else if(!isNaN(this.totalEmitTimes)&&(this.currentEmitTime+=l,this.currentEmitTime<this.totalEmitTimes)){var x=this.rate.getValue(l);for(x>0&&(this.cID=x);x--;)this.createParticle()}},y.prototype.update=function(l){this.age+=l,(this.dead||this.age>=this.life)&&this.destroy(),this.emitting(l),this.integrate(l);for(var x,w=this.particles.length;w--;)x=this.particles[w],x.dead&&(this.parent&&this.parent.dispatchEvent("PARTICLE_DEAD",x),M.bindEmtterEvent&&this.dispatchEvent("PARTICLE_DEAD",x),this.parent.pool.expire(x.reset()),this.particles.splice(w,1))},y.prototype.setupParticle=function(l,x,w){var R=this.initializes,O=this.behaviours;x&&(M.Util.isArray(x)?R=x:R=[x]),w&&(M.Util.isArray(w)?O=w:O=[w]),M.InitializeUtil.initialize(this,l,R),l.addBehaviours(O),l.parent=this,this.particles.push(l)},y.prototype.destroy=function(){this.dead=!0,this.energy=0,this.totalEmitTimes=-1,this.particles.length==0&&(this.removeInitializers(),this.removeAllBehaviours(),this.parent&&this.parent.removeEmitter(this))},M.Emitter=y,M.Util.inherits(b,M.Emitter),b.prototype.addSelfBehaviour=function(){var l=arguments.length,x;for(x=0;x<l;x++)this.selfBehaviours.push(arguments[x])},b.prototype.removeSelfBehaviour=function(l){var x=this.selfBehaviours.indexOf(l);x>-1&&this.selfBehaviours.splice(x,1)},b.prototype.update=function(l){if(b._super_.prototype.update.call(this,l),!this.sleep){var x=this.selfBehaviours.length,w;for(w=0;w<x;w++)this.selfBehaviours[w].applyBehaviour(this,l,w)}},M.BehaviourEmitter=b,M.Util.inherits(_,M.Emitter),_.prototype.initEventHandler=function(){var l=this;this.mousemoveHandler=function(x){l.mousemove.call(l,x)},this.mousedownHandler=function(x){l.mousedown.call(l,x)},this.mouseupHandler=function(x){l.mouseup.call(l,x)},this.mouseTarget.addEventListener("mousemove",this.mousemoveHandler,!1)},_.prototype.emit=function(){this._allowEmitting=!0},_.prototype.stopEmit=function(){this._allowEmitting=!1},_.prototype.setCameraAndCanvas=function(l,x){this.camera=l,this.canvas=x},_.prototype.setCameraAndRenderer=function(l,x){this.camera=l,this.renderer=x,this.canvas=x.domElement},_.prototype.mousemove=function(l){var x=this.canvas.getBoundingClientRect(),w=l.clientX-x.left,R=l.clientY-x.top,O=this.renderer?this.renderer.getPixelRatio():1;w*=O,R*=O,this.mouse.x+=(w-this.mouse.x)*this.ease,this.mouse.y+=(R-this.mouse.y)*this.ease,this.p.copy(M.THREEUtil.toSpacePos(this.mouse,this.camera,this.canvas,this.renderer)),this._allowEmitting&&_._super_.prototype.emit.call(this,"once")},_.prototype.destroy=function(){_._super_.prototype.destroy.call(this),this.mouseTarget.removeEventListener("mousemove",this.mousemoveHandler,!1)},M.FollowEmitter=_;var I=I||{easeLinear:function(l){return l},easeInQuad:function(l){return Math.pow(l,2)},easeOutQuad:function(l){return-(Math.pow(l-1,2)-1)},easeInOutQuad:function(l){return(l/=.5)<1?.5*Math.pow(l,2):-.5*((l-=2)*l-2)},easeInCubic:function(l){return Math.pow(l,3)},easeOutCubic:function(l){return Math.pow(l-1,3)+1},easeInOutCubic:function(l){return(l/=.5)<1?.5*Math.pow(l,3):.5*(Math.pow(l-2,3)+2)},easeInQuart:function(l){return Math.pow(l,4)},easeOutQuart:function(l){return-(Math.pow(l-1,4)-1)},easeInOutQuart:function(l){return(l/=.5)<1?.5*Math.pow(l,4):-.5*((l-=2)*Math.pow(l,3)-2)},easeInSine:function(l){return-Math.cos(l*(M.PI/2))+1},easeOutSine:function(l){return Math.sin(l*(M.PI/2))},easeInOutSine:function(l){return-.5*(Math.cos(M.PI*l)-1)},easeInExpo:function(l){return l===0?0:Math.pow(2,10*(l-1))},easeOutExpo:function(l){return l===1?1:-Math.pow(2,-10*l)+1},easeInOutExpo:function(l){return l===0?0:l===1?1:(l/=.5)<1?.5*Math.pow(2,10*(l-1)):.5*(-Math.pow(2,-10*--l)+2)},easeInCirc:function(l){return-(Math.sqrt(1-l*l)-1)},easeOutCirc:function(l){return Math.sqrt(1-Math.pow(l-1,2))},easeInOutCirc:function(l){return(l/=.5)<1?-.5*(Math.sqrt(1-l*l)-1):.5*(Math.sqrt(1-(l-=2)*l)+1)},easeInBack:function(l){var x=1.70158;return l*l*((x+1)*l-x)},easeOutBack:function(l){var x=1.70158;return(l=l-1)*l*((x+1)*l+x)+1},easeInOutBack:function(l){var x=1.70158;return(l/=.5)<1?.5*l*l*(((x*=1.525)+1)*l-x):.5*((l-=2)*l*(((x*=1.525)+1)*l+x)+2)},setEasingByName:function(l){return I[l]?I[l]:I.easeLinear}};for(var C in I)C!="setEasingByName"&&(M[C]=I[C]);M.ease=I,g.prototype={init:function(l){var x=this;this.proton=l,this.proton.addEventListener("PROTON_UPDATE",function(w){x.onProtonUpdate.call(x,w)}),this.proton.addEventListener("PARTICLE_CREATED",function(w){x.onParticleCreated.call(x,w)}),this.proton.addEventListener("PARTICLE_UPDATE",function(w){x.onParticleUpdate.call(x,w)}),this.proton.addEventListener("PARTICLE_DEAD",function(w){x.onParticleDead.call(x,w)})},remove:function(l){this.proton=null},onParticleCreated:function(l){},onParticleUpdate:function(l){},onParticleDead:function(l){},onProtonUpdate:function(l){}},M.BaseRender=g,M.Util.inherits(p,M.BaseRender),p.prototype.onProtonUpdate=function(){},p.prototype.onParticleCreated=function(l){l.target||(l.body||(l.body=this._body),l.target=this._targetPool.get(l.body),(l.useAlpha||l.useColor)&&(l.target.material.__puid=M.PUID.id(l.body.material),l.target.material=this._materialPool.get(l.target.material))),l.target&&(l.target.position.copy(l.p),this.container.add(l.target))},p.prototype.onParticleUpdate=function(l){l.target&&(l.target.position.copy(l.p),l.target.rotation.set(l.rotation.x,l.rotation.y,l.rotation.z),this.scale(l),l.useAlpha&&(l.target.material.opacity=l.alpha,l.target.material.transparent=!0),l.useColor&&l.target.material.color.copy(l.color))},p.prototype.scale=function(l){l.target.scale.set(l.scale,l.scale,l.scale)},p.prototype.onParticleDead=function(l){l.target&&((l.useAlpha||l.useColor)&&this._materialPool.expire(l.target.material),this._targetPool.expire(l.target),this.container.remove(l.target),l.target=null)},M.MeshRender=p,M.Util.inherits(f,M.BaseRender),f.prototype.onProtonUpdate=function(){},f.prototype.onParticleCreated=function(l){l.target||(l.target=new t.Vector3),l.target.copy(l.p),this.points.geometry.vertices.push(l.target)},f.prototype.onParticleUpdate=function(l){l.target&&l.target.copy(l.p)},f.prototype.onParticleDead=function(l){if(l.target){var x=this.points.geometry.vertices.indexOf(l.target);x>-1&&this.points.geometry.vertices.splice(x,1),l.target=null}},M.PointsRender=f,M.Util.inherits(d,M.MeshRender),d.prototype.scale=function(l){l.target.scale.set(l.scale*l.radius,l.scale*l.radius,1)},M.SpriteRender=d,M.Util.inherits(u,M.BaseRender),u.prototype.onProtonUpdate=function(){},u.prototype.onParticleCreated=function(l){},u.prototype.onParticleUpdate=function(l){},u.prototype.onParticleDead=function(l){},M.CustomRender=u,h.prototype={getPosition:function(){return null},crossing:function(l){switch(this.crossType){case"bound":this._bound(l);break;case"cross":this._cross(l);break;case"dead":this._dead(l)}},_dead:function(l){},_bound:function(l){},_cross:function(l){}},M.Zone=h,M.Util.inherits(c,M.Zone),c.prototype.getPosition=function(){return this.random=Math.random(),this.vector.x=this.x1+this.random*(this.x2-this.x1),this.vector.y=this.y1+this.random*(this.y2-this.y1),this.vector.z=this.z1+this.random*(this.z2-this.z1),this.vector},c.prototype.crossing=function(l){this.log&&(console.error("Sorry LineZone does not support crossing method"),this.log=!1)},M.LineZone=c,M.Util.inherits(a,M.Zone),a.prototype.getPosition=function(){var l,x,w;return function(){return this.random=Math.random(),w=this.random*this.radius,l=M.PI*Math.random(),x=M.PI*2*Math.random(),this.vector.x=this.x+w*Math.sin(l)*Math.cos(x),this.vector.y=this.y+w*Math.sin(x)*Math.sin(l),this.vector.z=this.z+w*Math.cos(l),this.vector}}(),a.prototype._dead=function(l){var x=l.p.distanceTo(this);x-l.radius>this.radius&&(l.dead=!0)},a.prototype._bound=function(){var l=new M.Vector3D,x=new M.Vector3D,w;return function(R){var O=R.p.distanceTo(this);O+R.radius>=this.radius&&(l.copy(R.p).sub(this).normalize(),x.copy(R.v),w=2*x.dot(l),R.v.sub(l.scalar(w)))}}(),a.prototype._cross=function(l){this.log&&(console.error("Sorry SphereZone does not support _cross method"),this.log=!1)},M.SphereZone=a,M.Util.inherits(o,M.Zone),o.prototype.getPosition=function(){var l=this.geometry.vertices,x=l[l.length*Math.random()>>0];return this.vector.x=x.x*this.scale,this.vector.y=x.y*this.scale,this.vector.z=x.z*this.scale,this.vector},o.prototype.crossing=function(l){this.log&&(console.error("Sorry MeshZone does not support crossing method"),this.log=!1)},M.MeshZone=o,M.Util.inherits(s,M.Zone),s.prototype.getPosition=function(){return this.vector.x=this.x,this.vector.y=this.y,this.vector.z=this.z,this.vector},s.prototype.crossing=function(l){this.log&&(console.error("Sorry PointZone does not support crossing method"),this.log=!1)},M.PointZone=s,M.Util.inherits(i,M.Zone),i.prototype.getPosition=function(){return this.vector.x=this.x+M.MathUtils.randomAToB(-.5,.5)*this.width,this.vector.y=this.y+M.MathUtils.randomAToB(-.5,.5)*this.height,this.vector.z=this.z+M.MathUtils.randomAToB(-.5,.5)*this.depth,this.vector},i.prototype._dead=function(l){(l.p.x+l.radius<this.x-this.width/2||l.p.x-l.radius>this.x+this.width/2)&&(l.dead=!0),(l.p.y+l.radius<this.y-this.height/2||l.p.y-l.radius>this.y+this.height/2)&&(l.dead=!0),(l.p.z+l.radius<this.z-this.depth/2||l.p.z-l.radius>this.z+this.depth/2)&&(l.dead=!0)},i.prototype._bound=function(l){l.p.x-l.radius<this.x-this.width/2?(l.p.x=this.x-this.width/2+l.radius,l.v.x*=-this.friction,this._static(l,"x")):l.p.x+l.radius>this.x+this.width/2&&(l.p.x=this.x+this.width/2-l.radius,l.v.x*=-this.friction,this._static(l,"x")),l.p.y-l.radius<this.y-this.height/2?(l.p.y=this.y-this.height/2+l.radius,l.v.y*=-this.friction,this._static(l,"y")):l.p.y+l.radius>this.y+this.height/2&&(l.p.y=this.y+this.height/2-l.radius,l.v.y*=-this.friction,this._static(l,"y")),l.p.z-l.radius<this.z-this.depth/2?(l.p.z=this.z-this.depth/2+l.radius,l.v.z*=-this.friction,this._static(l,"z")):l.p.z+l.radius>this.z+this.depth/2&&(l.p.z=this.z+this.depth/2-l.radius,l.v.z*=-this.friction,this._static(l,"z"))},i.prototype._static=function(l,x){l.v[x]*l.a[x]>0||Math.abs(l.v[x])<Math.abs(l.a[x])*.0167*this.max&&(l.v[x]=0,l.a[x]=0)},i.prototype._cross=function(l){l.p.x+l.radius<this.x-this.width/2&&l.v.x<=0?l.p.x=this.x+this.width/2+l.radius:l.p.x-l.radius>this.x+this.width/2&&l.v.x>=0&&(l.p.x=this.x-this.width/2-l.radius),l.p.y+l.radius<this.y-this.height/2&&l.v.y<=0?l.p.y=this.y+this.height/2+l.radius:l.p.y-l.radius>this.y+this.height/2&&l.v.y>=0&&(l.p.y=this.y-this.height/2-l.radius),l.p.z+l.radius<this.z-this.depth/2&&l.v.z<=0?l.p.z=this.z+this.depth/2+l.radius:l.p.z-l.radius>this.z+this.depth/2&&l.v.z>=0&&(l.p.z=this.z-this.depth/2-l.radius)},M.BoxZone=i,M.Util.inherits(n,M.Zone),n.prototype.getPosition=function(){var l=new M.Vector3D,x;return function(){return x=this.renderer.domElement,l.x=Math.random()*x.width,l.y=Math.random()*x.height,this.vector.copy(M.THREEUtil.toSpacePos(l,this.camera,x)),this.vector}}(),n.prototype._dead=function(l){var x=M.THREEUtil.toScreenPos(l.p,this.camera,this.renderer.domElement),w=this.renderer.domElement;(x.y+l.radius<-this.dis&&this.d1||x.y-l.radius>w.height+this.dis&&this.d3)&&(l.dead=!0),(x.x+l.radius<-this.dis&&this.d4||x.x-l.radius>w.width+this.dis&&this.d2)&&(l.dead=!0)},n.prototype._cross=function(){var l=new M.Vector3D;return function(x){var w=M.THREEUtil.toScreenPos(x.p,this.camera,this.renderer.domElement),R=this.renderer.domElement;w.y+x.radius<-this.dis?(l.x=w.x,l.y=R.height+this.dis+x.radius,x.p.y=M.THREEUtil.toSpacePos(l,this.camera,R).y):w.y-x.radius>R.height+this.dis&&(l.x=w.x,l.y=-this.dis-x.radius,x.p.y=M.THREEUtil.toSpacePos(l,this.camera,R).y),w.x+x.radius<-this.dis?(l.y=w.y,l.x=R.width+this.dis+x.radius,x.p.x=M.THREEUtil.toSpacePos(l,this.camera,R).x):w.x-x.radius>R.width+this.dis&&(l.y=w.y,l.x=-this.dis-x.radius,x.p.x=M.THREEUtil.toSpacePos(l,this.camera,R).x)}}(),n.prototype._bound=function(l){var x=M.THREEUtil.toScreenPos(l.p,this.camera,this.renderer.domElement),w=this.renderer.domElement;(x.y+l.radius<-this.dis||x.y-l.radius>w.height+this.dis)&&(l.v.y*=-1),(x.x+l.radius<-this.dis||x.x-l.radius>w.width+this.dis)&&(l.v.y*=-1)},M.ScreenZone=n;var j=function(){if(window.console&&window.console.trace){var l=Array.prototype.slice.call(arguments),x=arguments[0]+"";if(x.indexOf("+")==0){var w=parseInt(arguments[0]);j.once<w&&(l.shift(),console.trace.apply(console,l),j.once++)}else l.unshift("+15"),j.apply(console,l)}};j.once=0,M.log=j;var ie=ie||{addEventListener:function(l,x){l.addEventListener("PROTON_UPDATE",function(w){x(w)})},drawZone:function(l,x,w){var R,O,ne;w instanceof M.PointZone?R=new t.SphereGeometry(15):w instanceof M.LineZone||(w instanceof M.BoxZone?R=new t.BoxGeometry(w.width,w.height,w.depth):w instanceof M.SphereZone?R=new t.SphereGeometry(w.radius,10,10):w instanceof M.MeshZone&&(w.geometry instanceof t.Geometry?R=w.geometry:R=w.geometry.geometry,R=new t.SphereGeometry(w.radius,10,10))),O=new t.MeshBasicMaterial({color:"#2194ce",wireframe:!0}),ne=new t.Mesh(R,O),x.add(ne),this.addEventListener(l,function(le){ne.position.set(w.x,w.y,w.z)})},drawEmitter:function(l,x,w,R){var O=new t.OctahedronGeometry(15),ne=new t.MeshBasicMaterial({color:R||"#aaa",wireframe:!0}),le=new t.Mesh(O,ne);x.add(le),this.addEventListener(l,function(){le.position.copy(w.p),le.rotation.set(w.rotation.x,w.rotation.y,w.rotation.z)})},renderInfo:function(){function l(w){var R=w.emitters[0];return Math.round(R.p.x)+","+Math.round(R.p.y)+","+Math.round(R.p.z)}function x(w,R){var O=R=="material"?"_materialPool":"_targetPool",ne=w.renderers[0];return ne[O].cID}return function(w,R){this.addInfo(R);var O="";switch(this._infoType){case 2:O+="emitter:"+w.emitters.length+"<br>",O+="em speed:"+w.emitters[0].cID+"<br>",O+="pos:"+l(w);break;case 3:O+=w.renderers[0].name+"<br>",O+="target:"+x(w,"target")+"<br>",O+="material:"+x(w,"material");break;default:O+="particles:"+w.getCount()+"<br>",O+="pool:"+w.pool.getCount()+"<br>",O+="total:"+(w.getCount()+w.pool.getCount())}this._infoCon.innerHTML=O}}(),addInfo:function(){return function(l){var x=this;if(!this._infoCon){this._infoCon=document.createElement("div"),this._infoCon.style.cssText=["position:fixed;bottom:0px;left:0;cursor:pointer;","opacity:0.9;z-index:10000;padding:10px;font-size:12px;","width:120px;height:50px;background-color:#002;color:#0ff;"].join(""),this._infoType=1,this._infoCon.addEventListener("click",function(O){x._infoType++,x._infoType>3&&(x._infoType=1)},!1);var w,R;switch(l){case 2:w="#201",R="#f08";break;case 3:w="#020",R="#0f0";break;default:w="#002",R="#0ff"}this._infoCon.style["background-color"]=w,this._infoCon.style.color=R}this._infoCon.parentNode||document.body.appendChild(this._infoCon)}}()};return M.Debug=ie,M})})(Xl);var yt=Xl.exports;const ns=new Hd,bd=new kl;let v0={stats:{},texture:{},dumpObject:function(r,e=[],t=!0,n=""){const i=t?"\u2514\u2500":"\u251C\u2500";e.push(`${n}${n?i:""}${r.name||"*no-name*"} [${r.type}]`);const s=n+(t?"  ":"\u2502 "),o=r.children.length-1;return r.children.forEach((a,c)=>{const h=c===o;this.dumpObject(a,e,h,s)}),e},addFloor:function(r){let e=new Hl(new Cd(1100,1100),new Po({color:16777215,depthWrite:!1}));e.rotation.x=-Math.PI/2,e.receiveShadow=!0,r.add(e);let t=new Ld(1100,110,0,0);t.material.opacity=.2,t.material.transparent=!0,r.add(t)},getDocumentMouseDownCoord:function(r,e){r.preventDefault();let t=new Pd,n=new Id;return n.x=r.clientX/window.innerWidth*2-1,n.y=-(r.clientY/window.innerHeight)*2+1,t.setFromCamera(n,e.camera),t.intersectObjects(e.scene,!0)},creatPipe:function(r){const e=this.createPath(r.points),t=new Dd(e,100,r.radius,8,!1),n=new Gl;let i;r.texture!==void 0?(this.texture=n.load(r.texture),this.texture.wrapS=Vl,this.texture.wrapT=Vl,this.texture.repeat.set(5,1),i=new Po({map:this.texture,transparent:!0,depthTest:!1})):i=new Po({color:r.color,transparent:!0,opacity:r.opacity,depthWrite:!1});const s=new Hl(t,i);return s.rotation.x=Math.PI*.5,{texture:this.texture,mesh:s}},createPath:function(r){return r=r.map(e=>new kl(...e)),new Fd(r)},createSprite:function(){let r=new Gl().load("images/dot.png"),e=new Ud({map:r,color:16711680,blending:Bd,fog:!0});return new Nd(e)},createEmitter:function(){let r=new yt.Emitter;return r.rate=new yt.Rate(new yt.Span(10,15),new yt.Span(.05,.1)),r.addInitialize(new yt.Body(this.createSprite())),r.addInitialize(new yt.Mass(1)),r.addInitialize(new yt.Life(1,3)),r.addInitialize(new yt.Position(new yt.SphereZone(20))),r.addInitialize(new yt.V(new yt.Span(500,800),new yt.Vector3D(0,1,0),30)),r.addBehaviour(new yt.RandomDrift(10,10,10,.05)),r.addBehaviour(new yt.Scale(new yt.Span(.2,3.5),0)),r.addBehaviour(new yt.G(6)),r.addBehaviour(new yt.Color("#25c7e5",["#cdecec","#ffff11"],1/0,yt.easeOutSine)),r.p.x=0,r.p.y=-150,r.emit(),r},createSkybox:function(r){const e=new Od;e.setPath("images/skybox/"),r.background=e.load(["posx.jpg","negx.jpg","posy.jpg","negy.jpg","posz.jpg","negz.jpg"])},createSky:function(){ns.scale.setScalar(1e4),this.scene.add(ns);const r=ns.material.uniforms;r.turbidity.value=10,r.rayleigh.value=2,r.mieCoefficient.value=.005,r.mieDirectionalG.value=.8},updateSun(){const r={elevation:18,azimuth:-50},e=new zd(this.renderer),t=Wl.degToRad(90-r.elevation),n=Wl.degToRad(r.azimuth);bd.setFromSphericalCoords(1,t,n),ns.material.uniforms.sunPosition.value.copy(bd),this.scene.environment=e.fromScene(ns).texture}};export{v0 as t};
//# sourceMappingURL=threeUniversal.9ce15fef.js.map
