{"version":3,"file":"newArcgis.d7090fab.js","sources":["../../src/components/newArcgis.vue"],"sourcesContent":["<template>\n  <div id=\"sceneContainer\" ref=\"sceneContainer\"></div>\n</template>\n\n<script setup>\nimport { onMounted, reactive, ref } from \"vue\";\n// import * as dat from \"dat.gui\";\nimport * as THREE from \"three\";\n// import { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n// import threeMethods from \"../utils/index.js\";\nimport esriConfig from \"@arcgis/core/config.js\";\nesriConfig.assetsPath = \"./assets\";\nimport Map from \"@arcgis/core/Map\";\nimport SceneView from \"@arcgis/core/views/SceneView\";\n// import Basemap from \"@arcgis/core/Basemap\";\n// import TileLayer from \"@arcgis/core/layers/TileLayer\";\nimport * as externalRenderers from \"@arcgis/core/views/3d/externalRenderers\"; //外部渲染器\nimport * as webMercatorUtils from \"@arcgis/core/geometry/support/webMercatorUtils\";\n// import SpatialReference from \"@arcgis/core/geometry/SpatialReference\";\nimport ResourceTracker from \"../utils/ResourceTracker\";\nimport Stats from \"three/examples/jsm/libs/stats.module\";\nconst sceneContainer = ref(null);\n// 以广州附近的点为示例\nconst pointsArr = [\n  [115.80895340787583, 30.92933111293343, 20],\n  [115.81947621477968, 30.936026430486265, 20],\n  [115.85073577332635, 30.952730603143078, 20],\n  [115.86830705038578, 30.964969701156637, 20],\n  [115.87796494895557, 30.970050440481813, 20],\n  [115.88263291871093, 30.97587476869184, 20],\n  [115.88153549018487, 30.97619308639916, 20],\n  [115.88860467181571, 30.985581605596618, 20],\n  [115.89039457558401, 30.99614115304192, 20],\n  [115.89037581420371, 30.99986573852132, 20],\n  [115.88982453627196, 31.003621647335926, 20],\n  [115.88822886767906, 30.999078415194415, 20],\n  [115.88681216877917, 30.997464365151867, 20],\n  [115.88286139825868, 30.99686255666582, 20],\n  [115.87841763117079, 30.999826971071514, 20],\n  [115.86308179931808, 30.99584156461405, 20],\n  [115.85510630972263, 30.993171784031908, 20],\n  [115.86174910808289, 30.993473404196706, 20],\n  [115.86231959908358, 30.99068362090549, 20],\n];\nlet texture;\nlet material;\nlet mesh;\nlet geometry;\nconst colors = [\"#ffff00\", \"#00ffe2\", \"#9800ff\", \"#ff6767\"];\nlet color = colors[Math.floor(Math.random() * colors.length)];\nconst resMgr = new ResourceTracker();\nconst track = resMgr.track.bind(resMgr);\nlet sceneAdd = reactive({});\nlet stats;\nonMounted(() => {\n  initArcMap();\n  initStats();\n  iterativeScene();\n});\n\n/**\n * 初始化ArcGIS 相关\n */\nfunction initArcMap() {\n  /*  const basemap = new Basemap({\n    baseLayers: [\n      new TileLayer({\n        url: \"http://map.geoq.cn/arcgis/rest/services/ChinaOnlineStreetPurplishBlue/MapServer\",\n        // url: \"http://10.194.69.43/server/rest/services/GDBasemap/MapServer\",\n        title: \"Basemap\",\n      }),\n    ],\n  });*/\n  // const map = new Map({ basemap });\n  const map = new Map({ basemap: \"satellite\" });\n\n  let view = new SceneView({\n    container: sceneContainer.value,\n    map: map,\n    environment: {\n      background: {\n        type: \"color\",\n        color: [216, 214, 209, 0.3],\n      },\n      starsEnabled: false,\n      atmosphereEnabled: true,\n    },\n    camera: {\n      // position: [113.23, 23.16, 2630.6413883436],\n      position: [115.87107, 30.9969, 1315],\n      tilt: 1,\n    },\n  });\n  view.ui.remove([\"attribution\", \"zoom\"]);\n  view.ui.empty(\"top-left\");\n  window.view = view;\n\n  map.ground.opacity = 0.5;\n  // 开启地下导航模式 可选属性值 {none: 地下} / {stay-above:地上}\n  // map.ground.navigationConstraint = { type: \"none\" };\n}\n\nfunction initStats() {\n  stats = new Stats();\n  stats.showPanel(0);\n  document.body.appendChild(stats.dom);\n}\n\n/**\n *\n * @Description: 以下方法参照了\n * https://developers.arcgis.com/javascript/latest/api-reference/esri-views-3d-externalRenderers.html\n * https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-webMercatorUtils.html\n * https://blog.csdn.net/qq_37155408/article/details/115693043?spm=1001.2014.3001.5502\n * http://www.yanhuangxueyuan.com/Three.js_course/texture.html#2\n * https://www.cnblogs.com/xuejianxiyang/p/9719715.html\n * https://threejs.org/docs/index.html#manual/en/introduction/Drawing-lines\n * https://threejs.org/docs/index.html?q=geometry#api/en/geometries/TubeGeometry\n * @author parabellum\n * @date 2022/1/5\n * @type {{setup: myExternalRenderer.setup, render: myExternalRenderer.render}}\n */\nclass MyExternalRenderer {\n  constructor(option) {\n    this.view = option;\n    this.scene = null; // three.js 中的场景\n    this.camera = null; // three.js 相机\n    this.renderer = null; // three.js 渲染器\n  }\n\n  /**\n   * Setup function, called once by the ArcGIS JS API.\n   注册对象时被调用,只调用一次,用于初始化three.js创建的对象\n   */\n  setup(context) {\n    this.renderer = new THREE.WebGLRenderer({\n      context: context.gl, // 可用于将渲染器附加到已有的渲染环境(RenderingContext)中\n      premultipliedAlpha: false, // renderer是否假设颜色有 premultiplied alpha. 默认为true\n    });\n    this.renderer.setPixelRatio(window.devicePixelRatio); // 设置设备像素比。通常用于避免HiDPI设备上绘图模糊\n    this.renderer.setViewport(0, 0, window.view.width, window.view.height); // 视口大小设置\n\n    // 防止Three.js清除ArcGIS JS API提供的缓冲区。\n    this.renderer.autoClearDepth = false; // 定义renderer是否清除深度缓存\n    this.renderer.autoClearStencil = false; // 定义renderer是否清除模板缓存\n    this.renderer.autoClearColor = false; // 定义renderer是否清除颜色缓存\n\n    /*   // 此段暂时预留   此段替换为了render方法中 context.bindRenderTarget();\n    // ArcGIS JS API渲染自定义离屏缓冲区，而不是默认的帧缓冲区。\n    // 我们必须将这段代码注入到three.js运行时中，以便绑定这些缓冲区而不是默认的缓冲区。\n    const originalSetRenderTarget = this.renderer.setRenderTarget.bind(\n      this.renderer\n    );\n    this.renderer.setRenderTarget = function (target) {\n      originalSetRenderTarget(target);\n      if (target == null) {\n        // 绑定外部渲染器应该渲染到的颜色和深度缓冲区\n        context.bindRenderTarget();\n      }\n    };*/\n\n    this.scene = new THREE.Scene(); // 场景\n    this.camera = new THREE.PerspectiveCamera(); // 相机\n\n    // 上帝说比需要有光， 不然你的管就黑了\n    const ambientLight = new THREE.AmbientLight(0x909090); // 自然光，每个几何体的每个面都有光\n    const pointLight = new THREE.PointLight(0xffffff, 0.6);\n    pointLight.position.x = 2;\n    pointLight.position.y = 3;\n    pointLight.position.z = 4;\n    this.scene.add(ambientLight);\n    this.scene.add(pointLight);\n    // 添加坐标轴辅助工具\n    const axesHelper = new THREE.AxesHelper(5000000);\n    this.scene.add(axesHelper);\n    // 更新view的resolution, 在场景中渲染管线等需要此句之后\n    this.scene.userData.viewResolution = window.view.resolution;\n    //  基础配置结束\n    initPipeConf(this.scene);\n  }\n  render(context) {\n    // 更新相机参数\n    const cam = context.camera;\n    this.camera.position.set(cam.eye[0], cam.eye[1], cam.eye[2]);\n    this.camera.up.set(cam.up[0], cam.up[1], cam.up[2]);\n    this.camera.lookAt(\n      new THREE.Vector3(cam.center[0], cam.center[1], cam.center[2])\n    );\n    // 投影矩阵可以直接复制\n    this.camera.projectionMatrix.fromArray(cam.projectionMatrix);\n    // animate start\n    if (texture) {\n      texture.offset.x += -0.005; // 贴图运动速度\n      texture.needsUpdate = true;\n    }\n    stats.update();\n    // requestAnimationFrame(animate);\n    this.renderer.render(this.scene, this.camera);\n    // resize start\n    const sizes = {\n      width: window.innerWidth,\n      height: window.innerHeight,\n    };\n    window.addEventListener(\"resize\", () => {\n      // Update sizes\n      sizes.width = window.innerWidth;\n      sizes.height = window.innerHeight;\n      // Update camera\n      this.camera.aspect = sizes.width / sizes.height;\n      this.camera.updateProjectionMatrix();\n      // Update renderer\n      this.renderer.setSize(sizes.width, sizes.height);\n      this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n    });\n    // 更新view的resolution\n    // scene.userData.viewResolution = this.view.resolution;\n    // 绘制场景\n    this.renderer.state.reset();\n    context.bindRenderTarget();\n    this.renderer.render(this.scene, this.camera);\n    // 请求重绘视图。\n    externalRenderers.requestRender(window.view);\n    // cleanup\n    context.resetWebGLState();\n  }\n}\n\nfunction registerRenderer() {\n  // console.log(myExternalRenderer, window.view);\n  // 向SceneView实例注册外部渲染器\n  console.log(sceneAdd);\n  sceneAdd = null;\n  sceneAdd = new MyExternalRenderer(window.view);\n  externalRenderers.add(window.view, sceneAdd);\n}\n\n/**\n * 经纬度坐标点转换为渲染坐标系（three js）中的点坐标\n * @param {number} longitude 经度\n * @param {number} latitude 纬度\n * @param {number} height 高度\n * @return {array} 返回渲染坐标系中(three js)的点坐标[x, y, z]\n */\nfunction pointTransform(longitude, latitude, height) {\n  let transformation = new Array(16);\n  // 将经纬度坐标转换为xy值\n  let pointXY = webMercatorUtils.lngLatToXY(longitude, latitude);\n  /*let pointXY = CoordTrans.GaussTransform.GZ2000XYtoG2000BL(\n    longitude,\n    latitude\n  );*/\n  // 先转换高度为0的点\n  externalRenderers.renderCoordinateTransformAt(\n    window.view,\n    [pointXY[0], pointXY[1], height], // 坐标在地面上的点[x值, y值, 高度值]\n    window.view.spatialReference,\n    transformation\n  );\n  return [transformation[12], transformation[13], transformation[14]];\n}\n\n/**\n * 管线初始配置 （直径，颜色，透明度等）\n */\nfunction initPipeConf() {\n  const transparentConf = {\n    points: pointsArr,\n    color: 0x4488ff,\n    radius: 1.5,\n    opacity: 0.1,\n  };\n  // 管道内流动的液体\n  const conf = {\n    points: pointsArr,\n    // texture: new THREE.CanvasTexture(getTextCanvas(\"➯ ➮ ➯\")), // 文本贴图\n    texture: \"images/allow2.png\",\n    radius: 3,\n  };\n  // 创建管道\n  const { texture: tubeTexture0, mesh: pipe0 } = creatPipe(transparentConf);\n  const { texture: tubeTexture1, mesh: pipe1 } = creatPipe(conf);\n\n  console.log(sceneAdd);\n  sceneAdd.scene.add(track(pipe0));\n  sceneAdd.scene.add(track(pipe1));\n  // return { tubeTexture0, tubeTexture1 };\n  return { tubeTexture1 };\n}\n\n/**\n *  创建管线\n */\nfunction creatPipe(conf) {\n  const path = createPath(conf.points);\n  geometry = track(new THREE.TubeGeometry(path, 100, conf.radius, 20, false));\n  const textureLoader = new THREE.TextureLoader();\n\n  if (conf.texture !== undefined) {\n    texture = textureLoader.load(conf.texture, () => {\n      /*     //点光源\n      let point = new THREE.PointLight(0xffffff);\n      point.position.set(\n        -2382004.007139146,\n        4925447.561184913,\n        3278247.9998681694\n      ); //点光源位置\n      myExternalRenderer.scene.add(point); //点光源添加到场景中*/\n    });\n    // 文本贴图\n    // texture = new THREE.CanvasTexture(getTextCanvas(\"➯ ➮ ➯\"));\n    // 设置阵列模式为 RepeatWrapping\n    texture.wrapS = THREE.RepeatWrapping;\n    texture.wrapT = THREE.RepeatWrapping;\n    // 设置x方向的偏移(沿着管道路径方向)，y方向默认1\n    // 等价texture.repeat= new THREE.Vector2(3,1)\n    texture.repeat.set(300, 1); // x,y 贴图重复\n    texture.offset.y = 0.15; //设置管道纹理偏移\n\n    // // 模拟管线运动动画，将两个素材图按比例合并，然后生成贴图texture\n    // material = new THREE.MeshPhongMaterial({\n    material = track(\n      new THREE.MeshBasicMaterial({\n        map: texture,\n        transparent: true,\n        // opacity: 0.99,\n        side: THREE.DoubleSide,\n        // alphaTest: 0.01, // 解决了贴图的透明部分显示为黑色\n        // depthTest: false, // 深度检测\n      })\n    );\n    /*  //尝试使用文本贴图\n    material = new THREE.MeshBasicMaterial({\n      /!*map: texture,\n      transparent: true,\n      // opacity: 0.1,\n      color: conf.color,*!/\n      color: 0x85a9a9,\n      side: 200,\n      map: texture,\n      transparent: true,\n      depthWrite: false,\n      opacity: 1,\n    });*/\n  } else {\n    material = track(\n      new THREE.MeshPhongMaterial({\n        color: conf.color,\n        transparent: true,\n        opacity: conf.opacity,\n      })\n    );\n    material.depthWrite = false;\n  }\n\n  mesh = track(new THREE.Mesh(geometry, material));\n  return { texture, mesh };\n}\n\n/**\n * 将经纬度坐标转为 渲染系坐标后生成管线的渲染坐标点\n * @param pointsArr\n * @returns {CatmullRomCurve3}\n */\nfunction createPath(pointsArr) {\n  let newArr = [];\n  pointsArr.map((e) => newArr.push(pointTransform(...e)));\n  let points = newArr.map((point) => new THREE.Vector3(...point));\n  // 利用CatmullRomCurve3 创建路径，不过是平滑的三维样条曲线\n  return new THREE.CatmullRomCurve3(points);\n}\n\n/*function animate(time) {\n  time *= 0.001;\n  texture.offset.x = (time * 1) % 1; // 贴图运动速度\n  texture.needsUpdate = true;\n\n  // const elapsedTime = clock.getElapsedTime();\n  requestAnimationFrame(animate);\n  renderer.render(scene, camera);\n}\n\nfunction resize() {\n  const sizes = {\n    width: window.innerWidth,\n    height: window.innerHeight,\n  };\n  window.addEventListener(\"resize\", () => {\n    // Update sizes\n    sizes.width = window.innerWidth;\n    sizes.height = window.innerHeight;\n\n    // Update camera\n    camera.aspect = sizes.width / sizes.height;\n    camera.updateProjectionMatrix();\n\n    // Update renderer\n    renderer.setSize(sizes.width, sizes.height);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n  });\n}*/\n\n/**\n * 创建文本贴图\n * @param text\n * @returns {HTMLCanvasElement}\n */\nfunction getTextCanvas(text) {\n  let width = 512,\n    height = 256;\n  let canvas = document.createElement(\"canvas\");\n  canvas.width = width;\n  canvas.height = height;\n  let ctx = canvas.getContext(\"2d\");\n  ctx.fillStyle = \"#dc3f3f\";\n  ctx.fillRect(0, 0, width, height);\n  ctx.font = 50 + 'px \"sans-serif';\n  ctx.fillStyle = \"#2891FF\";\n  ctx.textAlign = \"center\";\n  ctx.textBaseline = \"middle\";\n  ctx.fillText(text, width / 2, height / 2);\n  return canvas;\n}\n\n/**\n * 使用圆标记了管线的起始点\n * @param Point\n */\nfunction createCircle(Point) {\n  let endPoint = pointTransform(...Point);\n  let radius = scene.userData.viewResolution;\n  // 生成圆环\n  const circleGeometry = new THREE.CircleGeometry(radius, 32);\n  const ringMaterial = new THREE.MeshBasicMaterial({\n    color: new THREE.Color(color),\n    side: THREE.DoubleSide,\n    transparent: true, // 定义此材质是否透明\n    opacity: 1,\n  });\n  const circleMesh = new THREE.Mesh(circleGeometry, ringMaterial);\n  // 设置终点圆圈的位置\n  circleMesh.position.set(endPoint[0], endPoint[1], endPoint[2]);\n  // 计算调整姿态的角度\n  let deltaX = Math.atan(endPoint[2] / endPoint[1]);\n  let deltaZ = Math.atan(\n    endPoint[0] /\n      Math.sqrt(endPoint[1] * endPoint[1] + endPoint[2] * endPoint[2])\n  );\n  // // 如果 y < 0 需要加上180°\n  if (endPoint[1] < 0) {\n    deltaX += Math.PI;\n  } else {\n    deltaZ *= -1;\n  }\n  // 调整圆圈姿态\n  circleMesh.rotation.x = deltaX;\n  circleMesh.rotation.z = deltaZ;\n  circleMesh.rotateOnAxis(new THREE.Vector3(1, 0, 0), Math.PI / 2); // 再沿X轴旋转90°\n  // circleMesh.visible = false;\n  scene.add(circleMesh);\n}\n\nfunction dispose(seconds = 0) {\n  return new Promise((resolve) =>\n    setTimeout(() => {\n      resMgr.dispose();\n      this.renderer.dispose();\n      this.renderer.forceContextLoss();\n      this.renderer.content = null;\n      let gl = this.renderer.domElement.getContext(\"webgl\");\n      gl && gl.getExtension(\"WEBGL_lose_context\").loseContext();\n      console.log(this.renderer.info);\n    }, seconds * 1000)\n  );\n}\n\nfunction waitSeconds(seconds = 0) {\n  return new Promise((resolve) => setTimeout(resolve, seconds * 1000));\n}\nlet count = 0;\nasync function iterativeScene() {\n  for (;;) {\n    count++;\n    registerRenderer();\n\n    await waitSeconds(3);\n\n    resMgr.dispose();\n    console.log(sceneAdd.renderer.info.memory);\n    await waitSeconds(1);\n    console.log(count);\n  }\n}\n</script>\n\n<style scoped>\n#sceneContainer {\n  width: 100%;\n  height: 100%;\n}\n\n#sceneContainer,\ncanvas {\n  position: fixed;\n  top: 0;\n  left: 0;\n  outline: none;\n}\n</style>\n"],"names":["esriConfig","Map","SceneView","THREE.WebGLRenderer","THREE.Scene","THREE.PerspectiveCamera","THREE.AmbientLight","THREE.PointLight","THREE.AxesHelper","THREE.Vector3","externalRenderers.requestRender","externalRenderers.add","webMercatorUtils.lngLatToXY","externalRenderers.renderCoordinateTransformAt","THREE.TubeGeometry","THREE.TextureLoader","THREE.RepeatWrapping","THREE.MeshBasicMaterial","THREE.DoubleSide","THREE.MeshPhongMaterial","THREE.Mesh","THREE.CatmullRomCurve3"],"mappings":"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"}