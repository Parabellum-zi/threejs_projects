{"version":3,"file":"textGeometry.e4f047cd.js","sources":["../../src/components/textGeometry.vue"],"sourcesContent":["<template>\n  <div id=\"sceneContainer\" ref=\"sceneContainer\">\n    <input\n      class=\"color_pick\"\n      type=\"color\"\n      @change=\"handleInputChange\"\n      value=\"{{ state.backgroundColor }}\"\n    />\n    <button class=\"pass_button\" @click.stop=\"handleRenderChange\">\n      标签<span class=\"highlight\">{{ state.renderPass ? \"开\" : \"关\" }}</span>\n\n      {{ state.renderPass }}\n    </button>\n  </div>\n</template>\n<script setup>\nimport Base3D from \"../utils/base3D\";\nimport threeUniversal from \"../utils/threeUniversal\";\nimport { reactive, ref, onMounted } from \"vue\";\nimport * as THREE from \"three\";\nimport { FontLoader } from \"three/examples/jsm/loaders/FontLoader.js\";\nimport { TextGeometry } from \"three/examples/jsm/geometries/TextGeometry.js\";\n\nlet state = reactive({\n  backgroundColor: \"#3cd4cf\",\n  renderPass: !(window.navigator.userAgent.toLowerCase().indexOf(\"mobile\") > 0),\n  // renderPass: true,\n});\n\nlet data = reactive({\n  base3D: {},\n});\nconst sceneContainer = ref(null);\n\nlet labels3d = [\n  { x: -106, y: 4, z: 211, name: \"一期沉沙池\" },\n  { x: -106, y: 4, z: 148, name: \"二期沉沙池\" },\n];\nonMounted(() => {\n  initScene();\n  isFullScene();\n});\n\nfunction handleInputChange(e) {\n  state.backgroundColor = e.target.value;\n}\n\nfunction handleRenderChange() {\n  state.renderPass = !state.renderPass;\n  console.log(state);\n}\n\n/**\n * 双击是否全屏\n */\nfunction isFullScene() {\n  window.addEventListener(\"dblclick\", () => {\n    const fullscreenElement =\n      document.fullscreenElement || document.webkitFullscreenElement;\n    if (!fullscreenElement) {\n      if (sceneContainer.value.requestFullscreen) {\n        sceneContainer.value.requestFullscreen();\n      } else if (sceneContainer.value.webkitRequestFullscreen) {\n        sceneContainer.value.webkitRequestFullscreen();\n      }\n      data.base3D.scene.background = new THREE.Color(state.backgroundColor);\n    } else {\n      if (document.exitFullscreen) {\n        document.exitFullscreen();\n      } else if (document.webkitExitFullscreen) {\n        document.webkitExitFullscreen();\n      }\n      data.base3D.scene.background = \"\";\n      // composer.render();\n    }\n  });\n}\n\nfunction initScene() {\n  data.base3D = new Base3D(sceneContainer.value);\n  threeUniversal.addFloor(data.base3D.scene);\n  labels3d.map((item) => createText(item));\n\n  initContent();\n}\n/**\n * 原生中文无法显示 使用https://gero3.github.io/facetype.js/ 将.tff 格式的文字转为 .json 格式\n */\nfunction createText(options) {\n  let { x, y, z, name } = options;\n  const loader = new FontLoader();\n  loader.load(\"/fonts/STSong_Regular.json\", (font) => {\n    let fontGeometry = new TextGeometry(name, {\n      size: 8, //字号大小，一般为大写字母的高度\n      height: 2, //文字的厚度\n      weight: \"normal\", //值为'normal'或'bold'，表示是否加粗\n      font: font, //字体，默认是'helvetiker'，需对应引用的字体文件\n      style: \"normal\", //值为'normal'或'italics'，表示是否斜体\n      bevelThickness: 1, //倒角厚度\n      bevelSize: 1, //倒角宽度\n      curveSegments: 30, //弧线分段数，使得文字的曲线更加光滑\n      bevelEnabled: true, //布尔值，是否使用倒角，意为在边缘处斜切\n    });\n    fontGeometry.computeBoundingBox(); //绑定盒子模型\n    // 文字的材质\n    /*    let fontMaterial = new THREE.MeshNormalMaterial({\n      flatShading: THREE.FlatShading,\n      transparent: true,\n      opacity: 0.9,\n    });*/\n    // let fontMaterial = new THREE.MeshBasicMaterial({ color: 0xa5e5e9 });\n    let fontMaterial = new THREE.MeshBasicMaterial({ color: 0x54afe8 });\n    let fonts = new THREE.Mesh(fontGeometry, fontMaterial);\n    // 计算出整个模型宽度的一半, 不然模型就会绕着x = 0,中心旋转\n    /*    fonts.position.x =\n      -(fontGeometry.boundingBox.max.x - fontGeometry.boundingBox.min.x) / 2;*/\n    fonts.position.set(x, y, z);\n    data.base3D.scene.add(fonts);\n  });\n}\n\n/**\n * 生成模型 目的是为修改字体样式\n * @param geom\n */\nfunction createMesh(geom) {\n  //设置当前的模型矩阵沿xy轴偏移，让图片处于显示中心\n  geom.applyMatrix(new THREE.Matrix4().makeTranslation(-250, -100, 0));\n  // 创建法向量纹理\n  let meshMaterial = new THREE.MeshNormalMaterial({\n    flatShading: THREE.FlatShading,\n    transparent: true,\n    opacity: 0.9,\n  });\n  //  创建一个线框纹理\n  let wireFrameMat = new THREE.MeshBasicMaterial();\n  wireFrameMat.wireframe = true;\n  // 创建模型\n  return THREE.SceneUtils.createMultiMaterialObject(geom, [\n    meshMaterial,\n    wireFrameMat,\n  ]);\n}\n\nfunction initContent() {\n  let text = \"three.js\";\n  let loader = new FontLoader();\n  loader.load(\"/fonts/STSong_Regular.json\", (font) => {\n    // 材质\n    let fontMaterial = new THREE.MeshLambertMaterial({\n      color: 0x912cee,\n      side: THREE.DoubleSide,\n    });\n    /*\n  let planeMaterial = new THREE.MeshLambertMaterial({\n    color: 0x545454,\n    transparent: true,\n    opacity: 0.6,\n    side: THREE.DoubleSide,\n  });\n\n  let planeGeometry = new THREE.PlaneGeometry(60, 30);\n  let plane = new THREE.Mesh(planeGeometry, planeMaterial);\n  plane.position.y += 40;\n  data.base3D.scene.add(plane);*/\n\n    // 生成二维字体模型\n    let shapes = font.generateShapes(text, 10, 1);\n    let fontGeometry = new THREE.ShapeGeometry(shapes);\n\n    // 绑定盒子模型\n    fontGeometry.computeBoundingBox();\n    let fonts = new THREE.Mesh(fontGeometry, fontMaterial);\n    // x = 0,位置\n    // fonts.position.x =\n    //   -0.5 * (fontGeometry.boundingBox.max.x - fontGeometry.boundingBox.min.x);\n    // fonts.position.z += 1;\n    fonts.position.set(-20, 40, 0);\n    data.base3D.scene.add(fonts);\n  });\n}\n</script>\n\n<style scoped>\n.color_pick {\n  position: fixed;\n  top: 4px;\n  right: 4px;\n  outline: none;\n  border: none;\n  -webkit-appearance: none;\n  height: 30px;\n  width: 64px;\n  padding: 0 6px;\n  background: rgba(0, 0, 0, 0.4);\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.25);\n  border-radius: 4px;\n}\n.pass_button {\n  position: fixed;\n  top: 40px;\n  right: 4px;\n  height: 30px;\n  width: 64px;\n  outline: none;\n  border: none;\n  -webkit-appearance: none;\n  background: rgba(0, 0, 0, 0.4);\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.25);\n  border-radius: 4px;\n  color: rgba(255, 255, 255, 0.6);\n  font-size: 12px;\n}\n.highlight {\n  color: rgba(255, 255, 0, 0.6);\n}\n</style>\n"],"names":["THREE.Color","THREE.MeshBasicMaterial","THREE.Mesh","THREE.MeshLambertMaterial","THREE.DoubleSide","THREE.ShapeGeometry"],"mappings":"+pBAuBA,GAAI,GAAQ,EAAS,CACnB,gBAAiB,UACjB,WAAY,CAAE,QAAO,UAAU,UAAU,cAAc,QAAQ,UAAY,KAIzE,EAAO,EAAS,CAClB,OAAQ,KAEV,KAAM,GAAiB,EAAI,MAE3B,GAAI,GAAW,CACb,CAAE,EAAG,KAAM,EAAG,EAAG,EAAG,IAAK,KAAM,kCAC/B,CAAE,EAAG,KAAM,EAAG,EAAG,EAAG,IAAK,KAAM,mCAEjC,EAAU,IAAM,CACd,IACA,MAGF,WAA2B,EAAG,CAC5B,EAAM,gBAAkB,EAAE,OAAO,MAGnC,YAA8B,CAC5B,EAAM,WAAa,CAAC,EAAM,WAC1B,QAAQ,IAAI,GAMd,YAAuB,CACrB,OAAO,iBAAiB,WAAY,IAAM,CAGxC,AADE,SAAS,mBAAqB,SAAS,wBASvC,CAAI,SAAS,eACX,SAAS,iBACA,SAAS,sBAClB,SAAS,uBAEX,EAAK,OAAO,MAAM,WAAa,IAZ/B,CAAI,EAAe,MAAM,kBACvB,EAAe,MAAM,oBACZ,EAAe,MAAM,yBAC9B,EAAe,MAAM,0BAEvB,EAAK,OAAO,MAAM,WAAa,GAAIA,GAAY,EAAM,oBAa3D,YAAqB,CACnB,EAAK,OAAS,GAAI,GAAO,EAAe,OACxC,EAAe,SAAS,EAAK,OAAO,OACpC,EAAS,IAAI,AAAC,GAAS,EAAW,IAElC,IAKF,WAAoB,EAAS,CAC3B,GAAI,CAAE,IAAG,IAAG,IAAG,QAAS,EAExB,AADe,GAAI,KACZ,KAAK,6BAA8B,AAAC,GAAS,CAClD,GAAI,GAAe,GAAI,GAAa,EAAM,CACxC,KAAM,EACN,OAAQ,EACR,OAAQ,SACR,KAAM,EACN,MAAO,SACP,eAAgB,EAChB,UAAW,EACX,cAAe,GACf,aAAc,KAEhB,EAAa,qBAQb,GAAI,GAAe,GAAIC,GAAwB,CAAE,MAAO,UACpD,EAAQ,GAAIC,GAAW,EAAc,GAIzC,EAAM,SAAS,IAAI,EAAG,EAAG,GACzB,EAAK,OAAO,MAAM,IAAI,KA2B1B,YAAuB,CACrB,GAAI,GAAO,WAEX,AADa,GAAI,KACV,KAAK,6BAA8B,AAAC,GAAS,CAElD,GAAI,GAAe,GAAIC,GAA0B,CAC/C,MAAO,QACP,KAAMC,IAgBJ,EAAS,EAAK,eAAe,EAAM,GAAI,GACvC,EAAe,GAAIC,GAAoB,GAG3C,EAAa,qBACb,GAAI,GAAQ,GAAIH,GAAW,EAAc,GAKzC,EAAM,SAAS,IAAI,IAAK,GAAI,GAC5B,EAAK,OAAO,MAAM,IAAI"}